<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>X to Bytes</title>
  
  
  <link href="https://blog.x2b.net/atom.xml" rel="self"/>
  
  <link href="https://blog.x2b.net/"/>
  <updated>2024-07-23T10:01:15.720Z</updated>
  <id>https://blog.x2b.net/</id>
  
  <author>
    <name>assassing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go 语言并发</title>
    <link href="https://blog.x2b.net/1186948524/"/>
    <id>https://blog.x2b.net/1186948524/</id>
    <published>2024-06-17T07:39:33.000Z</published>
    <updated>2024-07-23T10:01:15.720Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;并发和并行&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#并发和并行&quot;&gt;&lt;/a&gt; 并发和并行&lt;/h1&gt;
&lt;p&gt;并发（Concurrent）和并行（Parallel）是计算机科学中两个关键概念，描述系统如何同时处理多个任务。简单来说，并发是同时处理很多事情，而并行是同时做很多事情。&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://blog.x2b.net/categories/Go/"/>
    
    <category term="3.核心概念" scheme="https://blog.x2b.net/categories/Go/3-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 语言反射</title>
    <link href="https://blog.x2b.net/2063047165/"/>
    <id>https://blog.x2b.net/2063047165/</id>
    <published>2024-06-11T07:08:07.000Z</published>
    <updated>2024-07-23T10:01:07.658Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;反射类型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#反射类型&quot;&gt;&lt;/a&gt; 反射类型&lt;/h1&gt;
&lt;p&gt;在 Go 语言中，反射（Reflection）是一种强大的机制，允许程序在运行时检查、修改和操作对象的类型和值。反射在 Go 中主要通过两个类型实现：&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://blog.x2b.net/categories/Go/"/>
    
    <category term="3.核心概念" scheme="https://blog.x2b.net/categories/Go/3-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 语言类型：字符型</title>
    <link href="https://blog.x2b.net/1637391078/"/>
    <id>https://blog.x2b.net/1637391078/</id>
    <published>2024-04-16T01:49:21.000Z</published>
    <updated>2024-07-23T10:00:14.527Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;字符型定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#字符型定义&quot;&gt;&lt;/a&gt; 字符型定义&lt;/h1&gt;
&lt;p&gt;字符（rune）用于处理 Unicode 编码，与 &lt;code&gt;int32&lt;/code&gt; 类型完全等价。字符通过使用 &lt;code&gt;int32&lt;/code&gt; 类型的数字来保存其 Unicode 编码，从而能够表达 Unicode 标准中的任意字符。&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://blog.x2b.net/categories/Go/"/>
    
    <category term="2.类型系统" scheme="https://blog.x2b.net/categories/Go/2-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 语言类型：字节型</title>
    <link href="https://blog.x2b.net/4045392638/"/>
    <id>https://blog.x2b.net/4045392638/</id>
    <published>2024-04-15T09:30:18.000Z</published>
    <updated>2024-07-24T04:37:39.044Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;字节型定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#字节型定义&quot;&gt;&lt;/a&gt; 字节型定义&lt;/h1&gt;
&lt;p&gt;字节类型用于表示单个数据字节，本质上是 &lt;code&gt;uint8&lt;/code&gt; 类型的别名，在内存中的长度为 1 个字节。单个字节可以用来存储一个标准的 ASCII 字符或任意的二进制数据。&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://blog.x2b.net/categories/Go/"/>
    
    <category term="2.类型系统" scheme="https://blog.x2b.net/categories/Go/2-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 语言类型：复数型</title>
    <link href="https://blog.x2b.net/2942714716/"/>
    <id>https://blog.x2b.net/2942714716/</id>
    <published>2024-04-15T09:15:30.000Z</published>
    <updated>2024-07-23T09:59:44.202Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;复数定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#复数定义&quot;&gt;&lt;/a&gt; 复数定义&lt;/h1&gt;
&lt;p&gt;复数（Complex-number）是指能写成 &lt;code&gt;a + bi&lt;/code&gt; 形式的数，这里的 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 是实数，&lt;code&gt;i&lt;/code&gt; 是虚数单位（即 &lt;code&gt;-1&lt;/code&gt; 开根）。Go 语言提供了两种复数类型，由两个浮点数来表示，一个表示实部（real），一个表示虚部（imag）：&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://blog.x2b.net/categories/Go/"/>
    
    <category term="2.类型系统" scheme="https://blog.x2b.net/categories/Go/2-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 语言类型：浮点型</title>
    <link href="https://blog.x2b.net/3158030992/"/>
    <id>https://blog.x2b.net/3158030992/</id>
    <published>2024-04-15T08:26:58.000Z</published>
    <updated>2024-07-23T10:00:40.272Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;浮点型定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#浮点型定义&quot;&gt;&lt;/a&gt; 浮点型定义&lt;/h1&gt;
&lt;p&gt;浮点型数据（Floating-point-number）用于表示包含小数点的数字，也称为实数（Real-number）。&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://blog.x2b.net/categories/Go/"/>
    
    <category term="2.类型系统" scheme="https://blog.x2b.net/categories/Go/2-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 语言类型：整型</title>
    <link href="https://blog.x2b.net/3232286694/"/>
    <id>https://blog.x2b.net/3232286694/</id>
    <published>2024-04-15T07:35:21.000Z</published>
    <updated>2024-07-23T10:00:35.522Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;整型定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#整型定义&quot;&gt;&lt;/a&gt; 整型定义&lt;/h1&gt;
&lt;p&gt;整型数据（Integer）是计算机中基本数据类型。&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://blog.x2b.net/categories/Go/"/>
    
    <category term="2.类型系统" scheme="https://blog.x2b.net/categories/Go/2-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 语言类型：布尔型</title>
    <link href="https://blog.x2b.net/1957230294/"/>
    <id>https://blog.x2b.net/1957230294/</id>
    <published>2024-04-15T07:26:01.000Z</published>
    <updated>2024-07-23T10:00:19.160Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;布尔型定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#布尔型定义&quot;&gt;&lt;/a&gt; 布尔型定义&lt;/h1&gt;
&lt;p&gt;Go 语言中的布尔类型被称为 &lt;code&gt;bool&lt;/code&gt;，在内存中字节长度为 1，值只能为 &lt;code&gt;true&lt;/code&gt; 或 &lt;code&gt;false&lt;/code&gt;，且不能进行强制类型转换。&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://blog.x2b.net/categories/Go/"/>
    
    <category term="2.类型系统" scheme="https://blog.x2b.net/categories/Go/2-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 语言类型：切片</title>
    <link href="https://blog.x2b.net/862170599/"/>
    <id>https://blog.x2b.net/862170599/</id>
    <published>2024-04-12T02:03:37.000Z</published>
    <updated>2024-07-23T10:00:02.463Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;切片定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#切片定义&quot;&gt;&lt;/a&gt; 切片定义&lt;/h1&gt;
&lt;p&gt;切片（Slice）是对数组一个连续片段的引用，它会生成一个指向数组的指针，并通过切片长度关联到底层数组部分或全部元素。切片的长度和容量不固定，可以按需随时扩容。&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://blog.x2b.net/categories/Go/"/>
    
    <category term="2.类型系统" scheme="https://blog.x2b.net/categories/Go/2-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 语言类型：数组</title>
    <link href="https://blog.x2b.net/872565161/"/>
    <id>https://blog.x2b.net/872565161/</id>
    <published>2024-04-11T08:20:54.000Z</published>
    <updated>2024-07-23T10:00:33.016Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;数组定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数组定义&quot;&gt;&lt;/a&gt; 数组定义&lt;/h1&gt;
&lt;p&gt;数组（Array）是具有相同类型的一组定长且有序的变量集合，存放于内存中一块连续区域内。组成数组的各个变量称为数组的元素（element）。每个数组元素都有一个编号，称为数组下标或索引（Array-index）。&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://blog.x2b.net/categories/Go/"/>
    
    <category term="2.类型系统" scheme="https://blog.x2b.net/categories/Go/2-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 语言类型：接口</title>
    <link href="https://blog.x2b.net/1498536549/"/>
    <id>https://blog.x2b.net/1498536549/</id>
    <published>2024-03-18T07:16:49.000Z</published>
    <updated>2024-07-23T10:28:52.823Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;接口定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#接口定义&quot;&gt;&lt;/a&gt; 接口定义&lt;/h1&gt;
&lt;p&gt;Go 语言中的接口（Interface）是用来定义行为的一种抽象结构类型。接口包含一组方法（方法集）声明，但不包含实现代码和数据字段，属于引用类型。定义接口类型语法结构如下：&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://blog.x2b.net/categories/Go/"/>
    
    <category term="2.类型系统" scheme="https://blog.x2b.net/categories/Go/2-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 语言方法</title>
    <link href="https://blog.x2b.net/2902572094/"/>
    <id>https://blog.x2b.net/2902572094/</id>
    <published>2024-03-11T05:41:18.000Z</published>
    <updated>2024-07-23T10:01:39.332Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;方法定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#方法定义&quot;&gt;&lt;/a&gt; 方法定义&lt;/h1&gt;
&lt;p&gt;在 Go 语言中，方法是作用在接收者（receiver）上的一种特殊类型的函数，接收者可以是除了接口和指针外的任意类型，方法可以访问该类型的内部数据。一个类型加方法就像面向对象中的一个类，方法接收者类似于类中的 &lt;code&gt;this&lt;/code&gt; 或 &lt;code&gt;self&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://blog.x2b.net/categories/Go/"/>
    
    <category term="3.核心概念" scheme="https://blog.x2b.net/categories/Go/3-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 语言数据类型</title>
    <link href="https://blog.x2b.net/3126418019/"/>
    <id>https://blog.x2b.net/3126418019/</id>
    <published>2024-03-09T08:12:58.000Z</published>
    <updated>2024-07-23T10:00:29.745Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;数据类型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数据类型&quot;&gt;&lt;/a&gt; 数据类型&lt;/h1&gt;
&lt;p&gt;数据类型定义了编程语言、编译器、数据库以及代码执行环境如何操作和处理数据的方式，同时也能提高内存使用效率。例如，当数据类型被定义为数字时，表示可以对其执行数学运算。&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://blog.x2b.net/categories/Go/"/>
    
    <category term="2.类型系统" scheme="https://blog.x2b.net/categories/Go/2-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 语言类型：结构体</title>
    <link href="https://blog.x2b.net/3077862441/"/>
    <id>https://blog.x2b.net/3077862441/</id>
    <published>2024-03-08T03:16:22.000Z</published>
    <updated>2024-07-23T10:00:44.014Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;结构体类型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#结构体类型&quot;&gt;&lt;/a&gt; 结构体类型&lt;/h1&gt;
&lt;p&gt;结构体（Struct）是由一系列相同或不同类型的数据构成的数据集合，用来实现较复杂的数据结构。通过结构体，可以在单个变量中储存众多不同类型的数据，以方便操作。&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://blog.x2b.net/categories/Go/"/>
    
    <category term="2.类型系统" scheme="https://blog.x2b.net/categories/Go/2-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 语言类型：映射</title>
    <link href="https://blog.x2b.net/2096879394/"/>
    <id>https://blog.x2b.net/2096879394/</id>
    <published>2024-03-01T02:05:12.000Z</published>
    <updated>2024-07-23T10:00:37.847Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;映射定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#映射定义&quot;&gt;&lt;/a&gt; 映射定义&lt;/h1&gt;
&lt;p&gt;映射（Map）是用于储存一系列无序的键值对（Key-value Pair）的数据结构。映射通过把键映射到值来进行访问，能够快速检索数据。映射有时也叫做字典、哈希表、散列和关联数组。&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://blog.x2b.net/categories/Go/"/>
    
    <category term="2.类型系统" scheme="https://blog.x2b.net/categories/Go/2-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 语言程序结构</title>
    <link href="https://blog.x2b.net/814809577/"/>
    <id>https://blog.x2b.net/814809577/</id>
    <published>2024-02-27T02:01:18.000Z</published>
    <updated>2024-07-23T09:59:18.024Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;项目结构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#项目结构&quot;&gt;&lt;/a&gt; 项目结构&lt;/h1&gt;
&lt;p&gt;使用 Go Modules 的项目，其结构可以相对简单且灵活，一切根据项目需求进行调整。&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://blog.x2b.net/categories/Go/"/>
    
    <category term="1.入门基础" scheme="https://blog.x2b.net/categories/Go/1-%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 语言类型：指针</title>
    <link href="https://blog.x2b.net/1935704712/"/>
    <id>https://blog.x2b.net/1935704712/</id>
    <published>2024-01-19T10:23:50.000Z</published>
    <updated>2024-07-23T10:00:21.517Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;理论基础&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#理论基础&quot;&gt;&lt;/a&gt; 理论基础&lt;/h1&gt;
&lt;p&gt;指针的定义、Go 语言中指针类型和限制。&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://blog.x2b.net/categories/Go/"/>
    
    <category term="2.类型系统" scheme="https://blog.x2b.net/categories/Go/2-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 语言类型：字符串型</title>
    <link href="https://blog.x2b.net/355163610/"/>
    <id>https://blog.x2b.net/355163610/</id>
    <published>2024-01-19T07:22:17.000Z</published>
    <updated>2024-07-23T10:11:28.853Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;字符串定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#字符串定义&quot;&gt;&lt;/a&gt; 字符串定义&lt;/h1&gt;
&lt;p&gt;一个字符串（String）在 Go 语言中是一个不可改变的 UTF-8 编码的字节序列。字符串可以理解为不可变的字节数组，数组中的每个元素是一个字节，而一个完整的 Unicode 字符可能由一个或多个字节组成。&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://blog.x2b.net/categories/Go/"/>
    
    <category term="2.类型系统" scheme="https://blog.x2b.net/categories/Go/2-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 语言常量和变量</title>
    <link href="https://blog.x2b.net/1650853229/"/>
    <id>https://blog.x2b.net/1650853229/</id>
    <published>2024-01-18T09:06:18.000Z</published>
    <updated>2024-07-23T10:01:10.725Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#定义&quot;&gt;&lt;/a&gt; 定义&lt;/h1&gt;
&lt;p&gt;高级语言通过一个标识符绑定一块特定内存，后续对特定内存的操作都可以使用该标识符来替代，这类标识符分为变量（Variable）和常量（Constant）。&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://blog.x2b.net/categories/Go/"/>
    
    <category term="3.核心概念" scheme="https://blog.x2b.net/categories/Go/3-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>Go 语言控制流程</title>
    <link href="https://blog.x2b.net/4235348942/"/>
    <id>https://blog.x2b.net/4235348942/</id>
    <published>2024-01-14T14:45:10.000Z</published>
    <updated>2024-07-23T10:24:51.732Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;流程控制&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#流程控制&quot;&gt;&lt;/a&gt; 流程控制&lt;/h1&gt;
&lt;p&gt;计算机程序设计结构一般可以分为三种：顺序结构（Chronological Structure）、选择结构（Selective Structure）和循环结构。其中顺序结构最简单，执行顺序自上而下，依次执行。&lt;/p&gt;</summary>
    
    
    
    <category term="Go" scheme="https://blog.x2b.net/categories/Go/"/>
    
    <category term="3.核心概念" scheme="https://blog.x2b.net/categories/Go/3-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    
    
  </entry>
  
</feed>
