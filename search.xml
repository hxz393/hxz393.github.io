<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>02.软件基础</title>
    <url>/52059/</url>
    <content><![CDATA[<h1 id="数字系统"><a class="markdownIt-Anchor" href="#数字系统"></a> 数字系统</h1>
<p>计算机使用电信号的开和关来代表二进制的1和0，这种逢2进1位的表示法称为二进制。除了二进制，常用的进制还有八进制和十六进制。然而，现实生活中使用的数字系统是十进制。</p>
<p>在编程语言中，表示二进制数的前缀是&quot;0b&quot;，表示八进制数的前缀是&quot;0o&quot;，表示十六进制数的前缀是&quot;0x&quot;。</p>
<h2 id="二进制转十进制"><a class="markdownIt-Anchor" href="#二进制转十进制"></a> 二进制转十进制</h2>
<p>例如，要将二进制数1101101转换为十进制数，手动计算方法如下：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1101101</mn><mo>=</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>6</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>5</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>4</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mn>1</mn><mo>=</mo><mn>64</mn><mo>+</mo><mn>32</mn><mo>+</mo><mn>0</mn><mo>+</mo><mn>8</mn><mo>+</mo><mn>4</mn><mo>+</mo><mn>0</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>109</mn></mrow><annotation encoding="application/x-tex">1101101=1*2^6+1*2^5+0*2^4+1*2^3+1*2^2+0*2^1+1=64+32+0+8+4+0+1=109
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">9</span></span></span></span></span></p>
<p>在Bash中，可以使用<code>echo $(())</code>来直接将二进制数转换为十进制数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server2 ~<span class="token punctuation">]</span><span class="token comment"># echo $((2#1101101))</span>
<span class="token number">109</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="十进制转二进制"><a class="markdownIt-Anchor" href="#十进制转二进制"></a> 十进制转二进制</h3>
<p>例如将十进制109转回二进制:</p>
<pre><code>109/2=54...1
054/2=27...0
027/2=13...1
013/2=06...1
007/2=03...0
003/2=01...1
001/2=00...1
</code></pre>
<p>将商除到0为止,把所有的余数从下往上读,得到的就是二进制结果1101101.</p>
<p>在bash中可以通过调用bc来计算:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server2 ~<span class="token punctuation">]</span><span class="token comment"># echo "obase=2;ibase=10;109"|bc -l</span>
<span class="token number">1101101</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="二进制转十六进制"><a class="markdownIt-Anchor" href="#二进制转十六进制"></a> 二进制转十六进制</h3>
<p>例如要将二进制1101101转为十六进制.</p>
<p>因为四位二进制恰好等于一位十六进制,所以先将二进制数字从低位到高位分为四位一组,高位不足四位在前面补0:</p>
<p>0110 1101</p>
<p>然后将每一组转为对应的十六位进制数:</p>
<p>6 D</p>
<p>得到转换结果0x6D.</p>
<h3 id="十六进制转二进制"><a class="markdownIt-Anchor" href="#十六进制转二进制"></a> 十六进制转二进制</h3>
<p>例如将十六进制0x6D转为二进制.</p>
<p>原理同二进制转十六进制,将每位十六进制单独拿出来</p>
<p>6 D</p>
<p>将每位转为对应的二进制:</p>
<p>0110 1101</p>
<p>得到转换结果1101101.</p>
<h3 id="计算单位"><a class="markdownIt-Anchor" href="#计算单位"></a> 计算单位</h3>
<p>计算机中常用的计算单位有下面一些:</p>
<ul>
<li>
<p><strong>容量单位</strong></p>
<ul>
<li>
<p><strong>比特</strong>(bit): 二进制单位,只记录0或1.</p>
</li>
<li>
<p><strong>字节</strong>(Byte): 储存记录用的单位, 1Byte = 8bit. 1KB = 1024Byte. 再往上有GB,TB,PB,EB,ZB等单位.</p>
</li>
</ul>
</li>
<li>
<p><strong>速度单位</strong></p>
<ul>
<li>
<p><strong>运算速度</strong>: Hz代表秒分之一,CPU运算速度常使用MHz或GHz. 1MHz = 1000*1000Hz</p>
</li>
<li>
<p><strong>网络传输</strong>: bps意思是bit per second每秒多少比特,常见的网卡速度100Mbps意即每秒传输100Mbits,转为实际文件传输速度等于12.5MB/s</p>
</li>
</ul>
</li>
</ul>
<h2 id="编码系统"><a class="markdownIt-Anchor" href="#编码系统"></a> 编码系统</h2>
<p>计算机只能识别数字,所以通过编码系统处理将文字转为数字储存.</p>
<h3 id="编码过程"><a class="markdownIt-Anchor" href="#编码过程"></a> 编码过程</h3>
<p>编码就是依据一个编码对照表,将文字转为对应编码表中的编号,把编号数字存入文件中.</p>
<p>读取时则再次依据对照表还原成文字显示出来.</p>
<p>如果选择的编码表和实际不符,转出来的就是所谓的&quot;乱码&quot;.</p>
<p>常用的有编码表有:ASCII, GB2312, Unicode</p>
<h3 id="ascii编码"><a class="markdownIt-Anchor" href="#ascii编码"></a> ASCII编码</h3>
<p>美国信息交换标准码(ASCII, American Standard Code For Information Interchange)为每个字符指定7位(最左边的位被忽略掉,占用1Bytes的记录),因此总共可以表示128个字符,即从二进制0000000到1111111.</p>
<p>ASII码中包含33个控制字符,52个字母(65~90,97~122),10个数字(48~57),32个标点符号以及空白符</p>
<h3 id="gb2312编码"><a class="markdownIt-Anchor" href="#gb2312编码"></a> GB2312编码</h3>
<p>简体中文最常用的是GB2312编码,每个中文字会占用2Bytes.</p>
<p>理论上有2<sup>16</sup>=65536个记录位置,实际只收录了一万三千多个中文字.</p>
<h3 id="unicode编码"><a class="markdownIt-Anchor" href="#unicode编码"></a> Unicode编码</h3>
<p>Unicode编码也叫UTF8或统一码.基本上包含了所有语言的文字.</p>
<h2 id="逻辑门"><a class="markdownIt-Anchor" href="#逻辑门"></a> 逻辑门</h2>
<p>主要的逻辑电路基本单元有下面一些.</p>
<h3 id="非门not-gate"><a class="markdownIt-Anchor" href="#非门not-gate"></a> 非门(NOT Gate)</h3>
<p>又称非电路,反相器,倒相器,逻辑否定电路.当其输入端为高电平1时输出端为低电平0,当其输入端为低电平0时输出端为高电平1.也就是说输入端和输出端的电平状态总是反相的.</p>
<p>非门的真值表:</p>
<table>
<thead>
<tr>
<th>输入A</th>
<th>输出Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下:</p>
<p><img data-src="img/image-20211008063223269.png" alt="非门" /></p>
<h3 id="与门and-gate"><a class="markdownIt-Anchor" href="#与门and-gate"></a> 与门(AND Gate)</h3>
<p>又称与电路,逻辑积,逻辑与电路.当所有的输入同时为高电平1时,输出才为高电平1.否则输出为低电平0.</p>
<p>与门的真值表:</p>
<table>
<thead>
<tr>
<th>输入A</th>
<th>输入B</th>
<th>输出Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下:</p>
<p><img data-src="img/image-20211008052950609.png" alt="与门" /></p>
<h3 id="或门or-gate"><a class="markdownIt-Anchor" href="#或门or-gate"></a> 或门(OR Gate)</h3>
<p>又称或电路,逻辑和电路.只要输入中有一个为高电平时1,输出就为高电平1;只有当所有的输入全为低电平0时,输出才为低电平0.</p>
<p>或门的真值表:</p>
<table>
<thead>
<tr>
<th>输入A</th>
<th>输入B</th>
<th>输出F</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下:</p>
<p><img data-src="img/2021-10-08_053552.jpg" alt="或门" /></p>
<h3 id="与非门nand-gate"><a class="markdownIt-Anchor" href="#与非门nand-gate"></a> 与非门(NAND Gate)</h3>
<p>是与门和非门的叠加.若当输入均为高电平(1),则输出为低电平(0);若输入中至少有一个为低电平(0),则输出为高电平(1).与非门可以看作是与门和非门的叠加.</p>
<p>与非门真值表:</p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下:</p>
<p><img data-src="img/image-20211008055034709.png" alt="与非门" /></p>
<h3 id="或非门nor-gate"><a class="markdownIt-Anchor" href="#或非门nor-gate"></a> 或非门(NOR Gate)</h3>
<p>实现逻辑或非功能.有多个输入端,1个输出端,多输入或非门可由2输入或非门和反相器构成.只有当两个输入A和B为低电平(0)时输出为高电平(1).也可以理解为任意输入为高电平(1),输出为低电平(0).</p>
<p>或非门真值表:</p>
<table>
<thead>
<tr>
<th>输入A</th>
<th>输入B</th>
<th>输出Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下:</p>
<p><img data-src="img/image-20211008054007683.png" alt="或非门" /></p>
<h3 id="异或门xor-gate"><a class="markdownIt-Anchor" href="#异或门xor-gate"></a> 异或门(XOR Gate)</h3>
<p>是数字逻辑中实现逻辑异或的逻辑门.多输入异或门可由两输入异或门构成.若两个输入的电平相异,则输出为高电平1;若两个输入的电平相同,则输出为低电平0.即如果两个输入不同,则异或门输出高电平1.</p>
<p>异或门真值表:</p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>输出Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下:</p>
<p><img data-src="img/image-20211008063739550.png" alt="异或门" /></p>
<h3 id="同或门xnor-gate"><a class="markdownIt-Anchor" href="#同或门xnor-gate"></a> 同或门(XNOR gate)</h3>
<p>也称为异或非门,在异或门的输出端再加上一个非门就构成了异或非门.当2个输入端中有且只有一个是低电平0时,输出为低电平0.亦即当输入电平相同时,输出为高电平1.</p>
<p>同或门真值表:</p>
<table>
<thead>
<tr>
<th>输入A</th>
<th>输入B</th>
<th>输出F</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下:</p>
<p><img data-src="img/image-20211008064050589.png" alt="同或门" /></p>
<h3 id="加法计算器"><a class="markdownIt-Anchor" href="#加法计算器"></a> 加法计算器</h3>
<p>可以使用两种基本逻辑门来计算两个二进制数相加的结果:</p>
<ul>
<li>
<p>加法位</p>
<p>加法位的计算结果由XOR异或门实现</p>
<table>
<thead>
<tr>
<th>+加和</th>
<th>0</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>0</strong></td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td><strong>1</strong></td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>进位位</p>
<p>进位位的计算结果由AND与门实现</p>
<table>
<thead>
<tr>
<th>+进位</th>
<th>0</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>0</strong></td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td><strong>1</strong></td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>将它们连起来就成为半加器(Half Adder):</p>
<p><img data-src="img/image-20211008165505638.png" alt="半加器" /></p>
<p>为了将可能产生的进位位纳入下一次运算,需要对三个二进制数进行加法运算,最终将两个半加器和一个或门连接起来成为一个全加器(Full Adder):</p>
<p><img data-src="img/image-20211008065652929.png" alt="全加器" /></p>
<p>首先这一次计算两个二进制数A和B的和得到进位和加和输出,然后将加和输出与上一次计算结果的进位输出相加得到另外一个进位和加和输出,最后将两次的进位输出做或运算,与上一步得出的加和输出在一起传递给下一环节.</p>
<h2 id="软件程序"><a class="markdownIt-Anchor" href="#软件程序"></a> 软件程序</h2>
<p>程序一般分为操作系统和应用程序.</p>
<h3 id="操作系统"><a class="markdownIt-Anchor" href="#操作系统"></a> 操作系统</h3>
<p>操作系统(OS, Operating System)也是一组程序,用于管理计算机的所有活动以及驱动系统中的所有硬件.</p>
<p>操作系统内核直接参考硬件规格写成,用于管理硬件,所以同一个操作系统内核不能在不同的硬件构架下运行.</p>
<p>操作系统功能主要有:</p>
<ul>
<li>
<p><strong>系统调用接口</strong>(System call interface):</p>
<p>方便程序员通过接口与内核通信,利用硬件资源.</p>
</li>
<li>
<p><strong>程序管理</strong>(Process Control):</p>
<p>一部计算机可以同时运行很多软件,一般管运行中的程序叫进程.进程可以在前台也可以在后台运行,内核控制着系统管理运行在系统上的所有进程.</p>
</li>
<li>
<p><strong>内存管理</strong>(Memory Management):</p>
<p>因为程序代码和数据都必须载入到内存中运行,所以内存控制非常重要.</p>
<p>交换空间(虚拟内存)用于物理内存不足时提功内存交换(swap)功能,调用虚拟内存的过程称为页面调度(Paging).</p>
<p>内存储存单元按组划分成很多块,这些块称为页面(Page).内核将每个内存页面放在物理内存或交换空间中,然后维护一个内存页面表,自动把一段时间未访问的内存页面复制到交换空间(Swapping Out).当程序要访问一个已被换出的内存页面时,内核必须从物理内存换出另外一个内存页面给它让出空间,然后从交换空间换入请求的内存页面.</p>
</li>
<li>
<p><strong>文件系统管理</strong>(Filesystem Management):</p>
<p>负责对多种文件系统的支持,管理数据输入输出工作,文件格式支持等.</p>
</li>
<li>
<p><strong>设备驱动</strong>(Device Driver):</p>
<p>管理硬件的驱动.驱动程序相当于应用程序和硬件设备的中间人,允许内核与设备之间交换数据.</p>
</li>
</ul>
<h3 id="应用程序"><a class="markdownIt-Anchor" href="#应用程序"></a> 应用程序</h3>
<p>应用程序是参考操作系统提供的开发接口所开发出来的软件,这些软件通常针对特定功能利用.</p>
<h3 id="源代码"><a class="markdownIt-Anchor" href="#源代码"></a> 源代码</h3>
<p>源代码是创建软件的原始数据.可以使用C++这样的编程语言来编写源代码,在使用这些代码之前需要进行编译.使用Perl或Python这样的脚本语言编写源代码,不需要编译即可运行.</p>
<h3 id="开源许可"><a class="markdownIt-Anchor" href="#开源许可"></a> 开源许可</h3>
<p>以源代码形式提供的软件称为开放源代码,通常可以自由地查看,共享,使用和修改它.</p>
<p>开源软件许可证声明对源代码拥有版权,并确定代码的使用和发布,以及派生代码的使用和发布的自由范围和限制.常见的开源许可证有BSD和GPL.</p>
<ul>
<li>
<p>BSD许可证</p>
<p>可以自由地修改持有BSD许可证的源代码,而且不需要重新发布这些修改.常用于私有的或商业的软件中.</p>
</li>
<li>
<p>GPL许可证</p>
<p>GNU通用公共许可证也叫GPL,对于已发布的软件所作的任何修改都必须以相同的许可证发布.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
  <entry>
    <title>02.软件基础</title>
    <url>/52059/</url>
    <content><![CDATA[<h1 id="数字系统"><a class="markdownIt-Anchor" href="#数字系统"></a> 数字系统</h1>
<p>计算机使用电信号的开和关来代表二进制的1和0，这种逢2进1位的表示法称为二进制。除了二进制，常用的进制还有八进制和十六进制。然而，现实生活中使用的数字系统是十进制。</p>
<p>在编程语言中，表示二进制数的前缀是&quot;0b&quot;，表示八进制数的前缀是&quot;0o&quot;，表示十六进制数的前缀是&quot;0x&quot;。</p>
<h2 id="二进制转十进制"><a class="markdownIt-Anchor" href="#二进制转十进制"></a> 二进制转十进制</h2>
<p>例如，要将二进制数1101101转换为十进制数，手动计算方法如下：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1101101</mn><mo>=</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>6</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>5</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>4</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mn>1</mn><mo>=</mo><mn>64</mn><mo>+</mo><mn>32</mn><mo>+</mo><mn>0</mn><mo>+</mo><mn>8</mn><mo>+</mo><mn>4</mn><mo>+</mo><mn>0</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>109</mn></mrow><annotation encoding="application/x-tex">1101101=1*2^6+1*2^5+0*2^4+1*2^3+1*2^2+0*2^1+1=64+32+0+8+4+0+1=109
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">9</span></span></span></span></span></p>
<p>在Bash中，可以使用<code>echo $(())</code>来直接将二进制数转换为十进制数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server2 ~<span class="token punctuation">]</span><span class="token comment"># echo $((2#1101101))</span>
<span class="token number">109</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="十进制转二进制"><a class="markdownIt-Anchor" href="#十进制转二进制"></a> 十进制转二进制</h3>
<p>例如将十进制109转回二进制:</p>
<pre><code>109/2=54...1
054/2=27...0
027/2=13...1
013/2=06...1
007/2=03...0
003/2=01...1
001/2=00...1
</code></pre>
<p>将商除到0为止,把所有的余数从下往上读,得到的就是二进制结果1101101.</p>
<p>在bash中可以通过调用bc来计算:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server2 ~<span class="token punctuation">]</span><span class="token comment"># echo "obase=2;ibase=10;109"|bc -l</span>
<span class="token number">1101101</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="二进制转十六进制"><a class="markdownIt-Anchor" href="#二进制转十六进制"></a> 二进制转十六进制</h3>
<p>例如要将二进制1101101转为十六进制.</p>
<p>因为四位二进制恰好等于一位十六进制,所以先将二进制数字从低位到高位分为四位一组,高位不足四位在前面补0:</p>
<p>0110 1101</p>
<p>然后将每一组转为对应的十六位进制数:</p>
<p>6 D</p>
<p>得到转换结果0x6D.</p>
<h3 id="十六进制转二进制"><a class="markdownIt-Anchor" href="#十六进制转二进制"></a> 十六进制转二进制</h3>
<p>例如将十六进制0x6D转为二进制.</p>
<p>原理同二进制转十六进制,将每位十六进制单独拿出来</p>
<p>6 D</p>
<p>将每位转为对应的二进制:</p>
<p>0110 1101</p>
<p>得到转换结果1101101.</p>
<h3 id="计算单位"><a class="markdownIt-Anchor" href="#计算单位"></a> 计算单位</h3>
<p>计算机中常用的计算单位有下面一些:</p>
<ul>
<li>
<p><strong>容量单位</strong></p>
<ul>
<li>
<p><strong>比特</strong>(bit): 二进制单位,只记录0或1.</p>
</li>
<li>
<p><strong>字节</strong>(Byte): 储存记录用的单位, 1Byte = 8bit. 1KB = 1024Byte. 再往上有GB,TB,PB,EB,ZB等单位.</p>
</li>
</ul>
</li>
<li>
<p><strong>速度单位</strong></p>
<ul>
<li>
<p><strong>运算速度</strong>: Hz代表秒分之一,CPU运算速度常使用MHz或GHz. 1MHz = 1000*1000Hz</p>
</li>
<li>
<p><strong>网络传输</strong>: bps意思是bit per second每秒多少比特,常见的网卡速度100Mbps意即每秒传输100Mbits,转为实际文件传输速度等于12.5MB/s</p>
</li>
</ul>
</li>
</ul>
<h2 id="编码系统"><a class="markdownIt-Anchor" href="#编码系统"></a> 编码系统</h2>
<p>计算机只能识别数字,所以通过编码系统处理将文字转为数字储存.</p>
<h3 id="编码过程"><a class="markdownIt-Anchor" href="#编码过程"></a> 编码过程</h3>
<p>编码就是依据一个编码对照表,将文字转为对应编码表中的编号,把编号数字存入文件中.</p>
<p>读取时则再次依据对照表还原成文字显示出来.</p>
<p>如果选择的编码表和实际不符,转出来的就是所谓的&quot;乱码&quot;.</p>
<p>常用的有编码表有:ASCII, GB2312, Unicode</p>
<h3 id="ascii编码"><a class="markdownIt-Anchor" href="#ascii编码"></a> ASCII编码</h3>
<p>美国信息交换标准码(ASCII, American Standard Code For Information Interchange)为每个字符指定7位(最左边的位被忽略掉,占用1Bytes的记录),因此总共可以表示128个字符,即从二进制0000000到1111111.</p>
<p>ASII码中包含33个控制字符,52个字母(65~90,97~122),10个数字(48~57),32个标点符号以及空白符</p>
<h3 id="gb2312编码"><a class="markdownIt-Anchor" href="#gb2312编码"></a> GB2312编码</h3>
<p>简体中文最常用的是GB2312编码,每个中文字会占用2Bytes.</p>
<p>理论上有2<sup>16</sup>=65536个记录位置,实际只收录了一万三千多个中文字.</p>
<h3 id="unicode编码"><a class="markdownIt-Anchor" href="#unicode编码"></a> Unicode编码</h3>
<p>Unicode编码也叫UTF8或统一码.基本上包含了所有语言的文字.</p>
<h2 id="逻辑门"><a class="markdownIt-Anchor" href="#逻辑门"></a> 逻辑门</h2>
<p>主要的逻辑电路基本单元有下面一些.</p>
<h3 id="非门not-gate"><a class="markdownIt-Anchor" href="#非门not-gate"></a> 非门(NOT Gate)</h3>
<p>又称非电路,反相器,倒相器,逻辑否定电路.当其输入端为高电平1时输出端为低电平0,当其输入端为低电平0时输出端为高电平1.也就是说输入端和输出端的电平状态总是反相的.</p>
<p>非门的真值表:</p>
<table>
<thead>
<tr>
<th>输入A</th>
<th>输出Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下:</p>
<p><img data-src="img/image-20211008063223269.png" alt="非门" /></p>
<h3 id="与门and-gate"><a class="markdownIt-Anchor" href="#与门and-gate"></a> 与门(AND Gate)</h3>
<p>又称与电路,逻辑积,逻辑与电路.当所有的输入同时为高电平1时,输出才为高电平1.否则输出为低电平0.</p>
<p>与门的真值表:</p>
<table>
<thead>
<tr>
<th>输入A</th>
<th>输入B</th>
<th>输出Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下:</p>
<p><img data-src="img/image-20211008052950609.png" alt="与门" /></p>
<h3 id="或门or-gate"><a class="markdownIt-Anchor" href="#或门or-gate"></a> 或门(OR Gate)</h3>
<p>又称或电路,逻辑和电路.只要输入中有一个为高电平时1,输出就为高电平1;只有当所有的输入全为低电平0时,输出才为低电平0.</p>
<p>或门的真值表:</p>
<table>
<thead>
<tr>
<th>输入A</th>
<th>输入B</th>
<th>输出F</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下:</p>
<p><img data-src="img/2021-10-08_053552.jpg" alt="或门" /></p>
<h3 id="与非门nand-gate"><a class="markdownIt-Anchor" href="#与非门nand-gate"></a> 与非门(NAND Gate)</h3>
<p>是与门和非门的叠加.若当输入均为高电平(1),则输出为低电平(0);若输入中至少有一个为低电平(0),则输出为高电平(1).与非门可以看作是与门和非门的叠加.</p>
<p>与非门真值表:</p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下:</p>
<p><img data-src="img/image-20211008055034709.png" alt="与非门" /></p>
<h3 id="或非门nor-gate"><a class="markdownIt-Anchor" href="#或非门nor-gate"></a> 或非门(NOR Gate)</h3>
<p>实现逻辑或非功能.有多个输入端,1个输出端,多输入或非门可由2输入或非门和反相器构成.只有当两个输入A和B为低电平(0)时输出为高电平(1).也可以理解为任意输入为高电平(1),输出为低电平(0).</p>
<p>或非门真值表:</p>
<table>
<thead>
<tr>
<th>输入A</th>
<th>输入B</th>
<th>输出Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下:</p>
<p><img data-src="img/image-20211008054007683.png" alt="或非门" /></p>
<h3 id="异或门xor-gate"><a class="markdownIt-Anchor" href="#异或门xor-gate"></a> 异或门(XOR Gate)</h3>
<p>是数字逻辑中实现逻辑异或的逻辑门.多输入异或门可由两输入异或门构成.若两个输入的电平相异,则输出为高电平1;若两个输入的电平相同,则输出为低电平0.即如果两个输入不同,则异或门输出高电平1.</p>
<p>异或门真值表:</p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>输出Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下:</p>
<p><img data-src="img/image-20211008063739550.png" alt="异或门" /></p>
<h3 id="同或门xnor-gate"><a class="markdownIt-Anchor" href="#同或门xnor-gate"></a> 同或门(XNOR gate)</h3>
<p>也称为异或非门,在异或门的输出端再加上一个非门就构成了异或非门.当2个输入端中有且只有一个是低电平0时,输出为低电平0.亦即当输入电平相同时,输出为高电平1.</p>
<p>同或门真值表:</p>
<table>
<thead>
<tr>
<th>输入A</th>
<th>输入B</th>
<th>输出F</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下:</p>
<p><img data-src="img/image-20211008064050589.png" alt="同或门" /></p>
<h3 id="加法计算器"><a class="markdownIt-Anchor" href="#加法计算器"></a> 加法计算器</h3>
<p>可以使用两种基本逻辑门来计算两个二进制数相加的结果:</p>
<ul>
<li>
<p>加法位</p>
<p>加法位的计算结果由XOR异或门实现</p>
<table>
<thead>
<tr>
<th>+加和</th>
<th>0</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>0</strong></td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td><strong>1</strong></td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>进位位</p>
<p>进位位的计算结果由AND与门实现</p>
<table>
<thead>
<tr>
<th>+进位</th>
<th>0</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>0</strong></td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td><strong>1</strong></td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>将它们连起来就成为半加器(Half Adder):</p>
<p><img data-src="img/image-20211008165505638.png" alt="半加器" /></p>
<p>为了将可能产生的进位位纳入下一次运算,需要对三个二进制数进行加法运算,最终将两个半加器和一个或门连接起来成为一个全加器(Full Adder):</p>
<p><img data-src="img/image-20211008065652929.png" alt="全加器" /></p>
<p>首先这一次计算两个二进制数A和B的和得到进位和加和输出,然后将加和输出与上一次计算结果的进位输出相加得到另外一个进位和加和输出,最后将两次的进位输出做或运算,与上一步得出的加和输出在一起传递给下一环节.</p>
<h2 id="软件程序"><a class="markdownIt-Anchor" href="#软件程序"></a> 软件程序</h2>
<p>程序一般分为操作系统和应用程序.</p>
<h3 id="操作系统"><a class="markdownIt-Anchor" href="#操作系统"></a> 操作系统</h3>
<p>操作系统(OS, Operating System)也是一组程序,用于管理计算机的所有活动以及驱动系统中的所有硬件.</p>
<p>操作系统内核直接参考硬件规格写成,用于管理硬件,所以同一个操作系统内核不能在不同的硬件构架下运行.</p>
<p>操作系统功能主要有:</p>
<ul>
<li>
<p><strong>系统调用接口</strong>(System call interface):</p>
<p>方便程序员通过接口与内核通信,利用硬件资源.</p>
</li>
<li>
<p><strong>程序管理</strong>(Process Control):</p>
<p>一部计算机可以同时运行很多软件,一般管运行中的程序叫进程.进程可以在前台也可以在后台运行,内核控制着系统管理运行在系统上的所有进程.</p>
</li>
<li>
<p><strong>内存管理</strong>(Memory Management):</p>
<p>因为程序代码和数据都必须载入到内存中运行,所以内存控制非常重要.</p>
<p>交换空间(虚拟内存)用于物理内存不足时提功内存交换(swap)功能,调用虚拟内存的过程称为页面调度(Paging).</p>
<p>内存储存单元按组划分成很多块,这些块称为页面(Page).内核将每个内存页面放在物理内存或交换空间中,然后维护一个内存页面表,自动把一段时间未访问的内存页面复制到交换空间(Swapping Out).当程序要访问一个已被换出的内存页面时,内核必须从物理内存换出另外一个内存页面给它让出空间,然后从交换空间换入请求的内存页面.</p>
</li>
<li>
<p><strong>文件系统管理</strong>(Filesystem Management):</p>
<p>负责对多种文件系统的支持,管理数据输入输出工作,文件格式支持等.</p>
</li>
<li>
<p><strong>设备驱动</strong>(Device Driver):</p>
<p>管理硬件的驱动.驱动程序相当于应用程序和硬件设备的中间人,允许内核与设备之间交换数据.</p>
</li>
</ul>
<h3 id="应用程序"><a class="markdownIt-Anchor" href="#应用程序"></a> 应用程序</h3>
<p>应用程序是参考操作系统提供的开发接口所开发出来的软件,这些软件通常针对特定功能利用.</p>
<h3 id="源代码"><a class="markdownIt-Anchor" href="#源代码"></a> 源代码</h3>
<p>源代码是创建软件的原始数据.可以使用C++这样的编程语言来编写源代码,在使用这些代码之前需要进行编译.使用Perl或Python这样的脚本语言编写源代码,不需要编译即可运行.</p>
<h3 id="开源许可"><a class="markdownIt-Anchor" href="#开源许可"></a> 开源许可</h3>
<p>以源代码形式提供的软件称为开放源代码,通常可以自由地查看,共享,使用和修改它.</p>
<p>开源软件许可证声明对源代码拥有版权,并确定代码的使用和发布,以及派生代码的使用和发布的自由范围和限制.常见的开源许可证有BSD和GPL.</p>
<ul>
<li>
<p>BSD许可证</p>
<p>可以自由地修改持有BSD许可证的源代码,而且不需要重新发布这些修改.常用于私有的或商业的软件中.</p>
</li>
<li>
<p>GPL许可证</p>
<p>GNU通用公共许可证也叫GPL,对于已发布的软件所作的任何修改都必须以相同的许可证发布.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
  <entry>
    <title>01.硬件基础</title>
    <url>/17367/</url>
    <content><![CDATA[<h1 id="计算机简介"><a class="markdownIt-Anchor" href="#计算机简介"></a> 计算机简介</h1>
<p>计算机是一种拥有输入和输出设备的机器，它可以通过输入设备接受用户的输入，并经过中央处理器的数学与逻辑单元的处理，将这些输入转换成有用的信息进行生成或储存。因此，计算机可以说是一种具有高度智能化的信息处理工具。</p>
<h2 id="计算机组成"><a class="markdownIt-Anchor" href="#计算机组成"></a> 计算机组成</h2>
<p>计算机通常由五大部分组成，它们分别是输入单元、输出单元、中央处理器（CPU）内部的控制单元、算术逻辑单元和内存。这些部分协同工作，使得计算机能够完成复杂的计算和数据处理任务。其中，输入单元用于接收用户的输入信息，输出单元用于向用户展示计算机处理结果，控制单元则负责控制计算机的整个运作过程，算术逻辑单元则处理计算机的算术和逻辑运算，而内存则用于储存数据和程序。这五大部分共同构成了现代计算机的核心。</p>
<h2 id="计算机分类"><a class="markdownIt-Anchor" href="#计算机分类"></a> 计算机分类</h2>
<p>根据用途的不同，计算机可以被分为以下几类：</p>
<ul>
<li>
<p><strong>超级计算机</strong>（Supercomputer）：</p>
<p>这是最快也最贵的计算机，通常用于需要进行高速计算的项目中，比如军事、气象、太空、模拟等。</p>
</li>
<li>
<p><strong>大型计算机</strong>（Mainframe Computer）：</p>
<p>这种计算机用于处理大规模的数据和复杂的运算，常见于证券、银行、大型企业数据库服务器等场所。</p>
</li>
<li>
<p><strong>迷你计算机</strong>（Minicomputer）：</p>
<p>迷你计算机是低配版的大型计算机，适用于那些场所环境要求不那么严格的场合，比如科研、工程分析、工厂等。</p>
</li>
<li>
<p><strong>工作站</strong>（Workstation）：</p>
<p>工作站是专门针对特定用途而设计的计算机，比如图形工作站、机器学习等。与个人电脑相比，工作站更强调稳定性。</p>
</li>
<li>
<p><strong>微型计算机</strong>（Microcomputer）：</p>
<p>微型计算机也称为个人计算机（PC），包括移动设备和桌面型电脑等。它们是普及度最高的计算机类型，广泛应用于个人和办公场所，具有性价比高和易于携带的优点。</p>
</li>
</ul>
<h1 id="cpu"><a class="markdownIt-Anchor" href="#cpu"></a> CPU</h1>
<p>中央处理器（CPU，Central Processing Unit）是计算机中最重要的组成部分之一，它是一个集成了微指令集和特定功能的芯片。CPU 通过执行指令来控制计算机的操作，包括算术逻辑运算、数据存储和检索等核心功能。因此，CPU 可以被认为是计算机的” 大脑 “，它的性能直接影响计算机的整体运行速度和效率。</p>
<h2 id="cpu-的组成单元"><a class="markdownIt-Anchor" href="#cpu-的组成单元"></a> CPU 的组成单元</h2>
<ul>
<li>
<p><strong>算术逻辑单元</strong></p>
<p>算术逻辑单元（ALU）是 CPU 中的一个重要组成部分，它主要负责执行算术运算和逻辑运算，如加、减、乘、除、与、或、非等。ALU 的运算结果将被存储在寄存器中，供其他单元继续使用。</p>
</li>
<li>
<p><strong>控制单元</strong></p>
<p>控制单元（CU）是 CPU 中的另一个重要组成部分，它主要负责协调和控制 CPU 各个单元之间的工作。CU 从内存中读取指令，并解析指令，然后根据指令的要求控制其他单元的操作。CU 还可以将运算结果写回内存或输出到外设。</p>
</li>
</ul>
<p>通过 ALU 和 CU 的紧密配合，CPU 能够实现各种复杂的计算和操作，从而实现计算机的各种功能。</p>
<h2 id="cpu-指令集"><a class="markdownIt-Anchor" href="#cpu-指令集"></a> CPU 指令集</h2>
<p>CPU 的指令集根据设计理念的不同，可以分为精简指令集（RISC）和复杂指令集（CISC）两种类型：</p>
<ul>
<li>
<p><strong>精简指令集（RISC，Reduced Instruction Set Computing）</strong></p>
<p>精简指令集的微指令集比较简单明了，每个指令的执行时间都很短，完成的操作比较单一，执行效率高。常见的 RISC CPU 包括 Sun 公司的 SPARC 系列（主要用于学术和银行等大型工作站）、IBM 公司的 Power Architecture（包括 PowerPC，例如索尼 PS 游戏机）和 ARM 系列（主要用于手机、网络设备等嵌入式系统）。</p>
</li>
<li>
<p><strong>复杂指令集（CISC，Complex Instruction Set Computer）</strong></p>
<p>复杂指令集的每个小指令可以执行一些较低阶的硬件操作，指令数目多而复杂，每条指令的长度不同，执行时间较长，但每个指令可以处理的工作较为丰富。常见的 CISC CPU 包括 AMD 和 Intel 的 x86、x64 架构处理器，其中 “x86” 是因为最早的 Intel 元组型号 8086 发展而来，架构从 8 位升级到 32 位，现在普遍使用的是 64 位 CPU，称为 x86_64 架构。</p>
</li>
</ul>
<p>不同的指令集在硬件设计和编程语言的选择上有所区别，选择适合自己需求的 CPU 和指令集对于系统的性能和稳定性有着重要的影响。</p>
<h2 id="微指令集"><a class="markdownIt-Anchor" href="#微指令集"></a> 微指令集</h2>
<p>除了硬件参数差异（比如二级缓存大小）外，不同 x86 架构的 CPU 还有微指令集的区别。例如，Intel 处理器具有独特的指令集，如用于虚拟化（Intel-VT）、视频硬解码（MMX，SSE）等，可以有效提高特定工作的运行效率。</p>
<p>选择适合自己需求的 CPU 和指令集对于系统的性能和稳定性都有着重要的影响。特定的微指令集能够支持特定的操作，例如 SSE 指令集可以提高多媒体应用程序的性能，因此在开发需要高性能计算的应用程序时需要仔细选择微指令集。</p>
<h2 id="多核心"><a class="markdownIt-Anchor" href="#多核心"></a> 多核心</h2>
<p>多核心是指将两个或更多的运算核心嵌入到一颗 CPU 封装中。与单核 CPU 相比，多核 CPU 可以同时执行更多的指令，从而提高系统的运行效率。多核心处理器广泛应用于需要高性能计算的领域，如科学研究、金融分析、人工智能等。同时，多核心处理器也可以提高普通用户在运行多任务时的体验，例如同时打开多个应用程序或运行多个虚拟机。</p>
<h2 id="cpu-频率"><a class="markdownIt-Anchor" href="#cpu-频率"></a> CPU 频率</h2>
<p>CPU 频率是指 CPU 每秒钟所执行的时钟周期数，通常以赫兹（Hz）为单位。频率越高表示 CPU 单位时间内可以执行更多的指令和计算任务。例如，CPU 的频率为 4.0 GHz 表示这颗 CPU 在一秒内可以执行 4 × 10^9 次时钟周期。</p>
<p>但是，CPU 频率并不是衡量 CPU 性能的唯一指标，还需要考虑 CPU 架构、核心数量、缓存大小、指令集支持等因素。相同频率的 CPU 在性能上可能存在巨大差异。因此，在选择 CPU 时需要全面考虑性能、功耗和预算等因素。</p>
<h2 id="南桥和北桥"><a class="markdownIt-Anchor" href="#南桥和北桥"></a> 南桥和北桥</h2>
<p>南桥和北桥是主板芯片组中的两个核心部件，它们起到协调 CPU 和其他系统组件之间通信的作用。</p>
<ul>
<li>
<p><strong>北桥</strong></p>
<p>北桥是主板芯片组中的一部分，负责连接 CPU 和内存、显卡等高速设备，以及提供系统总线。早期，北桥还包含了内存控制器等重要的子系统，但随着技术的进步，现在内存控制器已经整合到了 CPU 封装中，因此北桥的功能逐渐减弱。</p>
</li>
<li>
<p><strong>南桥</strong></p>
<p>南桥则负责连接低速设备接口，如硬盘、USB、网卡等，提供输入输出总线。此外，南桥还包括了一些重要的子系统，如硬盘控制器、USB 控制器、声卡等。</p>
</li>
</ul>
<p>在现代 CPU 架构中，北桥的功能已经被整合到了 CPU 封装中，因此南北桥已经不再是主板设计的必要组成部分。但是，南北桥的功能仍然存在于芯片组中，并且是支持 CPU 和其他系统组件之间通信的关键组件之一。</p>
<h2 id="32-位与-64-位"><a class="markdownIt-Anchor" href="#32-位与-64-位"></a> 32 位与 64 位</h2>
<p>CPU 的字组大小，也被称为 word size，指的是 CPU 每次能够处理的数据量。32 位 CPU 的字组大小基于 CPU 解析的大小，即 4 个字节。而 64 位 CPU 能够一次性读写 8 个字节（64 位）的数据。</p>
<p>通常情况下，CPU 的字组大小会影响总线宽度和内存读写能力。由于 32 位 CPU 的字组大小为 4 个字节，其最大寻址能力为 2^32 个字节，相当于 4GB。因此，最多只能支持 4GB 内存大小。相比之下，64 位 CPU 的字组大小为 8 个字节，其最大寻址能力为 2^64 个字节，相当于 16EB。因此，64 位 CPU 能够支持更大的内存容量。</p>
<h2 id="外频与倍频"><a class="markdownIt-Anchor" href="#外频与倍频"></a> 外频与倍频</h2>
<p>在早期的 CPU 架构中，北桥用于连接 CPU、内存和显卡设备，因此每个设备都必须与北桥连接，并且具有相同的工作频率。为了解决这个问题，前端总线（FSB，Front Side Bus）应运而生。然而，由于 CPU 的运算速度远远超过其他设备，因此需要使用外频和倍频来满足 FSB 的频率要求。</p>
<p>外频指的是 CPU 与外部元件进行数据传输时的速度。而倍频是 CPU 内部用来加速工作性能的一个倍数。</p>
<p>CPU 的实际频率可以通过以下公式计算：CPU 频率 = 外频 x 倍频。通过调整外频和倍频的值，可以提高 CPU 的性能。</p>
<h2 id="超线程"><a class="markdownIt-Anchor" href="#超线程"></a> 超线程</h2>
<p>超线程（HT，Hyper-Threading）是一种在 CPU 内部将重要的寄存器（register）分为两组的技术，使得每组寄存器都可以供程序使用。因此，两个程序可以同时竞争 CPU 的运算单元，而不需要通过操作系统的多任务切换。</p>
<p>通过 HT 机制，操作系统可以使用实际核心的两倍数量，并且让每个核心逻辑上分离。在支持多核心运行的程序时，只要运算达不到 100% 的 CPU 使用率，超线程确实能帮助提升执行速度，更好地利用 CPU 性能。</p>
<p>在某些情况下，超线程可能会降低性能，例如在 CPU 达到 100% 使用率时，超线程可能会增加 CPU 的开销并导致性能下降。</p>
<h2 id="多级缓存"><a class="markdownIt-Anchor" href="#多级缓存"></a> 多级缓存</h2>
<p>一般 CPU 拥有二级 (L2 Cache) 或更多级缓存，由比 DRAM 速度更快的静态随机访问内存 (SRAM, Static Random Access Memory) 组成，用于存放一些常用的数据。这样，数据可以不通过内存读取，从而大幅提升性能。</p>
<h1 id="内存"><a class="markdownIt-Anchor" href="#内存"></a> 内存</h1>
<p>CPU 处理的数据来源于内存，而处理完毕的数据也要先写回内存，再从内存传输到输出单元。</p>
<p>内存的主要组件是动态随机访问内存 (DRAM, Dynamic Random Access Memory)，只有在通电时才能记录和使用。由于断电后数据会消失，因此也被称为挥发性内存。</p>
<h2 id="内存类型"><a class="markdownIt-Anchor" href="#内存类型"></a> 内存类型</h2>
<p>内存从 SDRAM 发展为 DDR（Double Data Rate），也就是所谓的双倍数据传输速度 SDRAM，它可以在一次工作周期中进行两次数据传输。</p>
<p>例如 DDR400 的内存，代表数据宽度为 64bit，外频为 200MHz，频率为 400MHz，频宽为 3.2GB/s。</p>
<h2 id="内存速度"><a class="markdownIt-Anchor" href="#内存速度"></a> 内存速度</h2>
<p>内存工作频率由 CPU 内的内存控制器决定。例如，假如内存频率为 1600MHz，总线宽度为 64bit，理论最大传输速度为：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1600</mn><mi>M</mi><mi>H</mi><mi>z</mi><mo>∗</mo><mn>64</mn><mi>b</mi><mi>i</mi><mi>t</mi><mo>=</mo><mn>1600</mn><mi>M</mi><mi>H</mi><mi>z</mi><mo>∗</mo><mn>8</mn><mi>B</mi><mi>y</mi><mi>t</mi><mi>e</mi><mi>s</mi><mo>=</mo><mn>12800</mn><mi>M</mi><mi>B</mi><mi mathvariant="normal">/</mi><mi>s</mi><mo>=</mo><mn>12.8</mn><mi>G</mi><mi>B</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">1600MHz * 64bit = 1600MHz * 8Bytes = 12800MB/s = 12.8GB/s
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">4</span><span class="mord mathnormal">b</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">8</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">8</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">/</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">.</span><span class="mord">8</span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">/</span><span class="mord mathnormal">s</span></span></span></span></span></p>
<h2 id="多通道设计"><a class="markdownIt-Anchor" href="#多通道设计"></a> 多通道设计</h2>
<p>当两条同样的内存插入支持内存双通道的主板中时，总线宽度由 64bit 升级到 128bit，传输速度翻倍。这是双通道内存的设计理念。</p>
<p>除了双通道外，服务器提供三信道甚至四信道的内存环境。</p>
<h2 id="物理地址扩展"><a class="markdownIt-Anchor" href="#物理地址扩展"></a> 物理地址扩展</h2>
<p>物理地址扩展（PAE）是基于 x86 服务器的一种功能，它使运行 Windows Server 版本的计算机可以支持 4GB 以上物理内存。物理地址扩展允许将最多 64GB 的物理内存用作常规的 4 KB 页面，并扩展内核能使用的位数以将物理内存地址从 32 位扩展到 36 位。</p>
<h1 id="主板"><a class="markdownIt-Anchor" href="#主板"></a> 主板</h1>
<p>主板（Mainboard）是一种电脑硬件，由芯片组构成，用于沟通和连接各种设备，为 CPU 提供支持和资源。</p>
<p>现代主板一般集成了许多设备元件，如声卡、网卡、显卡、磁盘整合卡等。</p>
<h2 id="cmos-芯片"><a class="markdownIt-Anchor" href="#cmos-芯片"></a> CMOS 芯片</h2>
<p>CMOS 芯片是一种低功耗的、非易失性的芯片，它用于记录主板的重要参数，例如系统时间、CPU 频率、设备 I/O 地址和 IRQ 等信息。由于这些参数需要在断电后仍能保持，CMOS 芯片需要额外的电子供电来保存这些设置。</p>
<h2 id="bios"><a class="markdownIt-Anchor" href="#bios"></a> BIOS</h2>
<p>BIOS (Basic Input Output System) 是一种固化在主板上的程序，用于初始化和测试硬件设备，加载操作系统，并提供各种底层服务和功能。BIOS 存储在闪存（Flash Memory）或 EEPROM 中，可以在开机时被执行。主要用途是加载和修改 CMOS（Complementary Metal-Oxide Semiconductor）中的参数，例如系统时间、CPU 频率、设备 I/O 地址和 IRQ 等。同时，BIOS 也尝试调用存储设备中的开机程序，以启动操作系统。</p>
<p>通常在开机时按下 [del] 键或 [F1] 键可以进入 BIOS 设置界面，进行各种参数设置和硬件配置。</p>
<h2 id="uefi"><a class="markdownIt-Anchor" href="#uefi"></a> UEFI</h2>
<p>UEFI (Unified Extensible Firmware Interface) 是新一代的固件接口标准，相比于传统的 BIOS 更加先进。UEFI 可以使用一个特制的 shell 来做一些管理工作。</p>
<h2 id="固件"><a class="markdownIt-Anchor" href="#固件"></a> 固件</h2>
<p>固件 (firmware) 是绑定在硬件上的控制软件，例如磁盘阵列卡、网卡等。通常储存在只读存储器 (Read Only Memory, ROM) 中，以保证固件的安全性。</p>
<h2 id="pci-插槽"><a class="markdownIt-Anchor" href="#pci-插槽"></a> PCI 插槽</h2>
<p>主板上的扩展插槽主要有 PCI 和 PCI-E 两种类型，它们的速度和频宽如下：</p>
<table>
<thead>
<tr>
<th>规格</th>
<th>宽度 (bit)</th>
<th>速度 (MHz)</th>
<th>频宽</th>
</tr>
</thead>
<tbody>
<tr>
<td>PCI</td>
<td>32</td>
<td>33</td>
<td>133MB/s</td>
</tr>
<tr>
<td>PCI 2.2</td>
<td>64</td>
<td>66</td>
<td>533MB/s</td>
</tr>
<tr>
<td>PCI-X</td>
<td>64</td>
<td>133</td>
<td>1064MB/s</td>
</tr>
<tr>
<td>AGP 4x</td>
<td>32</td>
<td>66x4</td>
<td>1066MB/s</td>
</tr>
<tr>
<td>AGP 8x</td>
<td>32</td>
<td>66x8</td>
<td>2133MB/s</td>
</tr>
<tr>
<td>PCI-E x1</td>
<td></td>
<td></td>
<td>250MB/s</td>
</tr>
<tr>
<td>PCI-E x8</td>
<td></td>
<td></td>
<td>2GB/s</td>
</tr>
<tr>
<td>PCI-E 2.0 x8</td>
<td></td>
<td></td>
<td>4GB/s</td>
</tr>
<tr>
<td>PCI-E 3.0 x8</td>
<td></td>
<td></td>
<td>8GB/s</td>
</tr>
<tr>
<td>PCI-E 4.0 x8</td>
<td></td>
<td></td>
<td>16GB/s</td>
</tr>
</tbody>
</table>
<p>一般来说，PCI-E 的规格由插槽的长度决定，PCI-E 插槽的工作模式可以参考主板的说明书。如果将一个速度为 x16 的设备插在一个速度为 x8 的 PCI-E 插槽上，该设备将以 x8 的速度运行。</p>
<p>例如，一个 CPU 通常支持 16 个信道（PCI-E 3.0 x16），如果主板上有三个 PCI-E 插槽，那么 PCI-E 插槽的速度可以工作在以下模式：1 x16，2 x8，1 x8 + 2 x4，具体取决于插入的设备数量。</p>
<h2 id="usb-接口"><a class="markdownIt-Anchor" href="#usb-接口"></a> USB 接口</h2>
<p>USB 接口一般用来连接 U 盘、移动硬盘盒、键盘、鼠标等设备。各版本的带宽与速度对比如下：</p>
<table>
<thead>
<tr>
<th>版本</th>
<th>带宽</th>
<th>速度 (MB/s)</th>
</tr>
</thead>
<tbody>
<tr>
<td>USB 1.0</td>
<td>12 Mbit/s</td>
<td>1.5</td>
</tr>
<tr>
<td>USB 2.0</td>
<td>480 Mbit/s</td>
<td>60</td>
</tr>
<tr>
<td>USB 3.0</td>
<td>5 Gbit/s</td>
<td>500</td>
</tr>
<tr>
<td>USB 3.1</td>
<td>10 Gbit/s</td>
<td>1000</td>
</tr>
</tbody>
</table>
<p>为了方便区分版本，主板给 USB 接口采用不同颜色进行显示：白色代表 USB 2.0，蓝色代表 USB 3.0，红色代表 USB 3.1。</p>
<h2 id="其他接口"><a class="markdownIt-Anchor" href="#其他接口"></a> 其他接口</h2>
<p>主板上常见的其他接口如下：</p>
<ul>
<li>
<p><strong>音频输入与输出</strong></p>
<p>一些 3.5mm 圆形插孔，一般用绿色表示耳机插孔，粉红色表示麦克风输入插孔。</p>
</li>
<li>
<p><strong>RJ-45 网络接口</strong></p>
<p>方形接口，用来插入网线。</p>
</li>
<li>
<p><strong>HDMI 接口</strong></p>
<p>HDMI 接口一般用于视频输出。如果主板上有板载显卡，一般会提供该接口。</p>
</li>
</ul>
<h2 id="设备-io-地址与-irq-中断信道"><a class="markdownIt-Anchor" href="#设备-io-地址与-irq-中断信道"></a> 设备 I/O 地址与 IRQ 中断信道</h2>
<p>主板芯片组通过 I/O 地址和 IRQ 中断信道来控制设备。</p>
<ul>
<li>
<p><strong>I/O 地址</strong></p>
<p>I/O 地址用来标识对应的设备，如果两个设备使用相同的 I/O 地址会造成地址冲突，导致设备无法正常工作。</p>
</li>
<li>
<p><strong>IRQ 中断信道</strong></p>
<p>IRQ 用来标识设备工作状态，以方便 CPU 分配工作任务。每个设备都有自己的 IRQ 中断信道，当设备需要 CPU 处理时，会通过 IRQ 向 CPU 发出中断请求。CPU 会停止当前的任务，处理中断请求，并在完成处理后返回原先的任务。</p>
</li>
</ul>
<h1 id="显卡"><a class="markdownIt-Anchor" href="#显卡"></a> 显卡</h1>
<p>显卡是计算机中的一种重要的组件，主要负责图像和影像的显示，也被称为视频显卡（Video Card）或图形加速卡（Graphics Card）。</p>
<h2 id="显存"><a class="markdownIt-Anchor" href="#显存"></a> 显存</h2>
<p>由于每个图像需要占用内存空间来存储颜色信息，因此显卡上有一个专门用于存储图像信息的内存，称为显存。</p>
<h2 id="gpu"><a class="markdownIt-Anchor" href="#gpu"></a> GPU</h2>
<p>除了负责图像显示，显卡上还有一个专门用于进行 3D 运算的加速芯片，称为 GPU。</p>
<h2 id="显卡插槽"><a class="markdownIt-Anchor" href="#显卡插槽"></a> 显卡插槽</h2>
<p>由于显卡需要大量的数据传输，因此使用能提供高带宽的 PCI-E 插槽。</p>
<h2 id="显卡接口"><a class="markdownIt-Anchor" href="#显卡接口"></a> 显卡接口</h2>
<p>常见显卡上用来连接显示器的接口如下:</p>
<ul>
<li>
<p><strong>D-Sub(VGA)</strong></p>
<p>是较早之前的连接接口，主要为 15 针的连接，用于模拟信号传输。</p>
</li>
<li>
<p><strong>DVI</strong></p>
<p>有提供数字传输的 DVI-D 和整合数字和模拟传输的 DVI-I 两种类型。</p>
</li>
<li>
<p><strong>HDMI</strong></p>
<p>可以同时传输图像和声音。</p>
</li>
<li>
<p><strong>DP(DisplayPort)</strong></p>
<p>类似于 HDMI。</p>
</li>
</ul>
<h1 id="硬盘"><a class="markdownIt-Anchor" href="#硬盘"></a> 硬盘</h1>
<p>硬盘是计算机中用于存储数据的设备，一般分为机械硬盘和固态硬盘。</p>
<h2 id="机械硬盘的组成"><a class="markdownIt-Anchor" href="#机械硬盘的组成"></a> 机械硬盘的组成</h2>
<p>传统机械硬盘（HDD，Hard Disk Drive）的物理结构如下：</p>
<ul>
<li>
<p><strong>盘片</strong></p>
<p>数据记录介质，可以有一个或多个盘片。</p>
</li>
<li>
<p><strong>主轴电机</strong></p>
<p>带动盘片旋转，转速越高，读写速度越快。常见的转速有 7200 rpm（转 / 分钟）和 5400 rpm。</p>
</li>
<li>
<p><strong>读写磁头</strong></p>
<p>读取和写入数据，每个盘片面都有一个磁头。</p>
</li>
<li>
<p><strong>机械臂</strong></p>
<p>控制磁头的位置，使其能够读取或写入指定的盘片面。</p>
</li>
</ul>
<p>此外，硬盘电路板上还有一个小容量的闪存用作缓冲内存，用于临时提高硬盘性能。</p>
<p>机械硬盘非常脆弱，因此在通电状态下绝对不要发生碰撞或直接拔插电源线。否则可能会导致逻辑坏道（文件系统损坏）或物理坏道。</p>
<h2 id="机械硬盘盘片"><a class="markdownIt-Anchor" href="#机械硬盘盘片"></a> 机械硬盘盘片</h2>
<p>机械硬盘盘片的表面结构如下：</p>
<ul>
<li>
<p><strong>扇区（sector）</strong></p>
<p>盘片同心圆上切出的小块区域，是硬盘的最小物理存储单元。传统硬盘的扇区容量为 512 字节，而现代硬盘则采用了 4KB 扇区设计。</p>
</li>
<li>
<p><strong>磁道（track）</strong></p>
<p>盘片同心圆上的一个圆环，由一系列相同半径的扇区组成。</p>
</li>
<li>
<p><strong>柱面（cylinder）</strong></p>
<p>所有盘片同心圆上的同一磁道就构成一个柱面。</p>
</li>
</ul>
<p>由于同心圆外圈的扇区比内圈的扇区多，因此硬盘的数据读写是从外向内进行的。</p>
<p>传统机械硬盘的容量计算公式为：磁头数 * 柱面 * 扇区数 * 512Bytes</p>
<h2 id="硬盘传输接口"><a class="markdownIt-Anchor" href="#硬盘传输接口"></a> 硬盘传输接口</h2>
<p>硬盘与主板连接接口经过多次改版，目前主流的有 SATA 和 SAS 接口。</p>
<ul>
<li>
<p><strong>IDE 接口</strong></p>
<p>使用的平行线可以连接两个设备，因此有主 / 从 (Master/Slave) 构架，可以通过跳针设置。</p>
<p>接口传输速度为 Ultra 133 规格，理论速度最高 133MB/s。</p>
</li>
<li>
<p><strong>SATA 接口</strong></p>
<p>在家用机上 IDE 接口的替代接口。SATA 的平行线将数据传输和供电分开。一条平行线对应一个设备，没有跳针设计。</p>
<p>目前主流使用的 SATA 3.0 版本传输速度为 600MB/s。</p>
</li>
<li>
<p><strong>SCSI 接口</strong></p>
<p>在以前服务器硬盘常用接口。硬盘在控制器上含有一块处理器，用来支持一些高级功能。</p>
</li>
<li>
<p><strong>SAS 接口</strong></p>
<p>SAS（Serial Attached SCSI）是串行式 SCSI 的意思，目前已在服务器领域全面取代了 SCSI。</p>
<p>SAS 3.0 的传输速度能达到 1200MB/s。</p>
</li>
</ul>
<h2 id="固态硬盘"><a class="markdownIt-Anchor" href="#固态硬盘"></a> 固态硬盘</h2>
<p>固态硬盘 (SSD, Solid State Disk) 以 NAND 闪存作为储存介质，因此不存在机械硬盘的磁头、盘片等结构，也没有数据分散的问题，读写速度和延迟时间比机械硬盘更优秀。</p>
<p>固态硬盘的寿命和速度取决于使用的内存颗粒类型，常见的类型从好到差分别为 SLC、MLC、TLC、QLC。</p>
<p>一般而言，电脑使用固态硬盘作为系统盘，数据储存在机械硬盘上，可以有效提升整个系统性能。</p>
<h1 id="电源"><a class="markdownIt-Anchor" href="#电源"></a> 电源</h1>
<p>电源供应器（Power Supply Unit，PSU）用于给主板、CPU、显卡和硬盘等硬件供电。选择质量好的电源可以有效降低硬件意外损坏的概率。</p>
<p>如果使用诸如 AIDA 等软件对未超频的电脑进行测试时，在测试过程中出现中途断电或重启等情况，说明电源的额定功率不够或者不稳定。需要减少设备连接或者更换更高功率的电源。</p>
<p>在选购电源时，除了考虑电源的额定功率之外，还需要考虑能源转换率，也就是 $ 输入功率 / 输出功率 $ 的值。转换率值越大越好。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
</search>
