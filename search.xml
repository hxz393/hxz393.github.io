<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>06.Linux 启动流程</title>
    <url>/3373647732/</url>
    <content><![CDATA[<h1 id="bios-启动流程"><a class="markdownIt-Anchor" href="#bios-启动流程"></a> BIOS 启动流程</h1>
<p>目前，主机系统在载入硬件驱动方面的程序有两种：使用 BIOS 和 UEFI。简单的开机流程分为以下步骤：</p>
<ol>
<li>载入 BIOS 或 UEFI 的硬件信息与自测（POST，Power-On Self-Test），并根据设置取得第一个可开机的设备；</li>
<li>对于 BIOS，通过硬件的 INT 13 中断功能，读取并执行第一个可开机设备内 MBR 的引导加载程序（Boot Loader）；对于 UEFI，读取并执行第一个可开机设备内 EFI 分区的引导加载程序；</li>
<li>依据引导加载程序的设置，识别文件系统格式，加载核心文件。由内核开始检测硬件与驱动；</li>
<li>启动初始进程管理程序（systemd 或 System V），最终目的都是启动基础服务和用户设置的开机启动程序。</li>
</ol>
<p>在使用 BIOS 时，通常搭配 MBR（Master Boot Record）分区表。而在使用 UEFI 时，通常搭配 GPT（GUID Partition Table）分区表。GPT 格式启动过程与 MBR 类似，差异在于开机管理程序是否支持 GPT。</p>
<p>在引导加载程序读取到内核文件后，Linux 会将内核解压到内存中，由内核开始测试与驱动硬件。</p>
<p>此时 Linux 内核会以自己检测结果为准，而不理会 BIOS 的硬件检测结果。也就是说内核此时开始接管 BIOS 后的工作了。</p>
<h1 id="多系统引导"><a class="markdownIt-Anchor" href="#多系统引导"></a> 多系统引导</h1>
<p>引导加载程序除了可以安装在 MBR 外，还可以安装到每个文件系统的引导扇区（Boot Sector）。</p>
<p>例如，硬盘第一和第二分区分别安装了 Windows 和 Linux。开机装载第一个分区引导加载程序，此时会出现分支选项：</p>
<ul>
<li>选择启动 Windows 直接加载第一个分区中的 Windows 核心文件。</li>
<li>选择启动 Linux 则转到第二个分区的引导扇区，由第二个分区的引导加载程序完成 Linux 系统启动工作。</li>
</ul>
<p>如果要安装多重开机，一般先安装 Windows 再安装 Linux，因为 Windows 安装时会直接覆盖掉 MBR 以及自己所在分区的引导扇区，并且 Windows 的引导程序默认没有转移引导功能。而 Linux 安装时可以选择引导加载程序不安装到 MBR，只装在指定分区的引导扇区。之后修改引导程序加入 Windows 开机选项，完成双系统引导功能。</p>
<h1 id="引导目录说明"><a class="markdownIt-Anchor" href="#引导目录说明"></a> 引导目录说明</h1>
<p>如果使用 grub 引导，需给 <code>/boot</code> 分区来放置开机过程所需的文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span><span class="token comment"># ll /boot</span>
total <span class="token number">149232</span>
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">153596</span> Aug <span class="token number">31</span> <span class="token number">10</span>:57 config-3.10.0-1160.41.1.el7.x86_64
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">147819</span> Apr <span class="token number">20</span>  <span class="token number">2018</span> config-3.10.0-862.el7.x86_64
drwxr-xr-x. <span class="token number">3</span> root root       <span class="token number">17</span> Sep  <span class="token number">7</span> <span class="token number">13</span>:34 efi
drwxr-xr-x. <span class="token number">2</span> root root       <span class="token number">27</span> Sep  <span class="token number">7</span> <span class="token number">13</span>:35 grub
drwx------. <span class="token number">5</span> root root      <span class="token number">132</span> Sep  <span class="token number">7</span> 05:55 grub2
-rw-------. <span class="token number">1</span> root root <span class="token number">55385253</span> Sep  <span class="token number">7</span> <span class="token number">13</span>:37 initramfs-0-rescue-77a36143eb014dd5a0d6e738b1d84778.img
-rw-------. <span class="token number">1</span> root root <span class="token number">21322754</span> Sep  <span class="token number">7</span> 05:55 initramfs-3.10.0-1160.41.1.el7.x86_64.img
-rw-------. <span class="token number">1</span> root root <span class="token number">13851614</span> Sep <span class="token number">18</span> <span class="token number">23</span>:13 initramfs-3.10.0-1160.41.1.el7.x86_64kdump.img
-rw-------. <span class="token number">1</span> root root <span class="token number">21288233</span> Sep  <span class="token number">7</span> 05:56 initramfs-3.10.0-862.el7.x86_64.img
-rw-------. <span class="token number">1</span> root root <span class="token number">13761710</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:00 initramfs-3.10.0-862.el7.x86_64kdump.img
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">320757</span> Aug <span class="token number">31</span> <span class="token number">10</span>:57 symvers-3.10.0-1160.41.1.el7.x86_64.gz
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">304926</span> Apr <span class="token number">20</span>  <span class="token number">2018</span> symvers-3.10.0-862.el7.x86_64.gz
-rw-------. <span class="token number">1</span> root root  <span class="token number">3620596</span> Aug <span class="token number">31</span> <span class="token number">10</span>:57 System.map-3.10.0-1160.41.1.el7.x86_64
-rw-------. <span class="token number">1</span> root root  <span class="token number">3409143</span> Apr <span class="token number">20</span>  <span class="token number">2018</span> System.map-3.10.0-862.el7.x86_64
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">6224704</span> Sep  <span class="token number">7</span> <span class="token number">13</span>:37 vmlinuz-0-rescue-77a36143eb014dd5a0d6e738b1d84778
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">6773352</span> Aug <span class="token number">31</span> <span class="token number">10</span>:57 vmlinuz-3.10.0-1160.41.1.el7.x86_64
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">6224704</span> Apr <span class="token number">20</span>  <span class="token number">2018</span> vmlinuz-3.10.0-862.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>/boot</code> 内文件与目录说明如下所示：</p>
<table>
<thead>
<tr>
<th>文件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>config-*</td>
<td>此版本内核被编译时选择的功能与模块配置文件</td>
</tr>
<tr>
<td>grub、grub2</td>
<td>开机管理程序 grub 相关数据目录</td>
</tr>
<tr>
<td>initramfs-0-rescue-*</td>
<td>救援模式的虚拟文件系统</td>
</tr>
<tr>
<td>initramfs-*.img</td>
<td>正常模式的虚拟文件系统</td>
</tr>
<tr>
<td>initramfs-*kdump.img</td>
<td>内核出问题时用到的虚拟文件系统</td>
</tr>
<tr>
<td>System.map-*</td>
<td>内核功能放置到内存位址的对应表</td>
</tr>
<tr>
<td>vmlinuz-0-rescue-*</td>
<td>救援模式的内核文件</td>
</tr>
<tr>
<td>vmlinuz-*</td>
<td>正常模式的内核文件</td>
</tr>
</tbody>
</table>
<h1 id="虚拟文件系统"><a class="markdownIt-Anchor" href="#虚拟文件系统"></a> 虚拟文件系统</h1>
<p>Linux 内核可以动态载入内核模块（驱动），这些内核模块放置在 <code>/lib/modules/</code> 目录内。由于模块放置到根目录内，因此开机过程中内核必须要以只读方式挂载根目录，才可以读取到驱动程序。</p>
<p>但是在挂载根目录时，很大可能 Linux 内核并不认识 SATA 设备。为了让内核顺利执行下去，引用了一个虚拟文件系统（Initial RAM Disk 或 Initial RAM Filesystem）来处理，就是在 <code>/boot</code> 目录内以 initramfs 开头命名的 img 文件。</p>
<p>虚拟文件系统的 img 文件也能被引导加载程序载入到内存中，解压后在内存中仿真成一个根目录。内核会读取虚拟文件系统内的驱动，通常是与磁盘接口和文件系统格式支持有关的驱动程序。</p>
<p>等驱动载入完毕，根目录所在分区信息被正确识别后，此虚拟文件系统被卸载，并挂载实际的根目录文件系统，继续后续开机流程。</p>
<p>可以用 <code>lsinitrd</code> 命令查看 initramfs 镜像的内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span><span class="token comment"># lsinitrd /boot/initramfs-3.10.0-1160.41.1.el7.x86_64.img </span>
Image: /boot/initramfs-3.10.0-1160.41.1.el7.x86_64.img: 21M
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
Early CPIO image
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
drwxr-xr-x   <span class="token number">3</span> root     root            <span class="token number">0</span> Sep  <span class="token number">7</span> 05:55 <span class="token builtin class-name">.</span>
-rw-r--r--   <span class="token number">1</span> root     root            <span class="token number">2</span> Sep  <span class="token number">7</span> 05:55 early_cpio
drwxr-xr-x   <span class="token number">3</span> root     root            <span class="token number">0</span> Sep  <span class="token number">7</span> 05:55 kernel
drwxr-xr-x   <span class="token number">3</span> root     root            <span class="token number">0</span> Sep  <span class="token number">7</span> 05:55 kernel/x86
drwxr-xr-x   <span class="token number">2</span> root     root            <span class="token number">0</span> Sep  <span class="token number">7</span> 05:55 kernel/x86/microcode
-rw-r--r--   <span class="token number">1</span> root     root         <span class="token number">6476</span> Sep  <span class="token number">7</span> 05:55 kernel/x86/microcode/AuthenticAMD.bin
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
Version: dracut-033-572.el7

Arguments: <span class="token parameter variable">-f</span>

dracut modules:
<span class="token function">bash</span>
nss-softokn
i18n
microcode_ctl-fw_dir_override
<span class="token function">shutdown</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
drwxr-xr-x  <span class="token number">12</span> root     root            <span class="token number">0</span> Sep  <span class="token number">7</span> 05:55 <span class="token builtin class-name">.</span>
crw-r--r--   <span class="token number">1</span> root     root       <span class="token number">5</span>,   <span class="token number">1</span> Sep  <span class="token number">7</span> 05:55 dev/console
crw-r--r--   <span class="token number">1</span> root     root       <span class="token number">1</span>,  <span class="token number">11</span> Sep  <span class="token number">7</span> 05:55 dev/kmsg
crw-r--r--   <span class="token number">1</span> root     root       <span class="token number">1</span>,   <span class="token number">3</span> Sep  <span class="token number">7</span> 05:55 dev/null
lrwxrwxrwx   <span class="token number">1</span> root     root            <span class="token number">7</span> Sep  <span class="token number">7</span> 05:55 bin -<span class="token operator">></span> usr/bin
drwxr-xr-x   <span class="token number">2</span> root     root            <span class="token number">0</span> Sep  <span class="token number">7</span> 05:55 dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，这个 img 文件可以分为两部分。前半部分包括一些预先声明的数据，其中包括一个可执行的 bin 文件；而后半部分才是内核会去读取的重要文件。</p>
<p>进一步解压整个 img 文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span><span class="token comment"># cp /boot/initramfs-3.10.0-1160.41.1.el7.x86_64.img init.img</span>
<span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span><span class="token comment"># file init.img </span>
init.img: ASCII cpio archive <span class="token punctuation">(</span>SVR4 with no CRC<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span><span class="token comment"># /usr/lib/dracut/skipcpio init.img | zcat | cpio -div</span>
init
<span class="token function">shutdown</span>
<span class="token number">88189</span> blocks
<span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span><span class="token comment"># ll</span>
total <span class="token number">8</span>
lrwxrwxrwx.  <span class="token number">1</span> root root    <span class="token number">7</span> Sep <span class="token number">19</span> 09:10 bin -<span class="token operator">></span> usr/bin
drwxr-xr-x.  <span class="token number">2</span> root root   <span class="token number">45</span> Sep <span class="token number">19</span> 09:10 dev
drwxr-xr-x. <span class="token number">12</span> root root <span class="token number">4096</span> Sep <span class="token number">19</span> 09:10 etc
lrwxrwxrwx.  <span class="token number">1</span> root root   <span class="token number">23</span> Sep <span class="token number">19</span> 09:10 init -<span class="token operator">></span> usr/lib/systemd/systemd
lrwxrwxrwx.  <span class="token number">1</span> root root    <span class="token number">7</span> Sep <span class="token number">19</span> 09:10 lib -<span class="token operator">></span> usr/lib
lrwxrwxrwx.  <span class="token number">1</span> root root    <span class="token number">9</span> Sep <span class="token number">19</span> 09:10 lib64 -<span class="token operator">></span> usr/lib64
drwxr-xr-x.  <span class="token number">2</span> root root    <span class="token number">6</span> Sep <span class="token number">19</span> 09:10 proc
drwxr-xr-x.  <span class="token number">2</span> root root    <span class="token number">6</span> Sep <span class="token number">19</span> 09:10 root
drwxr-xr-x.  <span class="token number">2</span> root root    <span class="token number">6</span> Sep <span class="token number">19</span> 09:10 run
lrwxrwxrwx.  <span class="token number">1</span> root root    <span class="token number">8</span> Sep <span class="token number">19</span> 09:10 sbin -<span class="token operator">></span> usr/sbin
-rwxr-xr-x.  <span class="token number">1</span> root root <span class="token number">3117</span> Sep <span class="token number">19</span> 09:10 <span class="token function">shutdown</span>
drwxr-xr-x.  <span class="token number">2</span> root root    <span class="token number">6</span> Sep <span class="token number">19</span> 09:10 sys
drwxr-xr-x.  <span class="token number">2</span> root root    <span class="token number">6</span> Sep <span class="token number">19</span> 09:10 sysroot
drwxr-xr-x.  <span class="token number">2</span> root root    <span class="token number">6</span> Sep <span class="token number">19</span> 09:10 tmp
drwxr-xr-x.  <span class="token number">7</span> root root   <span class="token number">66</span> Sep <span class="token number">19</span> 09:10 usr
drwxr-xr-x.  <span class="token number">2</span> root root   <span class="token number">29</span> Sep <span class="token number">19</span> 09:10 var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解压后查询下这个文件系统中 systemd 调用的运行模式：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span><span class="token comment"># ll usr/lib/systemd/system/default.target</span>
lrwxrwxrwx. <span class="token number">1</span> root root <span class="token number">13</span> Sep <span class="token number">19</span> 09:10 usr/lib/systemd/system/default.target -<span class="token operator">></span> initrd.target
<span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span><span class="token comment"># systemctl list-dependencies initrd.target</span>
initrd.target
● ├─dracut-cmdline.service
● ├─dracut-initqueue.service
● ├─dracut-mount.service
● ├─dracut-pre-mount.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过查询 initrd.target 可以知道内核先是用载入虚拟文件系统中的 basic.target、sysinit.target 等功能启用的流程，让系统顺利运行，再卸载虚拟文件系统，挂载实际系统根目录。</p>
<p>如果想要创建一个自定义的 initramfs 镜像，可以使用 dracut 或 mkinitrd 来处理。例如，新建一个添加了 x200 网卡驱动和 nfs 文件系统驱动的 initramfs 镜像：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span><span class="token comment"># dracut -v -add-drivers "x200" --filesystems "nfs" > initramfs-new.img &amp; (uname -r)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="systemd-启动流程"><a class="markdownIt-Anchor" href="#systemd-启动流程"></a> Systemd 启动流程</h1>
<p>Systemd 是一种系统和服务管理器，是 Linux 系统中的一项关键技术。它可以用于启动、停止和管理系统进程、网络、文件系统和其他系统资源。Systemd 最初是为 Red Hat Linux 发行版设计的，但现在已被广泛采用，并被大多数 Linux 发行版所使用。</p>
<p>Systemd 的主要优势是速度和可靠性。它的启动速度远远快于传统的 init 系统，因为它能够并行启动多个服务。此外，Systemd 还提供了强大的日志功能和灵活的单元文件格式，可用于管理各种类型的服务和资源。</p>
<p>Systemd 还引入了一些新的概念，例如单元和片段。单元是 Systemd 中的基本单位，用于描述系统资源（例如服务、套接字、挂载点等）。片段是一种单元文件的组成部分，它可以被其他单元文件重用。这种灵活性使得 Systemd 能够更容易地管理和组织系统资源，使其更加模块化和可重用。</p>
<h2 id="启动流程"><a class="markdownIt-Anchor" href="#启动流程"></a> 启动流程</h2>
<p>在内核载入完毕硬件驱动后，采用 systemd 管理服务的启动流程如下：</p>
<ol>
<li>内核会主动调用第一个程序 <code>systemd</code> 执行 sysinit.target 初始化系统及 basic.target 准备系统；</li>
<li>接下来到<code>/usr/lib/systemd/system/</code>目录下去调用 multi-user.target(default.target)；</li>
<li>然后系统会到<code>/etc/systemd/system/multi-user.target.wants/</code>目录去找用户设置开机启动服务(unit)；</li>
<li>最后到<code>/usr/lib/systemd/system/multi-user.target.wants/</code>目录去找系统默认的开机启动服务(unit)；</li>
<li>（非必须）执行 graphical 需要的服务。</li>
</ol>
<p>至于最终启动的服务有哪些，可以用<code>systemctl list-dependencies</code>命令查询：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span><span class="token comment"># systemctl list-dependencies multi-user.target | grep target</span>
multi-user.target
● ├─basic.target
● │ ├─selinux-policy-migrate-local-changes@targeted.service
● │ ├─paths.target
● │ ├─slices.target
● │ ├─sockets.target
● │ ├─sysinit.target
● │ │ ├─cryptsetup.target
● │ │ ├─local-fs.target
● │ │ └─swap.target
● │ └─timers.target
● ├─getty.target
● └─remote-fs.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另外，为了兼容旧有的通过 <code>/etc/rc.d/rc.local</code> 配置自启动脚本的方式，CentOS 7 保留了一个 rc-local.service 来执行这些脚本。</p>
<h2 id="启动相关目录"><a class="markdownIt-Anchor" href="#启动相关目录"></a> 启动相关目录</h2>
<p>开机会读取的文件目录如下：</p>
<ul>
<li><strong>/etc/modules-load.d/*.conf</strong>：配置内核需要加载的模块。</li>
<li><strong>/etc/modprobe.d/*.conf</strong>：可以设置模块参数的配置。</li>
<li><strong>/etc/sysconfig/</strong>：系统配置目录下有许多环境配置文件，其中一些重要的是：
<ul>
<li><strong>authconfig</strong>：用于规范用户身份认证机制，包括是否使用本地 <code>/etc/passwd</code>，<code>/etc/shadow</code> 等文件以及密码记录使用的加密算法，是否使用外部密码服务器提供的账号验证（NIS、LDAP）等。</li>
<li><strong>cpupower</strong>：如果启动了 cpupower.service 服务，会读取此配置文件。</li>
<li><strong>firewalld、iptables-config、iptables-config、ebtables-config</strong>：与防火墙服务相关的配置。</li>
<li><strong>network-scripts</strong>：网卡设置。</li>
</ul>
</li>
</ul>
<h1 id="system-v-启动流程"><a class="markdownIt-Anchor" href="#system-v-启动流程"></a> System V 启动流程</h1>
<p>System V (System 5) 是 Unix 操作系统中的一个初始化系统。它是早期 Unix 系统的标准初始化系统，常见于许多 Linux 发行版中。System V 通过运行一个脚本，逐个启动和停止系统服务来初始化系统。这些脚本通常存储在 <code>/etc/rc.d/init.d/</code> 目录下，每个脚本对应着一个系统服务。在系统启动或关闭时，System V 会根据 <code>/etc/inittab</code> 文件的配置来执行这些脚本。</p>
<p>System V 的缺点在于启动过程比较慢，因为它需要逐个启动和停止每个系统服务，这使得启动时间较长。此外，System V 在处理系统服务时需要手动编写脚本，并且难以处理服务之间的依赖关系，这可能导致系统启动失败或服务无法正常运行。由于这些缺点，现代 Linux 发行版逐渐转向使用 Systemd 作为默认初始化系统。</p>
<h2 id="启动流程-2"><a class="markdownIt-Anchor" href="#启动流程-2"></a> 启动流程</h2>
<p>在内核加载完硬件驱动后，内核会主动调用第一个进程 <code>/sbin/init</code>。它最主要的功能是准备软件执行环境：</p>
<ol>
<li>init 取得默认执行等级，执行 <code>/etc/rc.d/rc.sysinit</code> 文件来准备软件执行的操作环境（网络、时区等）；</li>
<li>init 执行 run level 的各个服务的启动（脚本方式）。例如执行等级是 5，则只执行 <code>5:5:wait:/etc/rc.d/rc5</code> 这行：
<ul>
<li>和 rc5 相关的脚本存放在 <code>/etc/rc5.d/</code> 下面，以 Kxx 开头的文件代表执行 stop，以 Sxx 开头代表执行 start 操作。</li>
<li>这些脚本全部是连接文件，连接到 stand alone 服务启动的目录 <code>/etc/init.d/</code>内。</li>
<li>S 或 K 后面两位数字代表执行顺序，数字越小执行越早。</li>
</ul>
</li>
<li>设置好组合键功能和不断电系统 pf、pr 机制。</li>
<li>init 用户自定义脚本 <code>/etc/rc.d/rc.local</code> 配置文件内的程序；</li>
<li>init 执行终端模拟程序 mingetty 来启动 login 进程。</li>
<li>（非必须）以 <code>/etc/X11/perfdm -nodaemon</code> 启动图形界面。</li>
</ol>
<h2 id="启动相关目录-2"><a class="markdownIt-Anchor" href="#启动相关目录-2"></a> 启动相关目录</h2>
<p>开机用到的配置文件：</p>
<ul>
<li>
<p><strong>/etc/modprobe.conf</strong></p>
<p>定义开机要加载的模块，模块存放于 <code>/etc/sysconfig/modules/</code> 目录下。</p>
</li>
<li>
<p><strong>/etc/sysconfig/</strong>*</p>
<p>服务相关配置，重要的有：</p>
<ul>
<li><strong>authconfig</strong>：设置用户身份认证机制。</li>
<li><strong>clock</strong>：设置 Linux 主机的时区。</li>
<li><strong>i18n</strong>：设置语系。</li>
<li><strong>keyboard &amp; mouse</strong>：设置键盘与鼠标样式。</li>
<li><strong>network</strong>：设置网络启用、主机名和网关。</li>
<li><strong>network-scripts</strong>：设置网卡。</li>
</ul>
</li>
</ul>
<h2 id="init-配置文件"><a class="markdownIt-Anchor" href="#init-配置文件"></a> init 配置文件</h2>
<p>init 通过配置文件 <code>/etc/inittab</code> 规划行动。配置文件每行内容由冒号<code>:</code>分隔四个字段：</p>
<ul>
<li>
<p><strong>设置选项</strong></p>
<p>最多四个字符，代表 init 的主要工作选项，只是一个说明。</p>
</li>
<li>
<p><strong>执行等级</strong></p>
<p>代表该选项在哪些执行等级下面运行，如果是 35 表示在执行等级 3 和 5 都会运行。</p>
</li>
<li>
<p><strong>init 的操作行为</strong></p>
<p>可设置的值有：</p>
<ul>
<li><strong>initdefault</strong>：默认执行等级设置值。</li>
<li><strong>sysinit</strong>：系统初始化的操作选项。</li>
<li><strong>ctrlaltdel</strong>：代表组合快捷键[Ctrl]+[Alt]+[Del]是否可以重新启动的设置。</li>
<li><strong>wait</strong>：代表后面设置的命令必须要执行完毕才能继续下面其他操作。</li>
<li><strong>respawn</strong>：代表后面的命令可以无限重启，例如 tty1。</li>
</ul>
</li>
<li>
<p><strong>命令选项</strong></p>
<p>执行的命令，通常是一些脚本。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
  <entry>
    <title>05.磁盘分区知识</title>
    <url>/3200821655/</url>
    <content><![CDATA[<h1 id="磁盘设备名"><a class="markdownIt-Anchor" href="#磁盘设备名"></a> 磁盘设备名</h1>
<p>在新版 Linux 中，IDE 和 SATA 的磁盘命名没有区别。</p>
<h2 id="ide-接口硬盘"><a class="markdownIt-Anchor" href="#ide-接口硬盘"></a> IDE 接口硬盘</h2>
<p>由于一个 IDE 接口可以连接两个 IDE 设备，一般主板可以接 4 个 IDE 设备。在系统中，IDE 设备的命名如下：</p>
<table>
<thead>
<tr>
<th><strong>IDE(Jumper)</strong></th>
<th><strong>Master</strong></th>
<th><strong>Slave</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>IDE1(Primary)</td>
<td>/dev/hda</td>
<td>/dev/hdb</td>
</tr>
<tr>
<td>IDE2(Secondary)</td>
<td>/dev/hdc</td>
<td>/dev/hdd</td>
</tr>
</tbody>
</table>
<h2 id="sata-接口硬盘"><a class="markdownIt-Anchor" href="#sata-接口硬盘"></a> SATA 接口硬盘</h2>
<p>SATA 接口设备名由 Linux 内核检测到磁盘的顺序从 a 开始排列，与插槽号无关。例如，两块磁盘插到 SATA1 和 SATA5 插槽上，系统中识别为 sda 和 sdb。</p>
<h1 id="磁盘阵列"><a class="markdownIt-Anchor" href="#磁盘阵列"></a> 磁盘阵列</h1>
<p>磁盘阵列（RAID，Redundant Arrays of Inexpensive Disks）即容错廉价磁盘阵列，指通过一些技术（软件或硬件）将多个较小的磁盘整合成一个较大的磁盘设备，并且具有一定数据保护的功能。</p>
<h2 id="磁盘阵列等级"><a class="markdownIt-Anchor" href="#磁盘阵列等级"></a> 磁盘阵列等级</h2>
<p>常见磁盘阵列等级有：</p>
<ul>
<li>
<p><strong>RAID 0</strong>（等量模式，stripe）</p>
<p>此模式下，RAID 会将磁盘先切出等量的区块（名为 chunk，大小 4KB ~ 1MB），写入文件时，该文件依据块大小切割好，依序放到各个磁盘中去。</p>
<p>磁盘可用容量为所有磁盘容量之和。</p>
<p>读写性能最佳。</p>
<p>安全性最糟，任意一块磁盘损坏，所有文件数据将缺损，所有数据都会丢失。</p>
</li>
<li>
<p><strong>RAID 1</strong>（映像模式，mirror）</p>
<p>此模式让同一份数据完整保存在两块磁盘上面，写入文件时，该文件复制为两份，并分别写入到各个磁盘中去。</p>
<p>磁盘可用容量为所有磁盘容量之和的一半。</p>
<p>写性能在使用软阵列时不好，因为南桥芯片的 I/O 性能有限，同时写入会导致带宽不够。读取性能和 RAID 0 一样。</p>
<p>安全性最好。</p>
</li>
<li>
<p><strong>RAID 0+1</strong>，<strong>RAID 1+0</strong></p>
<p>所谓 RAID 0+1 就是先让两块磁盘组成 RAID 0，再将两组 RAID 0 组成一组 RAID 1。RAID 1+0 则是先组 RAID 0，再组成 RAID 1。</p>
<p>磁盘可用容量和 RAID 1 一样只有一半可用。</p>
<p>读写性能和 RAID 0 一样。</p>
<p>安全性和 RAID 1 一样。</p>
</li>
<li>
<p><strong>RAID 5</strong></p>
<p>至少需要三块以上磁盘才能组建。在每个循环的写入过程中，每块磁盘还加入一个同位检查数据（Parity），这个数据会记录其他磁盘的备份数据，用于磁盘损坏时的恢复。</p>
<p>磁盘可用容量为总磁盘容量减一块磁盘容量。</p>
<p>读写取性能介于 RAID 1 和 RAID 0 之间。</p>
<p>安全性能方面，只接受损坏不超过一块的硬盘情况下恢复数据。</p>
</li>
</ul>
<h2 id="预备磁盘"><a class="markdownIt-Anchor" href="#预备磁盘"></a> 预备磁盘</h2>
<p>磁盘阵列中的磁盘损坏时，可更换坏掉的磁盘并插入新的磁盘，磁盘阵列会主动重建数据。这通常需要在关机重启时进行，但 SAS 支持热插拔，可以避免重启。</p>
<p>为实现系统实时主动重建，需要预备磁盘。预备磁盘是指一块或多块未包含在原磁盘阵列等级中的磁盘。只有在磁盘阵列中出现磁盘损坏时，才会主动将预备磁盘引入磁盘阵列中进行数据重建。</p>
<h2 id="磁盘阵列类型"><a class="markdownIt-Anchor" href="#磁盘阵列类型"></a> 磁盘阵列类型</h2>
<p>磁盘整列有两种组建方式：</p>
<ul>
<li>
<p><strong>硬件磁盘阵列</strong>(hardware)</p>
<p>硬件磁盘阵列通过磁盘阵列卡完成组建任务，拥有专门芯片来处理 RAID 任务。性能比较好，例如用来处理 RAID 5 的同位检查码计算，并不会重复消耗原本系统的 I/O 总线。硬件磁盘阵列的设备文件名为/dev/sd[a-p]。</p>
</li>
<li>
<p><strong>软件磁盘阵列</strong>(software)</p>
<p>软件磁盘阵列利用软件来仿真磁盘阵列功能，与 CPU 运算和 I/O 总线速度关系很大。在 CentOS 中提供的软件磁盘阵列软件为 mdadm，支持以分区为单位组建 RAID0/1/5 等。软件磁盘阵列使用的设备文件名是系统的设备文件/dev/md[0-1]。</p>
</li>
</ul>
<h1 id="逻辑卷管理器"><a class="markdownIt-Anchor" href="#逻辑卷管理器"></a> 逻辑卷管理器</h1>
<p>逻辑卷管理器（LVM，Logical Volume Manager）通过软件组合几个物理分区（PV），将它们称为一块看起来是独立的大磁盘（VG），然后再将这块大磁盘分成可使用分区（LV），最终挂载使用。</p>
<h2 id="物理卷"><a class="markdownIt-Anchor" href="#物理卷"></a> 物理卷</h2>
<p>物理卷（PV，Physical Volume）分区需要通过 fdisk 调整系统标识符（system ID）为 8e（LVM 的标识符），然后通过 pvcreate 命令将其转换为 LVM 的最底层物理卷（PV），才能利用这些 PV。</p>
<h2 id="卷用户组"><a class="markdownIt-Anchor" href="#卷用户组"></a> 卷用户组</h2>
<p>LVM 将许多 PV 整合成卷用户组(VG，Volume Group)，在 32 位系统下每个 VG 最多仅能包含 65534 个 PE。如果使用 LVM 默认参数，则一个 VG 最大可达 256GB 容量。在 64 位系统下已不存在限制。</p>
<h2 id="物理扩展块"><a class="markdownIt-Anchor" href="#物理扩展块"></a> 物理扩展块</h2>
<p>LVM 默认使用 4MB 的物理扩展块（PE，即 Physical Extent），它是整个 LVM 中最小的存储块，类似于文件系统中的 block 大小。</p>
<h2 id="逻辑卷"><a class="markdownIt-Anchor" href="#逻辑卷"></a> 逻辑卷</h2>
<p>VG 会被切分成逻辑卷（LV，即 Logical Volume），这个 LV 就是最后可以被格式化使用的分区。</p>
<p>LV 的大小与此 LV 内的 PE 总数有关。</p>
<p>为了方便用户利用 LVM 管理其系统，LV 的设备文件名通常指定为 /dev/vgname/lvname 的样式。</p>
<p>更改文件系统容量本质是通过交换 PE 来进行数据转换，将原本 LV 内的 PE 转移到其他设备中以降低 LV 容量，或将其他设备的 PE 加到此 LV 中以增大容量。</p>
<p>对 LV 数据写入机制有两种：</p>
<ul>
<li>
<p><strong>线性模式</strong>（linear）：</p>
<p>如果有两个分区 sdb1 和 sdb2 加入到 VG 中，并且整个 VG 只有一个 LV 时，数据会先将 sdb1 写满，再开始写 sdb2。</p>
</li>
<li>
<p><strong>交错模式</strong>（striped）：</p>
<p>类似于 RAID 0 的模式，同时向两个分区内写入数据。</p>
</li>
</ul>
<p>LVM 的重点在于可以弹性调整文件系统容量，而不是性能优先，因此默认使用线性模式进行读写。</p>
<h1 id="mbr-分区表"><a class="markdownIt-Anchor" href="#mbr-分区表"></a> MBR 分区表</h1>
<p>目前主流分区表格式有 MBR 和 GPT。早期的 Linux 系统为了兼容 Windows 磁盘，使用的是支持 Windows 的 MBR。</p>
<p>MBR 分区表无法支持 2T 以上容量的硬盘。</p>
<h2 id="第一个扇区"><a class="markdownIt-Anchor" href="#第一个扇区"></a> 第一个扇区</h2>
<p>MBR 分区表第一个扇区（512Bytes）用来记录三个重要的信息：</p>
<ul>
<li>
<p><strong>主引导分区</strong>（MBR，Master Boot Record）：</p>
<p>用来安装引导加载程序的地方，有 446Bytes 大小。</p>
</li>
<li>
<p><strong>分区表</strong>（Partition Table）：</p>
<p>记录整块硬盘的分区状态，有 64Bytes 大小。</p>
</li>
<li>
<p><strong>引导记录标识</strong>（BRID）：</p>
<p>用来判断设备是否可以用于启动，只有 2 Bytes 大小。值为 55 或 AA 表示可引导。</p>
</li>
</ul>
<p>如果第一个扇区出现物理坏道，整块硬盘都不可用。</p>
<h2 id="主引导分区"><a class="markdownIt-Anchor" href="#主引导分区"></a> 主引导分区</h2>
<p>MBR 只有 446Bytes，主要提供以下功能：</p>
<ul>
<li>提供菜单，可以选择不同开机选项，实现多重引导；</li>
<li>载入内核文件，指向可开机的程序区段开启动系统；</li>
<li>转交其他 Loader，将引导加载功能转交给其他 Loader 负责。</li>
</ul>
<h2 id="分区表"><a class="markdownIt-Anchor" href="#分区表"></a> 分区表</h2>
<p>分区表记录了每个分区的起始柱面号，分区只是针对那 64bytes 的分区表进行设置。由于只有 64Bytes 大小，所以仅能写入四组分区信息。这四组分区信息分为主(Primary)或扩展(Extended)分区。</p>
<p>主分区和扩展分区在 Linux 系统中表示为 sda[1-4]。</p>
<p>分区的最小单位为柱面(Cylinder)。</p>
<h2 id="扩展分区"><a class="markdownIt-Anchor" href="#扩展分区"></a> 扩展分区</h2>
<p>扩展分区是指利用额外的扇区来记录分区信息，但无法进行格式化。可以在扩展分区中创建逻辑分区，具体做法是在每个逻辑分区的最前面几个扇区记录分区信息。需要注意的是，一个磁盘最多只能有一个扩展分区，这是操作系统的限制。</p>
<p>为了确保磁盘的连续性，通常将扩展分区的柱面号分配在所有主分区之后。这样可以更好地利用磁盘空间，并有助于提高磁盘读写效率。</p>
<h2 id="逻辑分区"><a class="markdownIt-Anchor" href="#逻辑分区"></a> 逻辑分区</h2>
<p>从扩展分区分出的分区也称为逻辑分区（Logical Partition）。在 Linux 系统中，逻辑分区从 hda5 开始计算。</p>
<p>在一个扩展分区内，相邻的逻辑分区可以合并。如果不相邻，则只能重建扩展分区。</p>
<p>需要注意的是，如果扩展分区被破坏，所有的逻辑分区将被删除，因为逻辑分区的信息都记录在扩展分区中。</p>
<h1 id="gpt-分区表"><a class="markdownIt-Anchor" href="#gpt-分区表"></a> GPT 分区表</h1>
<p>GPT 分区表是为了适应 4K 扇区的硬盘和固态硬盘而设计的，它抛弃了原先以柱面为单位的计算法，改用逻辑区块位址（LBA，Logical Block Address）来规划分区。默认大小为 512Bytes，第一个 LBA 为 LBA0。</p>
<p>GPT 分区表使用前 34 个 LBA 区块来记录分区信息。此外，磁盘最后 33 个 LBA 区块会用于存储分区表备份，以保障分区信息的安全。</p>
<h2 id="mbr-兼容区块"><a class="markdownIt-Anchor" href="#mbr-兼容区块"></a> MBR 兼容区块</h2>
<p>GPT 分区表中的 LBA0 用来兼容 MBR 格式。不同之处在于，原本分区表记录段仅放入一个特殊标志的分区，用来表示此磁盘为 GPT 磁盘。</p>
<h2 id="gpt-表头记录"><a class="markdownIt-Anchor" href="#gpt-表头记录"></a> GPT 表头记录</h2>
<p>GPT 分区表中的 LBA1 记录了分区表本身的位置和大小，备份分区表存放位置，以及分区表校验机制码（CRC32）。如果系统检测到分区表有错误，可以通过这个记录区来获取备份分区表并进行恢复。</p>
<h2 id="分区表-2"><a class="markdownIt-Anchor" href="#分区表-2"></a> 分区表</h2>
<p>分区表存放在 LBA2-33 位置。从 LBA2 开始，每个 LBA 都可以记录 4 笔分区记录，所以默认可以记录 128 个分区记录。</p>
<p>每笔记录占用 128 字节空间，具体内容如下表：</p>
<table>
<thead>
<tr>
<th>起始字节</th>
<th>长度</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>16 字节</td>
<td>分区类型 GUID</td>
</tr>
<tr>
<td>16</td>
<td>16 字节</td>
<td>分区 GUID</td>
</tr>
<tr>
<td>32</td>
<td>8 字节</td>
<td>起始 LBA（小端序）</td>
</tr>
<tr>
<td>40</td>
<td>8 字节</td>
<td>末尾 LBA</td>
</tr>
<tr>
<td>48</td>
<td>8 字节</td>
<td>属性标签（如 bit60 表示“只读”）</td>
</tr>
<tr>
<td>56</td>
<td>72 字节</td>
<td>分区名，可以包括 36 个 UTF-16（小端序）字符</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
</search>
