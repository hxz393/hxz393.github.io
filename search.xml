<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>02.软件基础</title>
    <url>/2759544459/</url>
    <content><![CDATA[<h1 id="数字系统"><a class="markdownIt-Anchor" href="#数字系统"></a> 数字系统</h1>
<p>计算机使用电信号的开和关来代表二进制的 1 和 0，这种逢 2 进 1 位的表示法称为二进制。除了二进制，常用的进制还有八进制和十六进制。然而，现实生活中使用的数字系统是十进制。</p>
<p>在编程语言中，表示二进制数的前缀是&quot;0b&quot;，表示八进制数的前缀是&quot;0o&quot;，表示十六进制数的前缀是&quot;0x&quot;。</p>
<h2 id="二进制转十进制"><a class="markdownIt-Anchor" href="#二进制转十进制"></a> 二进制转十进制</h2>
<p>例如，要将二进制数 1101101 转换为十进制数，手动计算方法如下：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1101101</mn><mo>=</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>6</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>5</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>4</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mn>1</mn><mo>=</mo><mn>64</mn><mo>+</mo><mn>32</mn><mo>+</mo><mn>0</mn><mo>+</mo><mn>8</mn><mo>+</mo><mn>4</mn><mo>+</mo><mn>0</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>109</mn></mrow><annotation encoding="application/x-tex">1101101=1*2^6+1*2^5+0*2^4+1*2^3+1*2^2+0*2^1+1=64+32+0+8+4+0+1=109
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">9</span></span></span></span></span></p>
<p>在 Bash 中，可以使用<code>echo $(())</code>来直接将二进制数转换为十进制数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server2 ~<span class="token punctuation">]</span><span class="token comment"># echo $((2#1101101))</span>
<span class="token number">109</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="十进制转二进制"><a class="markdownIt-Anchor" href="#十进制转二进制"></a> 十进制转二进制</h2>
<p>例如，将十进制数 109 转换为二进制数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">109</span>/2<span class="token operator">=</span><span class="token number">54</span><span class="token punctuation">..</span>.1
054/2<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">..</span>.0
027/2<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">..</span>.1
013/2<span class="token operator">=</span>06<span class="token punctuation">..</span>.1
007/2<span class="token operator">=</span>03<span class="token punctuation">..</span>.0
003/2<span class="token operator">=</span>01<span class="token punctuation">..</span>.1
001/2<span class="token operator">=</span>00<span class="token punctuation">..</span>.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将商除到 0 为止，把所有的余数从下往上读，得到的就是二进制结果 1101101。</p>
<p>在 Bash 中，可以通过调用<code>bc</code>来进行计算：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server2 ~<span class="token punctuation">]</span><span class="token comment"># echo "obase=2;ibase=10;109"|bc -l</span>
<span class="token number">1101101</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="二进制转十六进制"><a class="markdownIt-Anchor" href="#二进制转十六进制"></a> 二进制转十六进制</h2>
<p>例如，将二进制数 1101101 转换为十六进制数。</p>
<p>因为四位二进制恰好等于一位十六进制，所以先将二进制数从低位到高位分为四位一组，高位不足四位在前面补 0：</p>
<p>0110 1101</p>
<p>然后将每一组转为对应的十六进制数：</p>
<p>6 D</p>
<p>得到转换结果 0x6D。</p>
<h2 id="十六进制转二进制"><a class="markdownIt-Anchor" href="#十六进制转二进制"></a> 十六进制转二进制</h2>
<p>例如，将十六进制数 0x6D 转换为二进制数。</p>
<p>原理同二进制转十六进制，将每位十六进制单独拿出来：</p>
<p>6 D</p>
<p>将每位转为对应的二进制：</p>
<p>0110 1101</p>
<p>得到转换结果 1101101。</p>
<h2 id="计量单位"><a class="markdownIt-Anchor" href="#计量单位"></a> 计量单位</h2>
<p>计算机中常用的计量单位有下面一些：</p>
<ul>
<li><strong>存储容量单位</strong>
<ul>
<li><strong>比特</strong>（bit）：二进制单位，只记录 0 或 1。</li>
<li><strong>字节</strong>（Byte）：储存记录用的单位，1Byte = 8bit。1KB = 1024Byte，再往上有 GB、TB、PB、EB、ZB 等单位。</li>
</ul>
</li>
<li><strong>速度单位</strong>
<ul>
<li><strong>运算速度</strong>：Hz 代表秒分之一，CPU 运算速度常使用 MHz 或 GHz。1MHz = 1000*1000Hz。</li>
<li><strong>网络传输</strong>：bps 意思是 bit per second 每秒多少比特，常见的网卡速度 100Mbps 意即每秒传输 100Mb，转为实际文件传输速度等于 12.5MB/s。</li>
</ul>
</li>
</ul>
<h1 id="编码系统"><a class="markdownIt-Anchor" href="#编码系统"></a> 编码系统</h1>
<p>计算机只能识别数字，因此需要使用编码系统将文字转换为数字进行储存。</p>
<h2 id="编码过程"><a class="markdownIt-Anchor" href="#编码过程"></a> 编码过程</h2>
<p>编码的过程是根据一个编码对照表将文字转换为对应编码表中的编号，并将编号存入文件中。</p>
<p>在读取文件时，再根据编码对照表将编号还原成文字进行显示。</p>
<p>如果选择的编码表与实际不符，则会出现所谓的“乱码”。</p>
<p>常用的编码表包括 ASCII、GB2312 和 Unicode 等。</p>
<h2 id="ascii-编码"><a class="markdownIt-Anchor" href="#ascii-编码"></a> ASCII 编码</h2>
<p>美国信息交换标准码（ASCII，American Standard Code for Information Interchange）为每个字符指定 7 位（最左边的位被忽略掉），占用 1Byte 的记录，因此总共可以表示 128 个字符，即从二进制 0000000 到 1111111。</p>
<p>ASII 码中包含 33 个控制字符、52 个字母（65 ~ 90，97 ~ 122）、10 个数字（48 ~ 57）、32 个标点符号以及空白符。</p>
<h2 id="gb2312-编码"><a class="markdownIt-Anchor" href="#gb2312-编码"></a> GB2312 编码</h2>
<p>简体中文最常用的是 GB2312 编码，每个中文字会占用 2Bytes。</p>
<p>理论上有 2<sup>16</sup>=65536 个记录位置，实际只收录了一万三千多个中文字。</p>
<h2 id="unicode-编码"><a class="markdownIt-Anchor" href="#unicode-编码"></a> Unicode 编码</h2>
<p>Unicode 编码也叫 UTF-8 或统一码。基本上包含了所有语言的文字。</p>
<h1 id="逻辑门"><a class="markdownIt-Anchor" href="#逻辑门"></a> 逻辑门</h1>
<p>计算机中的逻辑电路基本单元有以下几种：</p>
<h2 id="非门not-gate"><a class="markdownIt-Anchor" href="#非门not-gate"></a> 非门（NOT Gate）</h2>
<p>也称为反相器、倒相器、逻辑否定电路，它的输出是输入的反相。当输入端为高电平(1)时，输出端为低电平(0)，当输入端为低电平(0)时，输出端为高电平(1)。</p>
<p>非门的真值表：</p>
<table>
<thead>
<tr>
<th>输入 A</th>
<th>输出 Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下：</p>
<p><img data-src="../../../images/%E9%9D%9E%E9%97%A8.png" alt="非门" /></p>
<h2 id="与门and-gate"><a class="markdownIt-Anchor" href="#与门and-gate"></a> 与门（AND Gate）</h2>
<p>与门又称与电路、逻辑积、逻辑与电路。当所有的输入同时为高电平(1)时，输出才为高电平(1)，否则输出为低电平(0)。</p>
<p>与门的真值表：</p>
<table>
<thead>
<tr>
<th>输入 A</th>
<th>输入 B</th>
<th>输出 Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下：</p>
<p><img data-src="../../../images/%E4%B8%8E%E9%97%A8.png" alt="与门" /></p>
<h2 id="或门or-gate"><a class="markdownIt-Anchor" href="#或门or-gate"></a> 或门（OR Gate）</h2>
<p>又称或电路、逻辑和电路。只要输入中有一个为高电平(1)时，输出就为高电平(1)；只有当所有的输入全为低电平(0)时，输出才为低电平(0)。</p>
<p>或门的真值表：</p>
<table>
<thead>
<tr>
<th>输入 A</th>
<th>输入 B</th>
<th>输出 Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下：</p>
<p><img data-src="../../../images/%E6%88%96%E9%97%A8.jpg" alt="或门" /></p>
<h2 id="与非门nand-gate"><a class="markdownIt-Anchor" href="#与非门nand-gate"></a> 与非门（NAND Gate）</h2>
<p>与非门是与门和非门的叠加。当输入均为高电平(1)时，输出为低电平(0)；当输入中至少有一个为低电平(0)时，输出为高电平(1)。与非门可以看作是与门和非门的叠加。</p>
<p>与非门真值表：</p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下：</p>
<p><img data-src="../../../images/%E4%B8%8E%E9%9D%9E%E9%97%A8.png" alt="与非门" /></p>
<h2 id="或非门nor-gate"><a class="markdownIt-Anchor" href="#或非门nor-gate"></a> 或非门（NOR Gate）</h2>
<p>或非门实现逻辑或非功能。它有多个输入端，1 个输出端。多输入或非门可由 2 输入或非门和反相器构成。只有当两个输入 A 和 B 为低电平(0)时，输出为高电平(1)。也可以理解为任意输入为高电平(1)，输出为低电平(0)。</p>
<p>或非门真值表:</p>
<table>
<thead>
<tr>
<th>输入 A</th>
<th>输入 B</th>
<th>输出 Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下：</p>
<p><img data-src="../../../images/%E6%88%96%E9%9D%9E%E9%97%A8.png" alt="或非门" /></p>
<h2 id="异或门xor-gate"><a class="markdownIt-Anchor" href="#异或门xor-gate"></a> 异或门（XOR Gate）</h2>
<p>异或门是数字逻辑中实现逻辑异或的逻辑门。多输入异或门可由两输入异或门构成。若两个输入的电平相异，则输出为高电平(1)；若两个输入的电平相同，则输出为低电平(0)。即如果两个输入不同，则异或门输出高电平(1)。</p>
<p>异或门真值表:</p>
<table>
<thead>
<tr>
<th>输入 A</th>
<th>输入 B</th>
<th>输出 Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下：</p>
<p><img data-src="../../../images/%E5%BC%82%E6%88%96%E9%97%A8.png" alt="异或门" /></p>
<h2 id="同或门xnor-gate"><a class="markdownIt-Anchor" href="#同或门xnor-gate"></a> 同或门（XNOR Gate）</h2>
<p>同或门也称为异或非门，在异或门的输出端再加上一个非门就构成了异或非门。当 2 个输入端中有且只有一个是低电平(0)时，输出为低电平(0)。即当输入电平相同时，输出为高电平(1)。</p>
<p>同或门真值表:</p>
<table>
<thead>
<tr>
<th>输入 A</th>
<th>输入 B</th>
<th>输出 Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下：</p>
<p><img data-src="../../../images/%E5%90%8C%E6%88%96%E9%97%A8.png" alt="同或门" /></p>
<h2 id="二进制加法器"><a class="markdownIt-Anchor" href="#二进制加法器"></a> 二进制加法器</h2>
<p>可以使用两种基本逻辑门来计算两个二进制数相加的结果：</p>
<ul>
<li>
<p><strong>位相加</strong></p>
<p>位相加的计算结果由 XOR 异或门实现。</p>
<table>
<thead>
<tr>
<th>位和</th>
<th>0</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>0</strong></td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td><strong>1</strong></td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><strong>进位位</strong></p>
<p>进位位的计算结果由 AND 与门实现。</p>
<table>
<thead>
<tr>
<th>进位</th>
<th>0</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>0</strong></td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td><strong>1</strong></td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>将它们连起来就成为半加器（Half Adder）：</p>
<p><img data-src="../../../images/%E5%8D%8A%E5%8A%A0%E5%99%A8.png" alt="半加器" /></p>
<p>为了将可能产生的进位位纳入下一次运算，需要对三个二进制数进行加法运算，最终将两个半加器和一个或门连接起来成为一个全加器（Full Adder）：</p>
<p><img data-src="../../../images/%E5%85%A8%E5%8A%A0%E5%99%A8.png" alt="全加器" /></p>
<p>首先这一次计算两个二进制数 A 和 B 的和得到进位和位和输出。然后将位和输出与上一次计算结果的进位输出相加得到另外一个进位和位和输出，最后将两次的进位输出做或运算，与上一步得出的位和输出在一起传递给下一环节。</p>
<h1 id="软件程序"><a class="markdownIt-Anchor" href="#软件程序"></a> 软件程序</h1>
<p>通常软件程序可以分为两类：操作系统和应用程序。</p>
<h2 id="操作系统"><a class="markdownIt-Anchor" href="#操作系统"></a> 操作系统</h2>
<p>操作系统（OS，Operating System）是一组程序，用于管理计算机的所有活动以及驱动系统中的所有硬件。</p>
<p>操作系统内核直接参考硬件规格编写，用于管理硬件，因此同一个操作系统内核不能在不同的硬件构架下运行。</p>
<p>操作系统的功能主要包括：</p>
<ul>
<li>
<p><strong>系统调用接口</strong>（System call interface）：</p>
<p>方便程序员通过接口与内核通信，利用硬件资源。</p>
</li>
<li>
<p><strong>程序管理</strong>（Process Control）：</p>
<p>一部计算机可以同时运行很多软件，一般管运行中的程序叫进程。进程可以在前台也可以在后台运行，内核控制着系统管理运行在系统上的所有进程。</p>
</li>
<li>
<p><strong>内存管理</strong>（Memory Management）：</p>
<p>因为程序代码和数据都必须载入到内存中运行，所以内存控制非常重要。</p>
<p>交换空间（虚拟内存）用于物理内存不足时提供内存交换（swap）功能，调用虚拟内存的过程称为页面调度（Paging）。</p>
<p>内存储存单元按组划分成很多块，这些块称为页面（Page）。内核将每个内存页面放在物理内存或交换空间中，然后维护一个内存页面表，自动把一段时间未访问的内存页面复制到交换空间（Swapping Out）。当程序要访问一个已被换出的内存页面时，内核必须从物理内存换出另外一个内存页面给它让出空间，然后从交换空间换入请求的内存页面。</p>
</li>
<li>
<p><strong>文件系统管理</strong>（Filesystem Management）：</p>
<p>负责对多种文件系统的支持，管理数据输入输出工作，文件格式支持等。</p>
</li>
<li>
<p><strong>设备驱动</strong>（Device Driver）：</p>
<p>管理硬件的驱动。驱动程序相当于应用程序和硬件设备的中间人，允许内核与设备之间交换数据。</p>
</li>
</ul>
<h2 id="应用程序"><a class="markdownIt-Anchor" href="#应用程序"></a> 应用程序</h2>
<p>应用程序是利用操作系统提供的开发接口开发出来的软件，这些软件通常针对特定功能而开发。</p>
<h2 id="源代码"><a class="markdownIt-Anchor" href="#源代码"></a> 源代码</h2>
<p>源代码是创建软件的原始数据。可以使用诸如 C++之类的编程语言编写源代码，在使用这些代码之前需要进行编译。使用 Perl 或 Python 这样的脚本语言编写源代码，则无需编译即可运行。</p>
<h2 id="开源许可"><a class="markdownIt-Anchor" href="#开源许可"></a> 开源许可</h2>
<p>以源代码形式提供的软件称为开源软件，通常可以自由地查看、共享、使用和修改它。</p>
<p>开源软件许可证声明对源代码拥有版权，并确定代码的使用和发布以及派生代码的使用和发布的自由范围和限制。常见的开源许可证有 BSD 和 GPL。</p>
<ul>
<li>
<p><strong>BSD 许可证</strong></p>
<p>持有 BSD 许可证的源代码可以自由地进行修改，而且不需要重新发布这些修改。常用于私有或商业软件中。</p>
</li>
<li>
<p><strong>GPL 许可证</strong></p>
<p>GNU 通用公共许可证（GPL）规定任何已发布的软件所做的任何修改都必须以相同的许可证发布。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
  <entry>
    <title>04.Linux 目录结构</title>
    <url>/4087499240/</url>
    <content><![CDATA[<h1 id="目录配置标准"><a class="markdownIt-Anchor" href="#目录配置标准"></a> 目录配置标准</h1>
<p>Linux 采用将文件储存在单个目录结构中，这种目录被称为虚拟目录（Virtual Directory）。虚拟目录将安装在主机上的所有储存设备的文件路径纳入单个目录结构中。</p>
<p>各种发行版遵循同一套文件系统层次结构标准（FHS，Filesystem Hierarchy Standard），目的在于规范每个特定目录应该放什么数据。FHS 依据文件系统使用的频繁与否，以及是否允许使用者随意变更，将目录定义为四种交互形态：</p>
<ul>
<li>
<p><strong>可分享的</strong>（Shareable）</p>
<p>可以分享给其他系统挂载使用的目录，包括可执行文件与使用者的邮件等数据。</p>
</li>
<li>
<p><strong>不可分享的</strong>（Unshareable）</p>
<p>自己机器上面运行的设备文件或者是与程序有关的 socket 文件等，仅能自己使用，所以不适合分享。</p>
</li>
<li>
<p><strong>不变的</strong>（Static）</p>
<p>有些数据是不会经常变动的，例如函数库、文件说明文档、系统管理员所管理的主机服务配置文件等。</p>
</li>
<li>
<p><strong>可变动的</strong>（Variable）</p>
<p>经常改变的数据，例如日志文件等。</p>
</li>
</ul>
<h1 id="顶级目录"><a class="markdownIt-Anchor" href="#顶级目录"></a> 顶级目录</h1>
<p>所有目录都由根目录/衍生而来，因此 FHS 标准建议根目录所在分区应该越小越好，最好不要将应用程序所安装的软件与根目录放在同一个分区。这样可以提高性能，根目录所在的文件系统也较不容易发生问题。</p>
<p>开机过程中仅有根目录会被挂载，其他分区则是在开机完成后陆续进行挂载。</p>
<p>必须存在的顶级目录：</p>
<table>
<thead>
<tr>
<th><strong>目录</strong></th>
<th><strong>目录说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>/bin</td>
<td>二进制目录，存放可以被 root 和一般账户所用的命令，以及在单用户维护模式下仍能被操作的常用命令，如 cat，mv，chown 等。</td>
</tr>
<tr>
<td>/boot</td>
<td>启动目录，存放开机会使用到的文件，包括内核文件及开机所需配置文件。</td>
</tr>
<tr>
<td>/dev</td>
<td>设备目录，Linux 上任何设备与接口设备都是以文件的形式存在于这个目录下，访问目录下的某个文件就等于访问某个设备。主要分为三类硬件，例如硬盘（sda）和打印机（lp0），终端如控制台（tty），伪设备如/dev/null 和/dev/zero。</td>
</tr>
<tr>
<td>/etc</td>
<td>系统配置文件目录，系统配置文件几乎都放在这里，如账号密码，服务起始文件等。一般不要放可执行文件到这个目录下。<br />/etc/X11:与 X Window 有关的配置文件放在这里，尤其是 xorg.conf 这个 XServer 的配置文件。<br />/etc/opt:放置第三方软件配置文件。<br />/etc/sgml:与 SGML 格式有关的各项配置文件。<br />/etc/xml:与 XML 格式有关的配置文件。</td>
</tr>
<tr>
<td>/home</td>
<td>主目录，系统默认用户主文件夹，一般子文件夹以用户账号命名。</td>
</tr>
<tr>
<td>/lib, /lib64</td>
<td>库目录，存放开机时会用到的函数库，以及在/bin 或/sbin 中命令会调用的函数库。<br />/lib/modules/:存放内核相关的模块（驱动程序）。</td>
</tr>
<tr>
<td>/media</td>
<td>媒体目录，存放可删除设备，包括 CD，DVD，U 盘等设备都暂时挂载于此。</td>
</tr>
<tr>
<td>/mnt</td>
<td>挂载目录，如果想要暂时挂载某些额外的设备，一般放置到这个目录中。</td>
</tr>
<tr>
<td>/opt</td>
<td>可选目录，给第三方软件放置的目录，包括发行版附加的一些软件包。</td>
</tr>
<tr>
<td>/root</td>
<td>系统管理员的主文件夹。</td>
</tr>
<tr>
<td>/sbin</td>
<td>系统二进制目录，只有 root 可用，包括开机，修复，还原系统所需要的系统命令，如 fdisk，ifconfig，init 等。</td>
</tr>
<tr>
<td>/srv</td>
<td>服务目录，一些网络服务启动后，这些服务所需要取用的数据目录，如将 www 服务需要的网页文件放置到/srv/www 里。</td>
</tr>
<tr>
<td>/tmp</td>
<td>临时目录，重要数据不可放置到此目录，会被一些系统进程定期清空。</td>
</tr>
<tr>
<td>/run</td>
<td>运行目录，存放系统运作时的运行时数据。</td>
</tr>
</tbody>
</table>
<p>其他重要目录：</p>
<table>
<thead>
<tr>
<th><strong>目录</strong></th>
<th><strong>目录说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>/lost+found</td>
<td>只有 ext 文件系统格式才会产生的目录，用来放置丢失的文件片段。</td>
</tr>
<tr>
<td>/proc</td>
<td>进程目录。这个目录本身是一个虚拟文件系统（Virtual Filesystem），它放置的数据都在内存中，如系统内核、进程、外部设备的状态及网络状态等，所以实际不占任何硬盘空间。</td>
</tr>
<tr>
<td>/sys</td>
<td>系统目录。和/proc 类似的虚拟文件系统，记录与内核相关信息，包括目前已加载的内核模块与硬件设备信息。</td>
</tr>
</tbody>
</table>
<h1 id="usr-目录"><a class="markdownIt-Anchor" href="#usr-目录"></a> /usr 目录</h1>
<p>/usr 目录存放静态数据,即不会随时间改变的文件,原则上放置独立安装的软件数据。系统默认软件也放在/usr 目录下。</p>
<p>/usr 目录下的子目录说明：</p>
<table>
<thead>
<tr>
<th><strong>目录</strong></th>
<th><strong>目录说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>/usr/bin/</td>
<td>存放所有的用户命令。</td>
</tr>
<tr>
<td>/usr/include/</td>
<td>存放 C/C++等编程语言的头文件(header)和包含文件(include)。</td>
</tr>
<tr>
<td>/usr/lib/</td>
<td>存放各种应用软件的函数库、目标文件，以及一般用户不使用的执行文件或脚本。</td>
</tr>
<tr>
<td>/usr/local/</td>
<td>推荐系统管理员自行下载安装的软件存放目录。</td>
</tr>
<tr>
<td>/usr/sbin/</td>
<td>存放非正常运行所需的系统命令，例如网络服务器软件的服务命令。</td>
</tr>
<tr>
<td>/usr/share/</td>
<td>存放共享文件，如 man 手册和 doc 帮助文档。</td>
</tr>
<tr>
<td>/usr/src/</td>
<td>一般建议将源码放在该目录下。内核源码建议放在/usr/src/linux/下。</td>
</tr>
<tr>
<td>/usr/libexec/</td>
<td>存放某些不被一般使用者惯用的可执行文件或脚本。</td>
</tr>
</tbody>
</table>
<h1 id="var-目录"><a class="markdownIt-Anchor" href="#var-目录"></a> /var 目录</h1>
<p>/var 目录是用来存放会经常变动的文件的，包括缓存（cache）、日志文件（log file）以及某些软件运行时所产生的文件（lock file、run file）或 MySQL 数据库的文件等等。最好可以将它独立出来挂在单独的一个分区中。</p>
<p>下面是 /var 目录下的子目录说明：</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>目录说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>/var/cache/</td>
<td>应用程序本身运行过程中会产生一些暂存文件。</td>
</tr>
<tr>
<td>/var/lib/</td>
<td>程序执行的过程中需要使用到的数据文件的放置目录。在此目录下各自的软件应该要有自己的目录，例如 MySQL 数据库放置到 /var/lib/mysql/ 下。</td>
</tr>
<tr>
<td>/var/lock/</td>
<td>某些设备或文件资源一次只能被一个应用程序所使用，为了避免使用冲突就得给该设备上锁。例如刻录机设备在刻录中时会被锁上。目前此目录已被挪到 /run/lock 中。</td>
</tr>
<tr>
<td>/var/log/</td>
<td>日志文件放置的目录，例如记录登录者信息的文件 /var/log/messages、/var/log/wtmp。</td>
</tr>
<tr>
<td>/var/mail/</td>
<td>放置个人电子邮件信箱的目录，等同于 /var/spool/mail/。</td>
</tr>
<tr>
<td>/var/run/</td>
<td>某些程序或服务启动后，会将它们的 PID 放置在这个目录下。</td>
</tr>
<tr>
<td>/var/spool/</td>
<td>放置一些队列数据，通常在使用后会被删除。</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
  <entry>
    <title>06.Linux 启动流程</title>
    <url>/3373647732/</url>
    <content><![CDATA[<h1 id="bios-搭配-mbrgpt"><a class="markdownIt-Anchor" href="#bios-搭配-mbrgpt"></a> BIOS 搭配 MBR/GPT</h1>
<p>目前，主机系统在载入硬件驱动方面的程序有两种：使用 BIOS 和 UEFI。简单的开机流程分为以下步骤：</p>
<ol>
<li>载入 BIOS 的硬件信息与自测（POST，power on self-test），并根据设置取得第一个可开机的设备；</li>
<li>通过硬件的 INT 13 中断功能，读取并执行第一个可开机设备内 MBR 的引导加载程序（Boot Loader）；</li>
<li>依据引导加载程序的设置，识别文件系统格式，加载核心文件。由内核开始检测硬件与驱动；</li>
<li>启动初始进程管理程序（systemd 或 systemV），最终目的都是启动基础服务和用户设置的开机启动程序。</li>
</ol>
<p>GPT 格式启动过程一样，差异在于开机管理程序是否支持 GPT。</p>
<h1 id="多重引导"><a class="markdownIt-Anchor" href="#多重引导"></a> 多重引导</h1>
<p>引导加载程序除了可以安装在 MBR 外，还可以安装到每个文件系统的引导扇区（Boot Sector）。</p>
<p>例如，硬盘第一和第二分区分别安装了 Windows 和 Linux。开机装载第一个分区引导加载程序，此时会出现分支选项：</p>
<ul>
<li>选择启动 Windows 直接加载第一个分区中的 Windows 核心文件。</li>
<li>选择启动 Linux 则转到第二个分区的引导扇区，由第二个分区的引导加载程序完成 Linux 系统启动工作。</li>
</ul>
<p>如果要安装多重开机，一般先安装 Windows 再安装 Linux，因为 Windows 安装时会直接覆盖掉 MBR 以及自己所在分区的引导扇区，并且 Windows 的引导程序默认没有转移引导功能。而 Linux 安装时可以选择引导加载程序不安装到 MBR，只装在指定分区的引导扇区。之后修改引导程序加入 Windows 开机选项，完成双系统引导功能。</p>
<h1 id="引导目录"><a class="markdownIt-Anchor" href="#引导目录"></a> 引导目录</h1>
<p>如果使用 grub 引导，需给 /boot 分区来放置开机过程所需的文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span><span class="token comment"># ll /boot</span>
total <span class="token number">149232</span>
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">153596</span> Aug <span class="token number">31</span> <span class="token number">10</span>:57 config-3.10.0-1160.41.1.el7.x86_64
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">147819</span> Apr <span class="token number">20</span>  <span class="token number">2018</span> config-3.10.0-862.el7.x86_64
drwxr-xr-x. <span class="token number">3</span> root root       <span class="token number">17</span> Sep  <span class="token number">7</span> <span class="token number">13</span>:34 efi
drwxr-xr-x. <span class="token number">2</span> root root       <span class="token number">27</span> Sep  <span class="token number">7</span> <span class="token number">13</span>:35 grub
drwx------. <span class="token number">5</span> root root      <span class="token number">132</span> Sep  <span class="token number">7</span> 05:55 grub2
-rw-------. <span class="token number">1</span> root root <span class="token number">55385253</span> Sep  <span class="token number">7</span> <span class="token number">13</span>:37 initramfs-0-rescue-77a36143eb014dd5a0d6e738b1d84778.img
-rw-------. <span class="token number">1</span> root root <span class="token number">21322754</span> Sep  <span class="token number">7</span> 05:55 initramfs-3.10.0-1160.41.1.el7.x86_64.img
-rw-------. <span class="token number">1</span> root root <span class="token number">13851614</span> Sep <span class="token number">18</span> <span class="token number">23</span>:13 initramfs-3.10.0-1160.41.1.el7.x86_64kdump.img
-rw-------. <span class="token number">1</span> root root <span class="token number">21288233</span> Sep  <span class="token number">7</span> 05:56 initramfs-3.10.0-862.el7.x86_64.img
-rw-------. <span class="token number">1</span> root root <span class="token number">13761710</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:00 initramfs-3.10.0-862.el7.x86_64kdump.img
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">320757</span> Aug <span class="token number">31</span> <span class="token number">10</span>:57 symvers-3.10.0-1160.41.1.el7.x86_64.gz
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">304926</span> Apr <span class="token number">20</span>  <span class="token number">2018</span> symvers-3.10.0-862.el7.x86_64.gz
-rw-------. <span class="token number">1</span> root root  <span class="token number">3620596</span> Aug <span class="token number">31</span> <span class="token number">10</span>:57 System.map-3.10.0-1160.41.1.el7.x86_64
-rw-------. <span class="token number">1</span> root root  <span class="token number">3409143</span> Apr <span class="token number">20</span>  <span class="token number">2018</span> System.map-3.10.0-862.el7.x86_64
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">6224704</span> Sep  <span class="token number">7</span> <span class="token number">13</span>:37 vmlinuz-0-rescue-77a36143eb014dd5a0d6e738b1d84778
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">6773352</span> Aug <span class="token number">31</span> <span class="token number">10</span>:57 vmlinuz-3.10.0-1160.41.1.el7.x86_64
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">6224704</span> Apr <span class="token number">20</span>  <span class="token number">2018</span> vmlinuz-3.10.0-862.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>/boot 内文件与目录说明如下所示：</p>
<table>
<thead>
<tr>
<th>文件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>config-*</td>
<td>此版本内核被编译时选择的功能与模块配置文件</td>
</tr>
<tr>
<td>grub、grub2</td>
<td>开机管理程序 grub 相关数据目录</td>
</tr>
<tr>
<td>initramfs-0-rescue-*</td>
<td>救援模式的虚拟文件系统</td>
</tr>
<tr>
<td>initramfs-*.img</td>
<td>正常模式的虚拟文件系统</td>
</tr>
<tr>
<td>initramfs-*kdump.img</td>
<td>内核出问题时用到的虚拟文件系统</td>
</tr>
<tr>
<td>System.map-*</td>
<td>内核功能放置到内存位址的对应表</td>
</tr>
<tr>
<td>vmlinuz-0-rescue-*</td>
<td>救援模式的内核文件</td>
</tr>
<tr>
<td>vmlinuz-*</td>
<td>正常模式的内核文件</td>
</tr>
</tbody>
</table>
<h1 id="硬件检测"><a class="markdownIt-Anchor" href="#硬件检测"></a> 硬件检测</h1>
<p>在引导加载程序读取到内核文件后，Linux 会将内核解压到内存中，由内核开始测试与驱动硬件。</p>
<p>此时 Linux 内核会以自己检测结果为准，而不理会 BIOS 的硬件检测结果。也就是说内核此时开始接管 BIOS 后的工作了。</p>
<h1 id="虚拟文件系统"><a class="markdownIt-Anchor" href="#虚拟文件系统"></a> 虚拟文件系统</h1>
<p>Linux 内核可以动态载入内核模块（驱动），这些内核模块放置在 /lib/modules/ 目录内。由于模块放置到根目录内，因此开机过程中内核必须要以只读方式挂载根目录，才可以读取到驱动程序。</p>
<p>但是在挂载根目录时，很大可能 Linux 内核并不认识 SATA 设备。为了让内核顺利执行下去，引用了一个虚拟文件系统（Initial RAM Disk 或 Initial RAM Filesystem）来处理，就是在 /boot 目录内以 initramfs 开头命名的 img 文件。</p>
<p>虚拟文件系统的 img 文件也能被引导加载程序载入到内存中，解压后在内存中仿真成一个根目录。内核会读取虚拟文件系统内的驱动，通常是与磁盘接口和文件系统格式支持有关的驱动程序。</p>
<p>等驱动载入完毕，根目录所在分区信息被正确识别后，此虚拟文件系统被卸载，并挂载实际的根目录文件系统，继续后续开机流程。</p>
<p>可以用 lsinitrd 命令查看 initramfs 镜像的内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span><span class="token comment"># lsinitrd /boot/initramfs-3.10.0-1160.41.1.el7.x86_64.img </span>
Image: /boot/initramfs-3.10.0-1160.41.1.el7.x86_64.img: 21M
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
Early CPIO image
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
drwxr-xr-x   <span class="token number">3</span> root     root            <span class="token number">0</span> Sep  <span class="token number">7</span> 05:55 <span class="token builtin class-name">.</span>
-rw-r--r--   <span class="token number">1</span> root     root            <span class="token number">2</span> Sep  <span class="token number">7</span> 05:55 early_cpio
drwxr-xr-x   <span class="token number">3</span> root     root            <span class="token number">0</span> Sep  <span class="token number">7</span> 05:55 kernel
drwxr-xr-x   <span class="token number">3</span> root     root            <span class="token number">0</span> Sep  <span class="token number">7</span> 05:55 kernel/x86
drwxr-xr-x   <span class="token number">2</span> root     root            <span class="token number">0</span> Sep  <span class="token number">7</span> 05:55 kernel/x86/microcode
-rw-r--r--   <span class="token number">1</span> root     root         <span class="token number">6476</span> Sep  <span class="token number">7</span> 05:55 kernel/x86/microcode/AuthenticAMD.bin
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
Version: dracut-033-572.el7

Arguments: <span class="token parameter variable">-f</span>

dracut modules:
<span class="token function">bash</span>
nss-softokn
i18n
microcode_ctl-fw_dir_override
<span class="token function">shutdown</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
drwxr-xr-x  <span class="token number">12</span> root     root            <span class="token number">0</span> Sep  <span class="token number">7</span> 05:55 <span class="token builtin class-name">.</span>
crw-r--r--   <span class="token number">1</span> root     root       <span class="token number">5</span>,   <span class="token number">1</span> Sep  <span class="token number">7</span> 05:55 dev/console
crw-r--r--   <span class="token number">1</span> root     root       <span class="token number">1</span>,  <span class="token number">11</span> Sep  <span class="token number">7</span> 05:55 dev/kmsg
crw-r--r--   <span class="token number">1</span> root     root       <span class="token number">1</span>,   <span class="token number">3</span> Sep  <span class="token number">7</span> 05:55 dev/null
lrwxrwxrwx   <span class="token number">1</span> root     root            <span class="token number">7</span> Sep  <span class="token number">7</span> 05:55 bin -<span class="token operator">></span> usr/bin
drwxr-xr-x   <span class="token number">2</span> root     root            <span class="token number">0</span> Sep  <span class="token number">7</span> 05:55 dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，这个 img 文件可以分为两部分。前半部分包括一些预先声明的数据，其中包括一个可执行的 bin 文件；而后半部分才是内核会去读取的重要文件。</p>
<p>进一步解压整个 img 文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span><span class="token comment"># cp /boot/initramfs-3.10.0-1160.41.1.el7.x86_64.img init.img</span>
<span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span><span class="token comment"># file init.img </span>
init.img: ASCII cpio archive <span class="token punctuation">(</span>SVR4 with no CRC<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span><span class="token comment"># /usr/lib/dracut/skipcpio init.img | zcat | cpio -div</span>
init
<span class="token function">shutdown</span>
<span class="token number">88189</span> blocks
<span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span><span class="token comment"># ll</span>
total <span class="token number">8</span>
lrwxrwxrwx.  <span class="token number">1</span> root root    <span class="token number">7</span> Sep <span class="token number">19</span> 09:10 bin -<span class="token operator">></span> usr/bin
drwxr-xr-x.  <span class="token number">2</span> root root   <span class="token number">45</span> Sep <span class="token number">19</span> 09:10 dev
drwxr-xr-x. <span class="token number">12</span> root root <span class="token number">4096</span> Sep <span class="token number">19</span> 09:10 etc
lrwxrwxrwx.  <span class="token number">1</span> root root   <span class="token number">23</span> Sep <span class="token number">19</span> 09:10 init -<span class="token operator">></span> usr/lib/systemd/systemd
lrwxrwxrwx.  <span class="token number">1</span> root root    <span class="token number">7</span> Sep <span class="token number">19</span> 09:10 lib -<span class="token operator">></span> usr/lib
lrwxrwxrwx.  <span class="token number">1</span> root root    <span class="token number">9</span> Sep <span class="token number">19</span> 09:10 lib64 -<span class="token operator">></span> usr/lib64
drwxr-xr-x.  <span class="token number">2</span> root root    <span class="token number">6</span> Sep <span class="token number">19</span> 09:10 proc
drwxr-xr-x.  <span class="token number">2</span> root root    <span class="token number">6</span> Sep <span class="token number">19</span> 09:10 root
drwxr-xr-x.  <span class="token number">2</span> root root    <span class="token number">6</span> Sep <span class="token number">19</span> 09:10 run
lrwxrwxrwx.  <span class="token number">1</span> root root    <span class="token number">8</span> Sep <span class="token number">19</span> 09:10 sbin -<span class="token operator">></span> usr/sbin
-rwxr-xr-x.  <span class="token number">1</span> root root <span class="token number">3117</span> Sep <span class="token number">19</span> 09:10 <span class="token function">shutdown</span>
drwxr-xr-x.  <span class="token number">2</span> root root    <span class="token number">6</span> Sep <span class="token number">19</span> 09:10 sys
drwxr-xr-x.  <span class="token number">2</span> root root    <span class="token number">6</span> Sep <span class="token number">19</span> 09:10 sysroot
drwxr-xr-x.  <span class="token number">2</span> root root    <span class="token number">6</span> Sep <span class="token number">19</span> 09:10 tmp
drwxr-xr-x.  <span class="token number">7</span> root root   <span class="token number">66</span> Sep <span class="token number">19</span> 09:10 usr
drwxr-xr-x.  <span class="token number">2</span> root root   <span class="token number">29</span> Sep <span class="token number">19</span> 09:10 var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解压后查询下这个文件系统中 systemd 调用的运行模式：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span><span class="token comment"># ll usr/lib/systemd/system/default.target</span>
lrwxrwxrwx. <span class="token number">1</span> root root <span class="token number">13</span> Sep <span class="token number">19</span> 09:10 usr/lib/systemd/system/default.target -<span class="token operator">></span> initrd.target
<span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span><span class="token comment"># systemctl list-dependencies initrd.target</span>
initrd.target
● ├─dracut-cmdline.service
● ├─dracut-initqueue.service
● ├─dracut-mount.service
● ├─dracut-pre-mount.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过查询 initrd.target 可以知道内核先是用载入虚拟文件系统中的 basic.target、sysinit.target 等功能启用的流程，让系统顺利运行，再卸载虚拟文件系统，挂载实际系统根目录。</p>
<p>如果想要创建一个自定义的 initramfs 镜像，可以使用 dracut 或 mkinitrd 来处理。例如，新建一个添加了 x200 网卡驱动和 nfs 文件系统驱动的 initramfs 镜像：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span><span class="token comment"># dracut -v -add-drivers "x200" --filesystems "nfs" > initramfs-new.img &amp; (uname -r)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="systemd"><a class="markdownIt-Anchor" href="#systemd"></a> Systemd</h1>
<p>Systemd 是一种系统和服务管理器，是 Linux 系统中的一项关键技术。它可以用于启动、停止和管理系统进程、网络、文件系统和其他系统资源。Systemd 最初是为 Red Hat Linux 发行版设计的，但现在已被广泛采用，并被大多数 Linux 发行版所使用。</p>
<p>Systemd 的主要优势是速度和可靠性。它的启动速度远远快于传统的 init 系统，因为它能够并行启动多个服务。此外，Systemd 还提供了强大的日志功能和灵活的单元文件格式，可用于管理各种类型的服务和资源。</p>
<p>Systemd 还引入了一些新的概念，例如单元和片段。单元是 Systemd 中的基本单位，用于描述系统资源（例如服务、套接字、挂载点等）。片段是一种单元文件的组成部分，它可以被其他单元文件重用。这种灵活性使得 Systemd 能够更容易地管理和组织系统资源，使其更加模块化和可重用。</p>
<h2 id="启动流程"><a class="markdownIt-Anchor" href="#启动流程"></a> 启动流程</h2>
<p>在内核载入完毕硬件驱动后，采用 systemd 管理服务的启动流程如下：</p>
<ol>
<li>内核会主动调用第一个程序 systemd 执行 sysinit.target 初始化系统及 basic.target 准备系统；</li>
<li>接下来到<code>/usr/lib/systemd/system/</code>目录下去调用 multi-user.target(default.target)；</li>
<li>然后系统会到<code>/etc/systemd/system/multi-user.target.wants/</code>目录去找用户设置开机启动服务(unit)；</li>
<li>最后到<code>/usr/lib/systemd/system/multi-user.target.wants/</code>目录去找系统默认的开机启动服务(unit)；</li>
<li>（非必须）执行 graphical 需要的服务。</li>
</ol>
<p>至于最终启动的服务有哪些，可以用<code>systemctl list-dependencies</code>命令查询：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span><span class="token comment"># systemctl list-dependencies multi-user.target | grep target</span>
multi-user.target
● ├─basic.target
● │ ├─selinux-policy-migrate-local-changes@targeted.service
● │ ├─paths.target
● │ ├─slices.target
● │ ├─sockets.target
● │ ├─sysinit.target
● │ │ ├─cryptsetup.target
● │ │ ├─local-fs.target
● │ │ └─swap.target
● │ └─timers.target
● ├─getty.target
● └─remote-fs.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另外，为了兼容旧有的通过/etc/rc.d/rc.local 配置自启动脚本的方式，CentOS 7 保留了一个 rc-local.service 来执行这些脚本。</p>
<h2 id="启动相关目录"><a class="markdownIt-Anchor" href="#启动相关目录"></a> 启动相关目录</h2>
<p>开机会读取的文件目录如下：</p>
<ul>
<li><strong>/etc/modules-load.d/*.conf</strong>：配置内核需要加载的模块。</li>
<li><strong>/etc/modprobe.d/*.conf</strong>：可以设置模块参数的配置。</li>
<li><strong>/etc/sysconfig/</strong>：系统配置目录下有许多环境配置文件，其中一些重要的是：
<ul>
<li><strong>authconfig</strong>：用于规范用户身份认证机制，包括是否使用本地/etc/passwd，/etc/shadow 等文件以及密码记录使用的加密算法，是否使用外部密码服务器提供的账号验证（NIS、LDAP）等。</li>
<li><strong>cpupower</strong>：如果启动了 cpupower.service 服务，会读取此配置文件。</li>
<li><strong>firewalld、iptables-config、iptables-config、ebtables-config</strong>：与防火墙服务相关的配置。</li>
<li><strong>network-scripts</strong>：网卡设置。</li>
</ul>
</li>
</ul>
<h1 id="systemv"><a class="markdownIt-Anchor" href="#systemv"></a> SystemV</h1>
<p>System V (System 5) 是 Unix 操作系统中的一个初始化系统。它是早期 Unix 系统的标准初始化系统，常见于许多 Linux 发行版中。System V 通过运行一个脚本，逐个启动和停止系统服务来初始化系统。这些脚本通常存储在 <code>/etc/rc.d/init.d/</code> 目录下，每个脚本对应着一个系统服务。在系统启动或关闭时，System V 会根据 <code>/etc/inittab</code> 文件的配置来执行这些脚本。</p>
<p>System V 的缺点在于启动过程比较慢，因为它需要逐个启动和停止每个系统服务，这使得启动时间较长。此外，System V 在处理系统服务时需要手动编写脚本，并且难以处理服务之间的依赖关系，这可能导致系统启动失败或服务无法正常运行。由于这些缺点，现代 Linux 发行版逐渐转向使用 Systemd 作为默认初始化系统。</p>
<h2 id="启动流程-2"><a class="markdownIt-Anchor" href="#启动流程-2"></a> 启动流程</h2>
<p>在内核加载完硬件驱动后，内核会主动调用第一个进程/sbin/init。它最主要的功能是准备软件执行环境：</p>
<ol>
<li>init 取得默认执行等级，执行/etc/rc.d/rc.sysinit 文件来准备软件执行的操作环境（网络、时区等）；</li>
<li>init 执行 run level 的各个服务的启动（脚本方式）。例如执行等级是 5，则只执行 5:5:wait:/etc/rc.d/rc5 这行：
<ul>
<li>和 rc5 相关的脚本存放在/etc/rc5.d/下面，以 Kxx 开头的文件代表执行 stop，以 Sxx 开头代表执行 start 操作。</li>
<li>这些脚本全部是连接文件，连接到 stand alone 服务启动的目录/etc/init.d/内。</li>
<li>S 或 K 后面两位数字代表执行顺序，数字越小执行越早。</li>
</ul>
</li>
<li>设置好组合键功能和不断电系统 pf、pr 机制。</li>
<li>init 用户自定义脚本/etc/rc.d/rc.local 配置文件内的程序；</li>
<li>init 执行终端模拟程序 mingetty 来启动 login 进程。</li>
<li>（非必须）以/etc/X11/perfdm -nodaemon 启动图形界面。</li>
</ol>
<h2 id="启动相关目录-2"><a class="markdownIt-Anchor" href="#启动相关目录-2"></a> 启动相关目录</h2>
<p>开机用到的配置文件：</p>
<ul>
<li>
<p><strong>/etc/modprobe.conf</strong></p>
<p>定义开机要加载的模块，模块存放于 <code>/etc/sysconfig/modules/</code> 目录下。</p>
</li>
<li>
<p><strong>/etc/sysconfig/</strong>*</p>
<p>服务相关配置，重要的有：</p>
<ul>
<li><strong>authconfig</strong>：设置用户身份认证机制。</li>
<li><strong>clock</strong>：设置 Linux 主机的时区。</li>
<li><strong>i18n</strong>：设置语系。</li>
<li><strong>keyboard &amp; mouse</strong>：设置键盘与鼠标样式。</li>
<li><strong>network</strong>：设置网络启用、主机名和网关。</li>
<li><strong>network-scripts</strong>：设置网卡。</li>
</ul>
</li>
</ul>
<h2 id="init-配置文件"><a class="markdownIt-Anchor" href="#init-配置文件"></a> init 配置文件</h2>
<p>init 通过配置文件/etc/inittab 规划行动。配置文件每行内容由冒号:分隔四个字段：</p>
<ul>
<li>
<p><strong>设置选项</strong></p>
<p>最多四个字符，代表 init 的主要工作选项，只是一个说明。</p>
</li>
<li>
<p><strong>执行等级</strong></p>
<p>代表该选项在哪些执行等级下面运行，如果是 35 表示在执行等级 3 和 5 都会运行。</p>
</li>
<li>
<p><strong>init 的操作行为</strong></p>
<p>可设置的值有：</p>
<ul>
<li><strong>initdefault</strong>：默认执行等级设置值。</li>
<li><strong>sysinit</strong>：系统初始化的操作选项。</li>
<li><strong>ctrlaltdel</strong>：代表组合快捷键[Ctrl]+[Alt]+[Del]是否可以重新启动的设置。</li>
<li><strong>wait</strong>：代表后面设置的命令必须要执行完毕才能继续下面其他操作。</li>
<li><strong>respawn</strong>：代表后面的命令可以无限重启，例如 tty1。</li>
</ul>
</li>
<li>
<p><strong>命令选项</strong></p>
<p>执行的命令，通常是一些脚本。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
  <entry>
    <title>01.硬件基础</title>
    <url>/3847559470/</url>
    <content><![CDATA[<h1 id="计算机简介"><a class="markdownIt-Anchor" href="#计算机简介"></a> 计算机简介</h1>
<p>计算机是一种拥有输入和输出设备的机器，它可以通过输入设备接受用户的输入，并经过中央处理器的数学与逻辑单元的处理，将这些输入转换成有用的信息进行生成或储存。因此，计算机可以说是一种具有高度智能化的信息处理工具。</p>
<h2 id="计算机组成"><a class="markdownIt-Anchor" href="#计算机组成"></a> 计算机组成</h2>
<p>计算机通常由五大部分组成，它们分别是输入单元、输出单元、中央处理器（CPU）内部的控制单元、算术逻辑单元和内存。这些部分协同工作，使得计算机能够完成复杂的计算和数据处理任务。其中，输入单元用于接收用户的输入信息，输出单元用于向用户展示计算机处理结果，控制单元则负责控制计算机的整个运作过程，算术逻辑单元则处理计算机的算术和逻辑运算，而内存则用于储存数据和程序。这五大部分共同构成了现代计算机的核心。</p>
<h2 id="计算机分类"><a class="markdownIt-Anchor" href="#计算机分类"></a> 计算机分类</h2>
<p>根据用途的不同，计算机可以被分为以下几类：</p>
<ul>
<li>
<p><strong>超级计算机</strong>（Supercomputer）：</p>
<p>这是最快也最贵的计算机，通常用于需要进行高速计算的项目中，比如军事、气象、太空、模拟等。</p>
</li>
<li>
<p><strong>大型计算机</strong>（Mainframe Computer）：</p>
<p>这种计算机用于处理大规模的数据和复杂的运算，常见于证券、银行、大型企业数据库服务器等场所。</p>
</li>
<li>
<p><strong>迷你计算机</strong>（Minicomputer）：</p>
<p>迷你计算机是低配版的大型计算机，适用于那些场所环境要求不那么严格的场合，比如科研、工程分析、工厂等。</p>
</li>
<li>
<p><strong>工作站</strong>（Workstation）：</p>
<p>工作站是专门针对特定用途而设计的计算机，比如图形工作站、机器学习等。与个人电脑相比，工作站更强调稳定性。</p>
</li>
<li>
<p><strong>微型计算机</strong>（Microcomputer）：</p>
<p>微型计算机也称为个人计算机（PC），包括移动设备和桌面型电脑等。它们是普及度最高的计算机类型，广泛应用于个人和办公场所，具有性价比高和易于携带的优点。</p>
</li>
</ul>
<h1 id="cpu"><a class="markdownIt-Anchor" href="#cpu"></a> CPU</h1>
<p>中央处理器（CPU，Central Processing Unit）是计算机中最重要的组成部分之一，它是一个集成了微指令集和特定功能的芯片。CPU 通过执行指令来控制计算机的操作，包括算术逻辑运算、数据存储和检索等核心功能。因此，CPU 可以被认为是计算机的” 大脑 “，它的性能直接影响计算机的整体运行速度和效率。</p>
<h2 id="cpu-的组成单元"><a class="markdownIt-Anchor" href="#cpu-的组成单元"></a> CPU 的组成单元</h2>
<ul>
<li>
<p><strong>算术逻辑单元</strong></p>
<p>算术逻辑单元（ALU）是 CPU 中的一个重要组成部分，它主要负责执行算术运算和逻辑运算，如加、减、乘、除、与、或、非等。ALU 的运算结果将被存储在寄存器中，供其他单元继续使用。</p>
</li>
<li>
<p><strong>控制单元</strong></p>
<p>控制单元（CU）是 CPU 中的另一个重要组成部分，它主要负责协调和控制 CPU 各个单元之间的工作。CU 从内存中读取指令，并解析指令，然后根据指令的要求控制其他单元的操作。CU 还可以将运算结果写回内存或输出到外设。</p>
</li>
</ul>
<p>通过 ALU 和 CU 的紧密配合，CPU 能够实现各种复杂的计算和操作，从而实现计算机的各种功能。</p>
<h2 id="cpu-指令集"><a class="markdownIt-Anchor" href="#cpu-指令集"></a> CPU 指令集</h2>
<p>CPU 的指令集根据设计理念的不同，可以分为精简指令集（RISC）和复杂指令集（CISC）两种类型：</p>
<ul>
<li>
<p><strong>精简指令集（RISC，Reduced Instruction Set Computing）</strong></p>
<p>精简指令集的微指令集比较简单明了，每个指令的执行时间都很短，完成的操作比较单一，执行效率高。常见的 RISC CPU 包括 Sun 公司的 SPARC 系列（主要用于学术和银行等大型工作站）、IBM 公司的 Power Architecture（包括 PowerPC，例如索尼 PS 游戏机）和 ARM 系列（主要用于手机、网络设备等嵌入式系统）。</p>
</li>
<li>
<p><strong>复杂指令集（CISC，Complex Instruction Set Computer）</strong></p>
<p>复杂指令集的每个小指令可以执行一些较低阶的硬件操作，指令数目多而复杂，每条指令的长度不同，执行时间较长，但每个指令可以处理的工作较为丰富。常见的 CISC CPU 包括 AMD 和 Intel 的 x86、x64 架构处理器，其中 “x86” 是因为最早的 Intel 元组型号 8086 发展而来，架构从 8 位升级到 32 位，现在普遍使用的是 64 位 CPU，称为 x86_64 架构。</p>
</li>
</ul>
<p>不同的指令集在硬件设计和编程语言的选择上有所区别，选择适合自己需求的 CPU 和指令集对于系统的性能和稳定性有着重要的影响。</p>
<h2 id="微指令集"><a class="markdownIt-Anchor" href="#微指令集"></a> 微指令集</h2>
<p>除了硬件参数差异（比如二级缓存大小）外，不同 x86 架构的 CPU 还有微指令集的区别。例如，Intel 处理器具有独特的指令集，如用于虚拟化（Intel-VT）、视频硬解码（MMX，SSE）等，可以有效提高特定工作的运行效率。</p>
<p>选择适合自己需求的 CPU 和指令集对于系统的性能和稳定性都有着重要的影响。特定的微指令集能够支持特定的操作，例如 SSE 指令集可以提高多媒体应用程序的性能，因此在开发需要高性能计算的应用程序时需要仔细选择微指令集。</p>
<h2 id="多核心"><a class="markdownIt-Anchor" href="#多核心"></a> 多核心</h2>
<p>多核心是指将两个或更多的运算核心嵌入到一颗 CPU 封装中。与单核 CPU 相比，多核 CPU 可以同时执行更多的指令，从而提高系统的运行效率。多核心处理器广泛应用于需要高性能计算的领域，如科学研究、金融分析、人工智能等。同时，多核心处理器也可以提高普通用户在运行多任务时的体验，例如同时打开多个应用程序或运行多个虚拟机。</p>
<h2 id="cpu-频率"><a class="markdownIt-Anchor" href="#cpu-频率"></a> CPU 频率</h2>
<p>CPU 频率是指 CPU 每秒钟所执行的时钟周期数，通常以赫兹（Hz）为单位。频率越高表示 CPU 单位时间内可以执行更多的指令和计算任务。例如，CPU 的频率为 4.0 GHz 表示这颗 CPU 在一秒内可以执行 4 × 10^9 次时钟周期。</p>
<p>但是，CPU 频率并不是衡量 CPU 性能的唯一指标，还需要考虑 CPU 架构、核心数量、缓存大小、指令集支持等因素。相同频率的 CPU 在性能上可能存在巨大差异。因此，在选择 CPU 时需要全面考虑性能、功耗和预算等因素。</p>
<h2 id="南桥和北桥"><a class="markdownIt-Anchor" href="#南桥和北桥"></a> 南桥和北桥</h2>
<p>南桥和北桥是主板芯片组中的两个核心部件，它们起到协调 CPU 和其他系统组件之间通信的作用。</p>
<ul>
<li>
<p><strong>北桥</strong></p>
<p>北桥是主板芯片组中的一部分，负责连接 CPU 和内存、显卡等高速设备，以及提供系统总线。早期，北桥还包含了内存控制器等重要的子系统，但随着技术的进步，现在内存控制器已经整合到了 CPU 封装中，因此北桥的功能逐渐减弱。</p>
</li>
<li>
<p><strong>南桥</strong></p>
<p>南桥则负责连接低速设备接口，如硬盘、USB、网卡等，提供输入输出总线。此外，南桥还包括了一些重要的子系统，如硬盘控制器、USB 控制器、声卡等。</p>
</li>
</ul>
<p>在现代 CPU 架构中，北桥的功能已经被整合到了 CPU 封装中，因此南北桥已经不再是主板设计的必要组成部分。但是，南北桥的功能仍然存在于芯片组中，并且是支持 CPU 和其他系统组件之间通信的关键组件之一。</p>
<h2 id="32-位与-64-位"><a class="markdownIt-Anchor" href="#32-位与-64-位"></a> 32 位与 64 位</h2>
<p>CPU 的字组大小，也被称为 word size，指的是 CPU 每次能够处理的数据量。32 位 CPU 的字组大小基于 CPU 解析的大小，即 4 个字节。而 64 位 CPU 能够一次性读写 8 个字节（64 位）的数据。</p>
<p>通常情况下，CPU 的字组大小会影响总线宽度和内存读写能力。由于 32 位 CPU 的字组大小为 4 个字节，其最大寻址能力为 2^32 个字节，相当于 4GB。因此，最多只能支持 4GB 内存大小。相比之下，64 位 CPU 的字组大小为 8 个字节，其最大寻址能力为 2^64 个字节，相当于 16EB。因此，64 位 CPU 能够支持更大的内存容量。</p>
<h2 id="外频与倍频"><a class="markdownIt-Anchor" href="#外频与倍频"></a> 外频与倍频</h2>
<p>在早期的 CPU 架构中，北桥用于连接 CPU、内存和显卡设备，因此每个设备都必须与北桥连接，并且具有相同的工作频率。为了解决这个问题，前端总线（FSB，Front Side Bus）应运而生。然而，由于 CPU 的运算速度远远超过其他设备，因此需要使用外频和倍频来满足 FSB 的频率要求。</p>
<p>外频指的是 CPU 与外部元件进行数据传输时的速度。而倍频是 CPU 内部用来加速工作性能的一个倍数。</p>
<p>CPU 的实际频率可以通过以下公式计算：CPU 频率 = 外频 x 倍频。通过调整外频和倍频的值，可以提高 CPU 的性能。</p>
<h2 id="超线程"><a class="markdownIt-Anchor" href="#超线程"></a> 超线程</h2>
<p>超线程（HT，Hyper-Threading）是一种在 CPU 内部将重要的寄存器（register）分为两组的技术，使得每组寄存器都可以供程序使用。因此，两个程序可以同时竞争 CPU 的运算单元，而不需要通过操作系统的多任务切换。</p>
<p>通过 HT 机制，操作系统可以使用实际核心的两倍数量，并且让每个核心逻辑上分离。在支持多核心运行的程序时，只要运算达不到 100% 的 CPU 使用率，超线程确实能帮助提升执行速度，更好地利用 CPU 性能。</p>
<p>在某些情况下，超线程可能会降低性能，例如在 CPU 达到 100% 使用率时，超线程可能会增加 CPU 的开销并导致性能下降。</p>
<h2 id="多级缓存"><a class="markdownIt-Anchor" href="#多级缓存"></a> 多级缓存</h2>
<p>一般 CPU 拥有二级 (L2 Cache) 或更多级缓存，由比 DRAM 速度更快的静态随机访问内存 (SRAM, Static Random Access Memory) 组成，用于存放一些常用的数据。这样，数据可以不通过内存读取，从而大幅提升性能。</p>
<h1 id="内存"><a class="markdownIt-Anchor" href="#内存"></a> 内存</h1>
<p>CPU 处理的数据来源于内存，而处理完毕的数据也要先写回内存，再从内存传输到输出单元。</p>
<p>内存的主要组件是动态随机访问内存 (DRAM, Dynamic Random Access Memory)，只有在通电时才能记录和使用。由于断电后数据会消失，因此也被称为挥发性内存。</p>
<h2 id="内存类型"><a class="markdownIt-Anchor" href="#内存类型"></a> 内存类型</h2>
<p>内存从 SDRAM 发展为 DDR（Double Data Rate），也就是所谓的双倍数据传输速度 SDRAM，它可以在一次工作周期中进行两次数据传输。</p>
<p>例如 DDR400 的内存，代表数据宽度为 64bit，外频为 200MHz，频率为 400MHz，频宽为 3.2GB/s。</p>
<h2 id="内存速度"><a class="markdownIt-Anchor" href="#内存速度"></a> 内存速度</h2>
<p>内存工作频率由 CPU 内的内存控制器决定。例如，假如内存频率为 1600MHz，总线宽度为 64bit，理论最大传输速度为：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1600</mn><mi>M</mi><mi>H</mi><mi>z</mi><mo>∗</mo><mn>64</mn><mi>b</mi><mi>i</mi><mi>t</mi><mo>=</mo><mn>1600</mn><mi>M</mi><mi>H</mi><mi>z</mi><mo>∗</mo><mn>8</mn><mi>B</mi><mi>y</mi><mi>t</mi><mi>e</mi><mi>s</mi><mo>=</mo><mn>12800</mn><mi>M</mi><mi>B</mi><mi mathvariant="normal">/</mi><mi>s</mi><mo>=</mo><mn>12.8</mn><mi>G</mi><mi>B</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">1600MHz * 64bit = 1600MHz * 8Bytes = 12800MB/s = 12.8GB/s
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">4</span><span class="mord mathnormal">b</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">8</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">8</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">/</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">.</span><span class="mord">8</span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">/</span><span class="mord mathnormal">s</span></span></span></span></span></p>
<h2 id="多通道设计"><a class="markdownIt-Anchor" href="#多通道设计"></a> 多通道设计</h2>
<p>当两条同样的内存插入支持内存双通道的主板中时，总线宽度由 64bit 升级到 128bit，传输速度翻倍。这是双通道内存的设计理念。</p>
<p>除了双通道外，服务器提供三信道甚至四信道的内存环境。</p>
<h2 id="物理地址扩展"><a class="markdownIt-Anchor" href="#物理地址扩展"></a> 物理地址扩展</h2>
<p>物理地址扩展（PAE）是基于 x86 服务器的一种功能，它使运行 Windows Server 版本的计算机可以支持 4GB 以上物理内存。物理地址扩展允许将最多 64GB 的物理内存用作常规的 4 KB 页面，并扩展内核能使用的位数以将物理内存地址从 32 位扩展到 36 位。</p>
<h1 id="主板"><a class="markdownIt-Anchor" href="#主板"></a> 主板</h1>
<p>主板（Mainboard）是一种电脑硬件，由芯片组构成，用于沟通和连接各种设备，为 CPU 提供支持和资源。</p>
<p>现代主板一般集成了许多设备元件，如声卡、网卡、显卡、磁盘整合卡等。</p>
<h2 id="cmos-芯片"><a class="markdownIt-Anchor" href="#cmos-芯片"></a> CMOS 芯片</h2>
<p>CMOS 芯片是一种低功耗的、非易失性的芯片，它用于记录主板的重要参数，例如系统时间、CPU 频率、设备 I/O 地址和 IRQ 等信息。由于这些参数需要在断电后仍能保持，CMOS 芯片需要额外的电子供电来保存这些设置。</p>
<h2 id="bios"><a class="markdownIt-Anchor" href="#bios"></a> BIOS</h2>
<p>BIOS (Basic Input Output System) 是一种固化在主板上的程序，用于初始化和测试硬件设备，加载操作系统，并提供各种底层服务和功能。BIOS 存储在闪存（Flash Memory）或 EEPROM 中，可以在开机时被执行。主要用途是加载和修改 CMOS（Complementary Metal-Oxide Semiconductor）中的参数，例如系统时间、CPU 频率、设备 I/O 地址和 IRQ 等。同时，BIOS 也尝试调用存储设备中的开机程序，以启动操作系统。</p>
<p>通常在开机时按下 [del] 键或 [F1] 键可以进入 BIOS 设置界面，进行各种参数设置和硬件配置。</p>
<h2 id="uefi"><a class="markdownIt-Anchor" href="#uefi"></a> UEFI</h2>
<p>UEFI (Unified Extensible Firmware Interface) 是新一代的固件接口标准，相比于传统的 BIOS 更加先进。UEFI 可以使用一个特制的 shell 来做一些管理工作。</p>
<h2 id="固件"><a class="markdownIt-Anchor" href="#固件"></a> 固件</h2>
<p>固件 (firmware) 是绑定在硬件上的控制软件，例如磁盘阵列卡、网卡等。通常储存在只读存储器 (Read Only Memory, ROM) 中，以保证固件的安全性。</p>
<h2 id="pci-插槽"><a class="markdownIt-Anchor" href="#pci-插槽"></a> PCI 插槽</h2>
<p>主板上的扩展插槽主要有 PCI 和 PCI-E 两种类型，它们的速度和频宽如下：</p>
<table>
<thead>
<tr>
<th>规格</th>
<th>宽度 (bit)</th>
<th>速度 (MHz)</th>
<th>频宽</th>
</tr>
</thead>
<tbody>
<tr>
<td>PCI</td>
<td>32</td>
<td>33</td>
<td>133MB/s</td>
</tr>
<tr>
<td>PCI 2.2</td>
<td>64</td>
<td>66</td>
<td>533MB/s</td>
</tr>
<tr>
<td>PCI-X</td>
<td>64</td>
<td>133</td>
<td>1064MB/s</td>
</tr>
<tr>
<td>AGP 4x</td>
<td>32</td>
<td>66x4</td>
<td>1066MB/s</td>
</tr>
<tr>
<td>AGP 8x</td>
<td>32</td>
<td>66x8</td>
<td>2133MB/s</td>
</tr>
<tr>
<td>PCI-E x1</td>
<td></td>
<td></td>
<td>250MB/s</td>
</tr>
<tr>
<td>PCI-E x8</td>
<td></td>
<td></td>
<td>2GB/s</td>
</tr>
<tr>
<td>PCI-E 2.0 x8</td>
<td></td>
<td></td>
<td>4GB/s</td>
</tr>
<tr>
<td>PCI-E 3.0 x8</td>
<td></td>
<td></td>
<td>8GB/s</td>
</tr>
<tr>
<td>PCI-E 4.0 x8</td>
<td></td>
<td></td>
<td>16GB/s</td>
</tr>
</tbody>
</table>
<p>一般来说，PCI-E 的规格由插槽的长度决定，PCI-E 插槽的工作模式可以参考主板的说明书。如果将一个速度为 x16 的设备插在一个速度为 x8 的 PCI-E 插槽上，该设备将以 x8 的速度运行。</p>
<p>例如，一个 CPU 通常支持 16 个信道（PCI-E 3.0 x16），如果主板上有三个 PCI-E 插槽，那么 PCI-E 插槽的速度可以工作在以下模式：1 x16，2 x8，1 x8 + 2 x4，具体取决于插入的设备数量。</p>
<h2 id="usb-接口"><a class="markdownIt-Anchor" href="#usb-接口"></a> USB 接口</h2>
<p>USB 接口一般用来连接 U 盘、移动硬盘盒、键盘、鼠标等设备。各版本的带宽与速度对比如下：</p>
<table>
<thead>
<tr>
<th>版本</th>
<th>带宽</th>
<th>速度 (MB/s)</th>
</tr>
</thead>
<tbody>
<tr>
<td>USB 1.0</td>
<td>12 Mbit/s</td>
<td>1.5</td>
</tr>
<tr>
<td>USB 2.0</td>
<td>480 Mbit/s</td>
<td>60</td>
</tr>
<tr>
<td>USB 3.0</td>
<td>5 Gbit/s</td>
<td>500</td>
</tr>
<tr>
<td>USB 3.1</td>
<td>10 Gbit/s</td>
<td>1000</td>
</tr>
</tbody>
</table>
<p>为了方便区分版本，主板给 USB 接口采用不同颜色进行显示：白色代表 USB 2.0，蓝色代表 USB 3.0，红色代表 USB 3.1。</p>
<h2 id="其他接口"><a class="markdownIt-Anchor" href="#其他接口"></a> 其他接口</h2>
<p>主板上常见的其他接口如下：</p>
<ul>
<li>
<p><strong>音频输入与输出</strong></p>
<p>一些 3.5mm 圆形插孔，一般用绿色表示耳机插孔，粉红色表示麦克风输入插孔。</p>
</li>
<li>
<p><strong>RJ-45 网络接口</strong></p>
<p>方形接口，用来插入网线。</p>
</li>
<li>
<p><strong>HDMI 接口</strong></p>
<p>HDMI 接口一般用于视频输出。如果主板上有板载显卡，一般会提供该接口。</p>
</li>
</ul>
<h2 id="设备-io-地址与-irq-中断信道"><a class="markdownIt-Anchor" href="#设备-io-地址与-irq-中断信道"></a> 设备 I/O 地址与 IRQ 中断信道</h2>
<p>主板芯片组通过 I/O 地址和 IRQ 中断信道来控制设备。</p>
<ul>
<li>
<p><strong>I/O 地址</strong></p>
<p>I/O 地址用来标识对应的设备，如果两个设备使用相同的 I/O 地址会造成地址冲突，导致设备无法正常工作。</p>
</li>
<li>
<p><strong>IRQ 中断信道</strong></p>
<p>IRQ 用来标识设备工作状态，以方便 CPU 分配工作任务。每个设备都有自己的 IRQ 中断信道，当设备需要 CPU 处理时，会通过 IRQ 向 CPU 发出中断请求。CPU 会停止当前的任务，处理中断请求，并在完成处理后返回原先的任务。</p>
</li>
</ul>
<h1 id="显卡"><a class="markdownIt-Anchor" href="#显卡"></a> 显卡</h1>
<p>显卡是计算机中的一种重要的组件，主要负责图像和影像的显示，也被称为视频显卡（Video Card）或图形加速卡（Graphics Card）。</p>
<h2 id="显存"><a class="markdownIt-Anchor" href="#显存"></a> 显存</h2>
<p>由于每个图像需要占用内存空间来存储颜色信息，因此显卡上有一个专门用于存储图像信息的内存，称为显存。</p>
<h2 id="gpu"><a class="markdownIt-Anchor" href="#gpu"></a> GPU</h2>
<p>除了负责图像显示，显卡上还有一个专门用于进行 3D 运算的加速芯片，称为 GPU。</p>
<h2 id="显卡插槽"><a class="markdownIt-Anchor" href="#显卡插槽"></a> 显卡插槽</h2>
<p>由于显卡需要大量的数据传输，因此使用能提供高带宽的 PCI-E 插槽。</p>
<h2 id="显卡接口"><a class="markdownIt-Anchor" href="#显卡接口"></a> 显卡接口</h2>
<p>常见显卡上用来连接显示器的接口如下:</p>
<ul>
<li>
<p><strong>D-Sub(VGA)</strong></p>
<p>是较早之前的连接接口，主要为 15 针的连接，用于模拟信号传输。</p>
</li>
<li>
<p><strong>DVI</strong></p>
<p>有提供数字传输的 DVI-D 和整合数字和模拟传输的 DVI-I 两种类型。</p>
</li>
<li>
<p><strong>HDMI</strong></p>
<p>可以同时传输图像和声音。</p>
</li>
<li>
<p><strong>DP(DisplayPort)</strong></p>
<p>类似于 HDMI。</p>
</li>
</ul>
<h1 id="硬盘"><a class="markdownIt-Anchor" href="#硬盘"></a> 硬盘</h1>
<p>硬盘是计算机中用于存储数据的设备，一般分为机械硬盘和固态硬盘。</p>
<h2 id="机械硬盘的组成"><a class="markdownIt-Anchor" href="#机械硬盘的组成"></a> 机械硬盘的组成</h2>
<p>传统机械硬盘（HDD，Hard Disk Drive）的物理结构如下：</p>
<ul>
<li>
<p><strong>盘片</strong></p>
<p>数据记录介质，可以有一个或多个盘片。</p>
</li>
<li>
<p><strong>主轴电机</strong></p>
<p>带动盘片旋转，转速越高，读写速度越快。常见的转速有 7200 rpm（转 / 分钟）和 5400 rpm。</p>
</li>
<li>
<p><strong>读写磁头</strong></p>
<p>读取和写入数据，每个盘片面都有一个磁头。</p>
</li>
<li>
<p><strong>机械臂</strong></p>
<p>控制磁头的位置，使其能够读取或写入指定的盘片面。</p>
</li>
</ul>
<p>此外，硬盘电路板上还有一个小容量的闪存用作缓冲内存，用于临时提高硬盘性能。</p>
<p>机械硬盘非常脆弱，因此在通电状态下绝对不要发生碰撞或直接拔插电源线。否则可能会导致逻辑坏道（文件系统损坏）或物理坏道。</p>
<h2 id="机械硬盘盘片"><a class="markdownIt-Anchor" href="#机械硬盘盘片"></a> 机械硬盘盘片</h2>
<p>机械硬盘盘片的表面结构如下：</p>
<ul>
<li>
<p><strong>扇区（sector）</strong></p>
<p>盘片同心圆上切出的小块区域，是硬盘的最小物理存储单元。传统硬盘的扇区容量为 512 字节，而现代硬盘则采用了 4KB 扇区设计。</p>
</li>
<li>
<p><strong>磁道（track）</strong></p>
<p>盘片同心圆上的一个圆环，由一系列相同半径的扇区组成。</p>
</li>
<li>
<p><strong>柱面（cylinder）</strong></p>
<p>所有盘片同心圆上的同一磁道就构成一个柱面。</p>
</li>
</ul>
<p>由于同心圆外圈的扇区比内圈的扇区多，因此硬盘的数据读写是从外向内进行的。</p>
<p>传统机械硬盘的容量计算公式为：磁头数 * 柱面 * 扇区数 * 512Bytes</p>
<h2 id="硬盘传输接口"><a class="markdownIt-Anchor" href="#硬盘传输接口"></a> 硬盘传输接口</h2>
<p>硬盘与主板连接接口经过多次改版，目前主流的有 SATA 和 SAS 接口。</p>
<ul>
<li>
<p><strong>IDE 接口</strong></p>
<p>使用的平行线可以连接两个设备，因此有主 / 从 (Master/Slave) 构架，可以通过跳针设置。</p>
<p>接口传输速度为 Ultra 133 规格，理论速度最高 133MB/s。</p>
</li>
<li>
<p><strong>SATA 接口</strong></p>
<p>在家用机上 IDE 接口的替代接口。SATA 的平行线将数据传输和供电分开。一条平行线对应一个设备，没有跳针设计。</p>
<p>目前主流使用的 SATA 3.0 版本传输速度为 600MB/s。</p>
</li>
<li>
<p><strong>SCSI 接口</strong></p>
<p>在以前服务器硬盘常用接口。硬盘在控制器上含有一块处理器，用来支持一些高级功能。</p>
</li>
<li>
<p><strong>SAS 接口</strong></p>
<p>SAS（Serial Attached SCSI）是串行式 SCSI 的意思，目前已在服务器领域全面取代了 SCSI。</p>
<p>SAS 3.0 的传输速度能达到 1200MB/s。</p>
</li>
</ul>
<h2 id="固态硬盘"><a class="markdownIt-Anchor" href="#固态硬盘"></a> 固态硬盘</h2>
<p>固态硬盘 (SSD, Solid State Disk) 以 NAND 闪存作为储存介质，因此不存在机械硬盘的磁头、盘片等结构，也没有数据分散的问题，读写速度和延迟时间比机械硬盘更优秀。</p>
<p>固态硬盘的寿命和速度取决于使用的内存颗粒类型，常见的类型从好到差分别为 SLC、MLC、TLC、QLC。</p>
<p>一般而言，电脑使用固态硬盘作为系统盘，数据储存在机械硬盘上，可以有效提升整个系统性能。</p>
<h1 id="电源"><a class="markdownIt-Anchor" href="#电源"></a> 电源</h1>
<p>电源供应器（Power Supply Unit，PSU）用于给主板、CPU、显卡和硬盘等硬件供电。选择质量好的电源可以有效降低硬件意外损坏的概率。</p>
<p>如果使用诸如 AIDA 等软件对未超频的电脑进行测试时，在测试过程中出现中途断电或重启等情况，说明电源的额定功率不够或者不稳定。需要减少设备连接或者更换更高功率的电源。</p>
<p>在选购电源时，除了考虑电源的额定功率之外，还需要考虑能源转换率，也就是 $ 输入功率 / 输出功率 $ 的值。转换率值越大越好。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
  <entry>
    <title>03.Linux 终端操作</title>
    <url>/1784829336/</url>
    <content><![CDATA[<h1 id="终端类型"><a class="markdownIt-Anchor" href="#终端类型"></a> 终端类型</h1>
<p>只使用文本的终端被称为字符终端（Character Terminal）或基于文本的终端（Text-Based Terminal），统称命令行界面（CLI，命令行界面）。其硬件设备标准代表是 DEC 公司 1978 年生产的 VT100。</p>
<p>图形终端(Graphics Terminal)不仅可以处理文本，还可以显示任何能使用小点在屏幕上进行绘制的内容，也就是可以通过图形用户界面（GUI，图形用户界面）和服务端交互。Unix 的 GUI 都基于 X 终端。</p>
<p>可以通过查看 <code>$TERM</code> 变量来了解当前使用的终端配置文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server3 ~<span class="token punctuation">]</span><span class="token comment"># echo $TERM</span>
vt100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="常用组合快捷键"><a class="markdownIt-Anchor" href="#常用组合快捷键"></a> 常用组合快捷键</h1>
<p>在终端中常用的快捷键如下：</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>【Tab】</td>
<td>命令补全/文件名补齐</td>
</tr>
<tr>
<td>【Ctrl】+C</td>
<td>中断操作，停止程序运行</td>
</tr>
<tr>
<td>【Ctrl】+D</td>
<td>键盘输入结束/退出终端/删除光标后字符</td>
</tr>
<tr>
<td>【Ctrl】+Z</td>
<td>暂停当前进程并丢入后台</td>
</tr>
<tr>
<td>【Ctrl】+S</td>
<td>暂停当前程序，暂停后按下任意键恢复运行</td>
</tr>
<tr>
<td>【Ctrl】+A</td>
<td>将光标移动到命令行首</td>
</tr>
<tr>
<td>【Ctrl】+E</td>
<td>将光标移动到命令行尾</td>
</tr>
<tr>
<td>【Ctrl】+L</td>
<td>清屏</td>
</tr>
<tr>
<td>【Ctrl】+【Shift】+N</td>
<td>新建终端窗口</td>
</tr>
</tbody>
</table>
<h1 id="命令提示符"><a class="markdownIt-Anchor" href="#命令提示符"></a> 命令提示符</h1>
<p>成功登录系统后显示如下:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>各字段说明如下：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>root</td>
<td>标识登录的用户</td>
</tr>
<tr>
<td>101c7</td>
<td>主机名</td>
</tr>
<tr>
<td>~</td>
<td>当前处于的目录。~表示当前用户目录，它是个变量</td>
</tr>
<tr>
<td>#</td>
<td>表示登录用户为 root，如果是普通用户用$表示</td>
</tr>
</tbody>
</table>
<h1 id="命令格式"><a class="markdownIt-Anchor" href="#命令格式"></a> 命令格式</h1>
<p>一般命令格式如下，中括号 [] 表示非必须输入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">命令名称 <span class="token punctuation">[</span>-选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>参数1<span class="token punctuation">]</span> <span class="token punctuation">[</span>参数2<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="命令名称"><a class="markdownIt-Anchor" href="#命令名称"></a> 命令名称</h2>
<p>一行命令第一个输入的部分绝对是命令（command）或可执行文件。</p>
<p>当命令太长时，可以使用反斜杠 \ 来转义回车（必须立刻接特殊字符才能转义），使命令输入连续到下一行。</p>
<p>命令严格区分大小写，通常由小写字母构成。</p>
<h2 id="选项"><a class="markdownIt-Anchor" href="#选项"></a> 选项</h2>
<p>选项（options）前通常会加 - 号，例如 -h。</p>
<p>有时表示输入选项完整全名，则使用 – 符号，例如 --help。</p>
<p>多个选项可以用一个 - 连起来。</p>
<h2 id="参数"><a class="markdownIt-Anchor" href="#参数"></a> 参数</h2>
<p>参数（parameter）依附在选项或是命令后面，用来向希望运行的程序传递信息。</p>
<p>通常参数是一些文件名，告诉命令从哪里可以得到输入，以及把输出送到什么地方。</p>
<p>参数之间用空格隔开，多个空格会被视为一个空格。</p>
<h1 id="执行命令"><a class="markdownIt-Anchor" href="#执行命令"></a> 执行命令</h1>
<p>在命令行执行命令时，有两种情况：</p>
<ul>
<li>按下回车键后命令立即运行，直接显示结果，等待下一条命令输入。</li>
<li>进入到该命令的环境，直到结束该命令才回到命令提示符的环境。</li>
</ul>
<p>命令在正常执行后返回一个 0 值，表示执行成功。如果命令执行过程中出错没有完成全部工作，则返回一个非零值(可用变量$?查看)。</p>
<h2 id="命令执行顺序"><a class="markdownIt-Anchor" href="#命令执行顺序"></a> 命令执行顺序</h2>
<p>按优先级排列:</p>
<ol>
<li>以相对/绝对路径执行命令，例如 /bin/ls 或 ls；</li>
<li>由别名(alias)找到该命令来执行；</li>
<li>由 bash 内置的(builtin)命令来执行；</li>
<li>通过 $PATH 这个变量的顺序找到的第一个命令来执行。</li>
</ol>
<h2 id="执行多条命令"><a class="markdownIt-Anchor" href="#执行多条命令"></a> 执行多条命令</h2>
<p>可以用分号将多条命令写在同一行，这些命令将会依次执行。</p>
<p>例如查看 root.txt 文件属性；修改其权限为 6755；再次查看 root.txt 的属性：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span><span class="token comment"># ll root.txt ; chmod 6775 root.txt ; ll root.txt </span>
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">7549</span> Sep <span class="token number">11</span> <span class="token number">11</span>:59 root.txt
-rwsrwsr-x. <span class="token number">1</span> root root <span class="token number">7549</span> Sep <span class="token number">11</span> <span class="token number">11</span>:59 root.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="报错信息"><a class="markdownIt-Anchor" href="#报错信息"></a> 报错信息</h2>
<p>以下是两条报错信息:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>user1@101c7 root<span class="token punctuation">]</span>$ <span class="token function">cat</span> nohup.out <span class="token punctuation">;</span> catt
cat: nohup.out: Permission denied
bash: catt: <span class="token builtin class-name">command</span> not found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>其使用冒号:分隔成三段，分别表示：命令、参数和报错原因。</p>
<h1 id="命令别名"><a class="markdownIt-Anchor" href="#命令别名"></a> 命令别名</h1>
<p>使用命令 alias 可以为命令或一组命令指定自定义名称。例如，将命令<code>ll -a | more</code>设置为 lm：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span><span class="token comment"># alias lm='ll -a | more'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>要查询已定义的别名，可以使用-p 参数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span><span class="token comment"># alias -p</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">cp</span><span class="token operator">=</span><span class="token string">'cp -i'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">egrep</span><span class="token operator">=</span><span class="token string">'egrep --color=auto'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>要取消别名，使用 unalias 命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span><span class="token comment"># unalias lm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果要临时挂起别名，例如想要使用原始的 ls 命令，而不是带有–color=auto 参数的别名 ls，在命令前面加上\字符：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server3 ~<span class="token punctuation">]</span><span class="token comment"># \ls -la</span>
total <span class="token number">64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="历史命令"><a class="markdownIt-Anchor" href="#历史命令"></a> 历史命令</h1>
<p>使用快捷键[Ctrl]+r 可以搜索历史命令记录。搜索结果继续按[Ctrl]+r 显示上一个找到的命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>reverse-i-search<span class="token punctuation">)</span>`history': <span class="token function">history</span> <span class="token operator">|</span> <span class="token function">grep</span> dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以使用<code>history</code>命令查询输入过的历史命令列表。默认情况下，历史命令保存在 ~/.bash_history 中。只有在注销登录后，此次会话所执行的命令才会写入文件中。</p>
<p>可用参数:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-c</td>
<td>清除所有记录。</td>
</tr>
<tr>
<td>-d</td>
<td>删除指定编号的命令记录。</td>
</tr>
<tr>
<td>-a</td>
<td>插入当前历史记录到指定文件末尾，默认会将此次会话的历史记录写入到.bash_history 文件中。</td>
</tr>
<tr>
<td>-w</td>
<td>写入当前的历史记录到指定文件中。</td>
</tr>
</tbody>
</table>
<p>例如，要显示最近的 5 条历史记录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span><span class="token comment"># history 5</span>
  <span class="token number">888</span>  <span class="token function">date</span>
  <span class="token number">889</span>  <span class="token function">time</span>
  <span class="token number">890</span>  w <span class="token parameter variable">-i</span>
  <span class="token number">891</span>  <span class="token function">cat</span> .bash_history 
  <span class="token number">892</span>  <span class="token function">history</span> <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-n5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以通过 !记录编号 直接执行对应的命令。例如，要重新运行第 890 条记录，可以输入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span><span class="token comment"># !890</span>
w <span class="token parameter variable">-i</span>
<span class="token number">23</span>:41:23 up <span class="token number">1</span> day,  <span class="token number">8</span>:32,  <span class="token number">2</span> users,  load average: <span class="token number">0.00</span>, <span class="token number">0.01</span>, <span class="token number">0.05</span>
<span class="token environment constant">USER</span>     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
root     pts/0    <span class="token number">192.168</span>.2.101    04:01    <span class="token number">3</span>.00s  <span class="token number">0</span>.84s  <span class="token number">0</span>.00s w <span class="token parameter variable">-i</span>
root     pts/1    <span class="token number">192.168</span>.2.101    <span class="token number">15</span>:12    <span class="token number">8</span>:28m  <span class="token number">0</span>.01s  <span class="token number">0</span>.01s <span class="token parameter variable">-bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果使用 !!，则会执行上一个命令。</p>
<h1 id="清屏"><a class="markdownIt-Anchor" href="#清屏"></a> 清屏</h1>
<p>直接输入 clear 命令能清屏：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span><span class="token comment"># clear</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
  <entry>
    <title>05.磁盘分区知识</title>
    <url>/3200821655/</url>
    <content><![CDATA[<h1 id="磁盘设备名"><a class="markdownIt-Anchor" href="#磁盘设备名"></a> 磁盘设备名</h1>
<p>在新版 Linux 中，IDE 和 SATA 的磁盘命名没有区别。</p>
<h2 id="ide-接口硬盘"><a class="markdownIt-Anchor" href="#ide-接口硬盘"></a> IDE 接口硬盘</h2>
<p>由于一个 IDE 接口可以连接两个 IDE 设备，一般主板可以接 4 个 IDE 设备。在系统中，IDE 设备的命名如下：</p>
<table>
<thead>
<tr>
<th><strong>IDE(Jumper)</strong></th>
<th><strong>Master</strong></th>
<th><strong>Slave</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>IDE1(Primary)</td>
<td>/dev/hda</td>
<td>/dev/hdb</td>
</tr>
<tr>
<td>IDE2(Secondary)</td>
<td>/dev/hdc</td>
<td>/dev/hdd</td>
</tr>
</tbody>
</table>
<h2 id="sata-接口硬盘"><a class="markdownIt-Anchor" href="#sata-接口硬盘"></a> SATA 接口硬盘</h2>
<p>SATA 接口设备名由 Linux 内核检测到磁盘的顺序从 a 开始排列，与插槽号无关。例如，两块磁盘插到 SATA1 和 SATA5 插槽上，系统中识别为 sda 和 sdb。</p>
<h1 id="磁盘阵列"><a class="markdownIt-Anchor" href="#磁盘阵列"></a> 磁盘阵列</h1>
<p>磁盘阵列（RAID，Redundant Arrays of Inexpensive Disks）即容错廉价磁盘阵列，指通过一些技术（软件或硬件）将多个较小的磁盘整合成一个较大的磁盘设备，并且具有一定数据保护的功能。</p>
<h2 id="磁盘阵列等级"><a class="markdownIt-Anchor" href="#磁盘阵列等级"></a> 磁盘阵列等级</h2>
<p>常见磁盘阵列等级有：</p>
<ul>
<li>
<p><strong>RAID 0</strong>（等量模式，stripe）</p>
<p>此模式下，RAID 会将磁盘先切出等量的区块（名为 chunk，大小 4KB ~ 1MB），写入文件时，该文件依据块大小切割好，依序放到各个磁盘中去。</p>
<p>磁盘可用容量为所有磁盘容量之和。</p>
<p>读写性能最佳。</p>
<p>安全性最糟，任意一块磁盘损坏，所有文件数据将缺损，所有数据都会丢失。</p>
</li>
<li>
<p><strong>RAID 1</strong>（映像模式，mirror）</p>
<p>此模式让同一份数据完整保存在两块磁盘上面，写入文件时，该文件复制为两份，并分别写入到各个磁盘中去。</p>
<p>磁盘可用容量为所有磁盘容量之和的一半。</p>
<p>写性能在使用软阵列时不好，因为南桥芯片的 I/O 性能有限，同时写入会导致带宽不够。读取性能和 RAID 0 一样。</p>
<p>安全性最好。</p>
</li>
<li>
<p><strong>RAID 0+1</strong>，<strong>RAID 1+0</strong></p>
<p>所谓 RAID 0+1 就是先让两块磁盘组成 RAID 0，再将两组 RAID 0 组成一组 RAID 1。RAID 1+0 则是先组 RAID 0，再组成 RAID 1。</p>
<p>磁盘可用容量和 RAID 1 一样只有一半可用。</p>
<p>读写性能和 RAID 0 一样。</p>
<p>安全性和 RAID 1 一样。</p>
</li>
<li>
<p><strong>RAID 5</strong></p>
<p>至少需要三块以上磁盘才能组建。在每个循环的写入过程中，每块磁盘还加入一个同位检查数据（Parity），这个数据会记录其他磁盘的备份数据，用于磁盘损坏时的恢复。</p>
<p>磁盘可用容量为总磁盘容量减一块磁盘容量。</p>
<p>读写取性能介于 RAID 1 和 RAID 0 之间。</p>
<p>安全性能方面，只接受损坏不超过一块的硬盘情况下恢复数据。</p>
</li>
</ul>
<h2 id="预备磁盘"><a class="markdownIt-Anchor" href="#预备磁盘"></a> 预备磁盘</h2>
<p>磁盘阵列中的磁盘损坏时，可更换坏掉的磁盘并插入新的磁盘，磁盘阵列会主动重建数据。这通常需要在关机重启时进行，但 SAS 支持热插拔，可以避免重启。</p>
<p>为实现系统实时主动重建，需要预备磁盘。预备磁盘是指一块或多块未包含在原磁盘阵列等级中的磁盘。只有在磁盘阵列中出现磁盘损坏时，才会主动将预备磁盘引入磁盘阵列中进行数据重建。</p>
<h2 id="磁盘阵列类型"><a class="markdownIt-Anchor" href="#磁盘阵列类型"></a> 磁盘阵列类型</h2>
<p>磁盘整列有两种组建方式：</p>
<ul>
<li>
<p><strong>硬件磁盘阵列</strong>(hardware)</p>
<p>硬件磁盘阵列通过磁盘阵列卡完成组建任务，拥有专门芯片来处理 RAID 任务。性能比较好，例如用来处理 RAID 5 的同位检查码计算，并不会重复消耗原本系统的 I/O 总线。硬件磁盘阵列的设备文件名为/dev/sd[a-p]。</p>
</li>
<li>
<p><strong>软件磁盘阵列</strong>(software)</p>
<p>软件磁盘阵列利用软件来仿真磁盘阵列功能，与 CPU 运算和 I/O 总线速度关系很大。在 CentOS 中提供的软件磁盘阵列软件为 mdadm，支持以分区为单位组建 RAID0/1/5 等。软件磁盘阵列使用的设备文件名是系统的设备文件/dev/md[0-1]。</p>
</li>
</ul>
<h1 id="逻辑卷管理器"><a class="markdownIt-Anchor" href="#逻辑卷管理器"></a> 逻辑卷管理器</h1>
<p>逻辑卷管理器（LVM，Logical Volume Manager）通过软件组合几个物理分区（PV），将它们称为一块看起来是独立的大磁盘（VG），然后再将这块大磁盘分成可使用分区（LV），最终挂载使用。</p>
<h2 id="物理卷"><a class="markdownIt-Anchor" href="#物理卷"></a> 物理卷</h2>
<p>物理卷（PV，Physical Volume）分区需要通过 fdisk 调整系统标识符（system ID）为 8e（LVM 的标识符），然后通过 pvcreate 命令将其转换为 LVM 的最底层物理卷（PV），才能利用这些 PV。</p>
<h2 id="卷用户组"><a class="markdownIt-Anchor" href="#卷用户组"></a> 卷用户组</h2>
<p>LVM 将许多 PV 整合成卷用户组(VG，Volume Group)，在 32 位系统下每个 VG 最多仅能包含 65534 个 PE。如果使用 LVM 默认参数，则一个 VG 最大可达 256GB 容量。在 64 位系统下已不存在限制。</p>
<h2 id="物理扩展块"><a class="markdownIt-Anchor" href="#物理扩展块"></a> 物理扩展块</h2>
<p>LVM 默认使用 4MB 的物理扩展块（PE，即 Physical Extent），它是整个 LVM 中最小的存储块，类似于文件系统中的 block 大小。</p>
<h2 id="逻辑卷"><a class="markdownIt-Anchor" href="#逻辑卷"></a> 逻辑卷</h2>
<p>VG 会被切分成逻辑卷（LV，即 Logical Volume），这个 LV 就是最后可以被格式化使用的分区。</p>
<p>LV 的大小与此 LV 内的 PE 总数有关。</p>
<p>为了方便用户利用 LVM 管理其系统，LV 的设备文件名通常指定为 /dev/vgname/lvname 的样式。</p>
<p>更改文件系统容量本质是通过交换 PE 来进行数据转换，将原本 LV 内的 PE 转移到其他设备中以降低 LV 容量，或将其他设备的 PE 加到此 LV 中以增大容量。</p>
<p>对 LV 数据写入机制有两种：</p>
<ul>
<li>
<p><strong>线性模式</strong>（linear）：</p>
<p>如果有两个分区 sdb1 和 sdb2 加入到 VG 中，并且整个 VG 只有一个 LV 时，数据会先将 sdb1 写满，再开始写 sdb2。</p>
</li>
<li>
<p><strong>交错模式</strong>（striped）：</p>
<p>类似于 RAID 0 的模式，同时向两个分区内写入数据。</p>
</li>
</ul>
<p>LVM 的重点在于可以弹性调整文件系统容量，而不是性能优先，因此默认使用线性模式进行读写。</p>
<h1 id="mbr-分区表"><a class="markdownIt-Anchor" href="#mbr-分区表"></a> MBR 分区表</h1>
<p>目前主流分区表格式有 MBR 和 GPT。早期的 Linux 系统为了兼容 Windows 磁盘，使用的是支持 Windows 的 MBR。</p>
<p>MBR 分区表无法支持 2T 以上容量的硬盘。</p>
<h2 id="第一个扇区"><a class="markdownIt-Anchor" href="#第一个扇区"></a> 第一个扇区</h2>
<p>MBR 分区表第一个扇区（512Bytes）用来记录三个重要的信息：</p>
<ul>
<li>
<p><strong>主引导分区</strong>（MBR，Master Boot Record）：</p>
<p>用来安装引导加载程序的地方，有 446Bytes 大小。</p>
</li>
<li>
<p><strong>分区表</strong>（Partition Table）：</p>
<p>记录整块硬盘的分区状态，有 64Bytes 大小。</p>
</li>
<li>
<p><strong>引导记录标识</strong>（BRID）：</p>
<p>用来判断设备是否可以用于启动，只有 2 Bytes 大小。值为 55 或 AA 表示可引导。</p>
</li>
</ul>
<p>如果第一个扇区出现物理坏道，整块硬盘都不可用。</p>
<h2 id="主引导分区"><a class="markdownIt-Anchor" href="#主引导分区"></a> 主引导分区</h2>
<p>MBR 只有 446Bytes，主要提供以下功能：</p>
<ul>
<li>提供菜单，可以选择不同开机选项，实现多重引导；</li>
<li>载入内核文件，指向可开机的程序区段开启动系统；</li>
<li>转交其他 Loader，将引导加载功能转交给其他 Loader 负责。</li>
</ul>
<h2 id="分区表"><a class="markdownIt-Anchor" href="#分区表"></a> 分区表</h2>
<p>分区表记录了每个分区的起始柱面号，分区只是针对那 64bytes 的分区表进行设置。由于只有 64Bytes 大小，所以仅能写入四组分区信息。这四组分区信息分为主(Primary)或扩展(Extended)分区。</p>
<p>主分区和扩展分区在 Linux 系统中表示为 sda[1-4]。</p>
<p>分区的最小单位为柱面(Cylinder)。</p>
<h2 id="扩展分区"><a class="markdownIt-Anchor" href="#扩展分区"></a> 扩展分区</h2>
<p>扩展分区是指利用额外的扇区来记录分区信息，但无法进行格式化。可以在扩展分区中创建逻辑分区，具体做法是在每个逻辑分区的最前面几个扇区记录分区信息。需要注意的是，一个磁盘最多只能有一个扩展分区，这是操作系统的限制。</p>
<p>为了确保磁盘的连续性，通常将扩展分区的柱面号分配在所有主分区之后。这样可以更好地利用磁盘空间，并有助于提高磁盘读写效率。</p>
<h2 id="逻辑分区"><a class="markdownIt-Anchor" href="#逻辑分区"></a> 逻辑分区</h2>
<p>从扩展分区分出的分区也称为逻辑分区（Logical Partition）。在 Linux 系统中，逻辑分区从 hda5 开始计算。</p>
<p>在一个扩展分区内，相邻的逻辑分区可以合并。如果不相邻，则只能重建扩展分区。</p>
<p>需要注意的是，如果扩展分区被破坏，所有的逻辑分区将被删除，因为逻辑分区的信息都记录在扩展分区中。</p>
<h1 id="gpt-分区表"><a class="markdownIt-Anchor" href="#gpt-分区表"></a> GPT 分区表</h1>
<p>GPT 分区表是为了适应 4K 扇区的硬盘和固态硬盘而设计的，它抛弃了原先以柱面为单位的计算法，改用逻辑区块位址（LBA，Logical Block Address）来规划分区。默认大小为 512Bytes，第一个 LBA 为 LBA0。</p>
<p>GPT 分区表使用前 34 个 LBA 区块来记录分区信息。此外，磁盘最后 33 个 LBA 区块会用于存储分区表备份，以保障分区信息的安全。</p>
<h2 id="mbr-兼容区块"><a class="markdownIt-Anchor" href="#mbr-兼容区块"></a> MBR 兼容区块</h2>
<p>GPT 分区表中的 LBA0 用来兼容 MBR 格式。不同之处在于，原本分区表记录段仅放入一个特殊标志的分区，用来表示此磁盘为 GPT 磁盘。</p>
<h2 id="gpt-表头记录"><a class="markdownIt-Anchor" href="#gpt-表头记录"></a> GPT 表头记录</h2>
<p>GPT 分区表中的 LBA1 记录了分区表本身的位置和大小，备份分区表存放位置，以及分区表校验机制码（CRC32）。如果系统检测到分区表有错误，可以通过这个记录区来获取备份分区表并进行恢复。</p>
<h2 id="分区表-2"><a class="markdownIt-Anchor" href="#分区表-2"></a> 分区表</h2>
<p>分区表存放在 LBA2-33 位置。从 LBA2 开始，每个 LBA 都可以记录 4 笔分区记录，所以默认可以记录 128 个分区记录。</p>
<p>每笔记录占用 128 字节空间，具体内容如下表：</p>
<table>
<thead>
<tr>
<th>起始字节</th>
<th>长度</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>16 字节</td>
<td>分区类型 GUID</td>
</tr>
<tr>
<td>16</td>
<td>16 字节</td>
<td>分区 GUID</td>
</tr>
<tr>
<td>32</td>
<td>8 字节</td>
<td>起始 LBA（小端序）</td>
</tr>
<tr>
<td>40</td>
<td>8 字节</td>
<td>末尾 LBA</td>
</tr>
<tr>
<td>48</td>
<td>8 字节</td>
<td>属性标签（如 bit60 表示“只读”）</td>
</tr>
<tr>
<td>56</td>
<td>72 字节</td>
<td>分区名，可以包括 36 个 UTF-16（小端序）字符</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
  <entry>
    <title>07.Linux 文件系统</title>
    <url>/2794564793/</url>
    <content><![CDATA[<h1 id="查看文件系统支持"><a class="markdownIt-Anchor" href="#查看文件系统支持"></a> 查看文件系统支持</h1>
<p>Linux 系统现支持的文件系统格式如下：</p>
<table>
<thead>
<tr>
<th><strong>文件系统</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>ext</td>
<td>Linux 扩展文件系统（Extended Filesystem），最早的 Linux 文件系统</td>
</tr>
<tr>
<td>ext2</td>
<td>第 2 代扩展文件系统，在 ext 的基础上提供了更多的功能。ext2 支持 undelete（反删除）和大文件。</td>
</tr>
<tr>
<td>ext3</td>
<td>第 3 代扩展文件系统，支持日志功能。ext3 支持大文件。但不支持反删除（undelete）操作。</td>
</tr>
<tr>
<td>ext4</td>
<td>第 4 代扩展文件系统，支持高级日志功能。</td>
</tr>
<tr>
<td>hpfs</td>
<td>OS/2 高性能文件系统</td>
</tr>
<tr>
<td>jfs</td>
<td>IBM 日志文件系统</td>
</tr>
<tr>
<td>iso9660</td>
<td>ISO 9660 文件系统（CD-ROM）</td>
</tr>
<tr>
<td>minix</td>
<td>MINIX 文件系统</td>
</tr>
<tr>
<td>msdos</td>
<td>微软的 FAT16</td>
</tr>
<tr>
<td>ncp</td>
<td>Netware 文件系统</td>
</tr>
<tr>
<td>nfs</td>
<td>网络文件系统</td>
</tr>
<tr>
<td>ntfs</td>
<td>支持 Microsoft NT 文件系统</td>
</tr>
<tr>
<td>proc</td>
<td>访问系统信息</td>
</tr>
<tr>
<td>ReiserFS</td>
<td>高级 Linux 文件系统，支持大文件，支持反删除，几乎能恢复 90%以上的数据，有时能恢复到 100%。</td>
</tr>
<tr>
<td>smb</td>
<td>支持网络访问的 Samba SMB 文件系统</td>
</tr>
<tr>
<td>sysv</td>
<td>较早期的 Unix 文件系统</td>
</tr>
<tr>
<td>ufs</td>
<td>BSD 文件系统</td>
</tr>
<tr>
<td>umsdos</td>
<td>建立在 msdos 上的类 Unix 文件系统</td>
</tr>
<tr>
<td>vfat</td>
<td>Windows 95 文件系统（FAT32）</td>
</tr>
<tr>
<td>XFS</td>
<td>高性能 64 位日志文件系统</td>
</tr>
</tbody>
</table>
<p>可以通过查看 fs 目录了解支持的文件系统有哪些：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 /<span class="token punctuation">]</span><span class="token comment"># ls -l /lib/modules/$(uname -r)/kernel/fs</span>
total <span class="token number">20</span>
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">5992</span> Aug <span class="token number">31</span> <span class="token number">11</span>:05 binfmt_misc.ko.xz
drwxr-xr-x. <span class="token number">2</span> root root   <span class="token number">25</span> Sep  <span class="token number">7</span> 05:54 btrfs
drwxr-xr-x. <span class="token number">2</span> root root   <span class="token number">30</span> Sep  <span class="token number">7</span> 05:54 cachefiles
drwxr-xr-x. <span class="token number">2</span> root root   <span class="token number">24</span> Sep  <span class="token number">7</span> 05:54 ceph<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看系统目前已加载到内存中支持的文件系统：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 /<span class="token punctuation">]</span><span class="token comment"># cat /proc/filesystems </span>
nodev   sysfs
nodev   rootfs
nodev   ramfs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>整个 Linux 系统都是通过虚拟文件系统（VFS，Virtual Filesystem Switch）的内核功能来读取文件系统。虚拟文件系统会管理各种文件系统中的数据，并统一提供给系统调用使用。</p>
<h1 id="ext-文件系统结构"><a class="markdownIt-Anchor" href="#ext-文件系统结构"></a> Ext 文件系统结构</h1>
<p>Linux 中，分区格式化的意义在于选择文件系统，按照文件系统标准将数据初始化。</p>
<p>在选择 ext 文件系统格式化后，磁盘结构变为一个引导扇区（有装系统）+多个块组（Block Group）。如下图所示：</p>
<p><img data-src="../../../images/Ext%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84.gif" alt="Ext文件系统结构" /></p>
<p>启动扇区占大小为 1KB，所以如果 block 大小设为 1024B 的话，启动扇区会存在 0 号 block。而在 block 大小大于 1024B 时，0 号 block 前面是启动扇区，后面跟着 superblock 占用 1K。</p>
<p>每个块组又包含分为六个区域：</p>
<ul>
<li>
<p><strong>超级块</strong>（SuperBlock）</p>
<p>记录文件系统的整体信息，包括 inode/block 的总量、使用量、剩余量，以及文件系统的格式与相关信息。</p>
</li>
<li>
<p><strong>文件系统描述</strong>（File System Description）</p>
<p>这个区段可以描述每个块组的起止 block 号码。</p>
<p>说明块组每个区段（superblock、inode、data、bitmap）的 block 起止号码。</p>
</li>
<li>
<p><strong>块对照表</strong>（Block Bitmap）</p>
<p>块对照表用来辅助块组找到可用的 block 写数据。</p>
<p>删除文件时将对应 block 号码标记为未使用。</p>
</li>
<li>
<p><strong>Inode 对照表</strong>（Inode Bitmap）</p>
<p>与块对照表功能类似，用来记录已使用与未使用的 inode 号码。</p>
</li>
<li>
<p><strong>Inode 表格</strong>（Inode Table）</p>
<p>记录文件的属性，一个文件占用一个 inode，同时记录此文件的数据所在的 block 号码。</p>
</li>
<li>
<p><strong>数据块</strong>（Data Block）</p>
<p>实际记录文件的内容，如果文件太大时，会占用多个 block。</p>
</li>
</ul>
<p>与 FAT 文件系统对比：</p>
<ul>
<li>Linux 文件系统每个 inode 与 block 都有编号，读取文件时先读取 inode 记录，得到文件实际存放的 block 号码，将整个文件读取出来。这种数据访问方法称为索引式文件系统（indexed allocation）。</li>
<li>FAT 格式没有 inode 存在，每个 block 号码都记录在前一个 block 当中。读取文件时必须一个个追踪，硬盘转很多圈才能读到最后一个 block。因此需要磁盘碎片整理，将同一个文件所属的 block 汇合在一起提升磁头搜寻效率。</li>
</ul>
<h2 id="数据块"><a class="markdownIt-Anchor" href="#数据块"></a> 数据块</h2>
<p>数据块是放置文件内容的地方，在 Ext2 中支持的块大小有 1KB、2KB 和 4KB，格式化时可选择块大小，每个块都有编号。</p>
<p>不同块大小支持的分区大小和单文件大小有所不同：</p>
<table>
<thead>
<tr>
<th>块大小</th>
<th>1KB</th>
<th>2KB</th>
<th>4KB</th>
</tr>
</thead>
<tbody>
<tr>
<td>最大单一文件限制</td>
<td>16GB</td>
<td>256GB</td>
<td>2TB</td>
</tr>
<tr>
<td>最大文件系统总容量</td>
<td>2TB</td>
<td>8TB</td>
<td>16TB</td>
</tr>
</tbody>
</table>
<p>每个 block 内最多放置一个文件的数据，如果文件超过 block 大小，会占用多个 block。文件大小小于 block 大小时，block 内剩余容量也不能再被利用。</p>
<h2 id="inode-表格"><a class="markdownIt-Anchor" href="#inode-表格"></a> Inode 表格</h2>
<p>inode 的内容主要记录文件的属性及文件实际数据存放的 block 号码。</p>
<p>inode 记录的文件数据有下面这些：</p>
<ul>
<li>该文件的访问模式（read/write/execute）；</li>
<li>该文件的所有者与组（owner/group）；</li>
<li>该文件的大小；</li>
<li>该文件创建或状态改变的时间（ctime）；</li>
<li>最近一次读取的时间（atime）；</li>
<li>最近修改的时间（mtime）；</li>
<li>定义文件特性的标志（flag），比如 SUID 等；</li>
<li>该文件真正内容的指向（pointer）。</li>
</ul>
<p>inode 的特点：</p>
<ul>
<li>每个 inode 大小均固定为 128Bytes（ext4 和 xfs 可设置到 256Bytes）；</li>
<li>每个文件都仅占用一个 inode；</li>
<li>文件系统能创建的文件数量与 inode 数量有关；</li>
<li>系统读取 inode 时，会匹配 inode 上记录权限与用户是否符合，符合才继续读取 block 内容。</li>
</ul>
<p>inode 记录方式：</p>
<ul>
<li>每个 inode 记录 block 号码的区域定义为：12 个直接，1 个间接，1 个双间接和 1 个三间接记录区；</li>
<li>12 个直接记录能直接取得 block 号码，间接则是再拿一个 block 来当作记录 block 号码的记录区。双间接和三间接则是 block 再次指向下一个记录编号的 block 号码，以此最多三层指向；</li>
<li>以 1k 大小 block 块计算，总共能记录的文件大小为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>12</mn><mo>×</mo><mn>1</mn><mi>K</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mi>K</mi><mi mathvariant="normal">/</mi><mn>4</mn><mi>B</mi><mo>=</mo><mn>256</mn><mi>K</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>256</mn><mo>×</mo><mn>256</mn><mi>K</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>256</mn><mo>×</mo><mn>256</mn><mo>×</mo><mn>256</mn><mi>K</mi><mo stretchy="false">)</mo><mo>=</mo><mn>16</mn><mi>G</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">(12\times1K)+(1K/4B=256K)+(256\times256K)+(256\times256\times256K)=16GB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord">/</span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>；</li>
<li>现在使用 256Bytes 容量大小的 inode，还可以记录更多文件系统信息，包括 ACL 及 SELinux 类型等。记录的单一文件大小达 16TB，且单一文件系统总容量可达 1EB；</li>
</ul>
<h2 id="超级块"><a class="markdownIt-Anchor" href="#超级块"></a> 超级块</h2>
<p>超级块是记录整个文件系统相关信息的地方，一般超级块的大小为 1024 字节。</p>
<p>超级块记录的信息有：</p>
<ul>
<li>block 与 inode 的总量；</li>
<li>未使用与已使用的 inode/block 数量；</li>
<li>block 与 inode 的大小；</li>
<li>文件系统的挂载时间、最近一次写入数据的时间、最近一次检验磁盘（fsck）的时间等；</li>
<li>一个 valid bit 数值，若此文件系统已被挂载则值为 0，未挂载为 1。</li>
</ul>
<p>因为超级块非常重要，所以除了第一个块组中含有超级块外，其他块组中可能存在超级块备份，用来在关键时进行救援修复。</p>
<h2 id="查询文件系统详情"><a class="markdownIt-Anchor" href="#查询文件系统详情"></a> 查询文件系统详情</h2>
<p>使用 dumpe2fs 命令可以查询 ext 文件系统信息.例如查询设备 sdb1：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 /<span class="token punctuation">]</span><span class="token comment"># dumpe2fs /dev/sdb1</span>
dumpe2fs <span class="token number">1.42</span>.9 <span class="token punctuation">(</span><span class="token number">28</span>-Dec-2013<span class="token punctuation">)</span>
Filesystem volume name:   <span class="token operator">&lt;</span>none<span class="token operator">></span>
Last mounted on:          <span class="token operator">&lt;</span>not available<span class="token operator">></span>
Filesystem UUID:          3789ee36-8f38-441c-ac01-c0a9ca8171a1
Filesystem magic number:  0xEF53
Filesystem revision <span class="token comment">#:    1 (dynamic)</span>
Filesystem features:      has_journal ext_attr resize_inode dir_index filetype needs_recovery sparse_super large_file
Filesystem flags:         signed_directory_hash 
Default <span class="token function">mount</span> options:    user_xattr acl
Filesystem state:         clean
Errors behavior:          Continue
Filesystem OS type:       Linux
Inode count:              <span class="token number">65536</span>
Block count:              <span class="token number">261888</span>
Reserved block count:     <span class="token number">13094</span>
Free blocks:              <span class="token number">253344</span>
Free inodes:              <span class="token number">65525</span>
First block:              <span class="token number">0</span>
Block size:               <span class="token number">4096</span>
Fragment size:            <span class="token number">4096</span>
Reserved GDT blocks:      <span class="token number">63</span>
Blocks per group:         <span class="token number">32768</span>
Fragments per group:      <span class="token number">32768</span>
Inodes per group:         <span class="token number">8192</span>
Inode blocks per group:   <span class="token number">512</span>
Filesystem created:       Thu Sep  <span class="token number">9</span> <span class="token number">15</span>:10:34 <span class="token number">2021</span>
Last <span class="token function">mount</span> time:          Thu Sep  <span class="token number">9</span> <span class="token number">15</span>:11:11 <span class="token number">2021</span>
Last <span class="token function">write</span> time:          Thu Sep  <span class="token number">9</span> <span class="token number">15</span>:11:11 <span class="token number">2021</span>
Mount count:              <span class="token number">1</span>
Maximum <span class="token function">mount</span> count:      <span class="token parameter variable">-1</span>
Last checked:             Thu Sep  <span class="token number">9</span> <span class="token number">15</span>:10:34 <span class="token number">2021</span>
Check interval:           <span class="token number">0</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>none<span class="token operator">></span><span class="token punctuation">)</span>
Reserved blocks uid:      <span class="token number">0</span> <span class="token punctuation">(</span>user root<span class="token punctuation">)</span>
Reserved blocks gid:      <span class="token number">0</span> <span class="token punctuation">(</span>group root<span class="token punctuation">)</span>
First inode:              <span class="token number">11</span>
Inode size:               <span class="token number">256</span>
Required extra isize:     <span class="token number">28</span>
Desired extra isize:      <span class="token number">28</span>
Journal inode:            <span class="token number">8</span>
Default directory hash:   half_md4
Directory Hash Seed:      32744b35-d887-4ba9-9431-c5a9d63b9474
Journal backup:           inode blocks
Journal features:         <span class="token punctuation">(</span>none<span class="token punctuation">)</span>
Journal size:             16M
Journal length:           <span class="token number">4096</span>
Journal sequence:         0x00000002
Journal start:            <span class="token number">1</span>


Group <span class="token number">0</span>: <span class="token punctuation">(</span>Blocks <span class="token number">0</span>-32767<span class="token punctuation">)</span>
  Primary superblock at <span class="token number">0</span>, Group descriptors at <span class="token number">1</span>-1
  Reserved GDT blocks at <span class="token number">2</span>-64
  Block bitmap at <span class="token number">65</span> <span class="token punctuation">(</span>+65<span class="token punctuation">)</span>, Inode bitmap at <span class="token number">66</span> <span class="token punctuation">(</span>+66<span class="token punctuation">)</span>
  Inode table at <span class="token number">67</span>-578 <span class="token punctuation">(</span>+67<span class="token punctuation">)</span>
  <span class="token number">32183</span> <span class="token function">free</span> blocks, <span class="token number">8181</span> <span class="token function">free</span> inodes, <span class="token number">2</span> directories
  Free blocks: <span class="token number">585</span>-32767
  Free inodes: <span class="token number">12</span>-8192
Group <span class="token number">1</span>: <span class="token punctuation">(</span>Blocks <span class="token number">32768</span>-65535<span class="token punctuation">)</span>
  Backup superblock at <span class="token number">32768</span>, Group descriptors at <span class="token number">32769</span>-32769
  Reserved GDT blocks at <span class="token number">32770</span>-32832
  Block bitmap at <span class="token number">32833</span> <span class="token punctuation">(</span>+65<span class="token punctuation">)</span>, Inode bitmap at <span class="token number">32834</span> <span class="token punctuation">(</span>+66<span class="token punctuation">)</span>
  Inode table at <span class="token number">32835</span>-33346 <span class="token punctuation">(</span>+67<span class="token punctuation">)</span>
  <span class="token number">32189</span> <span class="token function">free</span> blocks, <span class="token number">8192</span> <span class="token function">free</span> inodes, <span class="token number">0</span> directories
  Free blocks: <span class="token number">33347</span>-65535
  Free inodes: <span class="token number">8193</span>-16384
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到这块磁盘格式化成了 ext3 文件系统后的 inode/block 数量，目前状态为 clean 正常等，这些就是 superblock 所记录的内容。后面以 Group 开头的段为一个个块组信息。</p>
<h1 id="文件与目录数据结构"><a class="markdownIt-Anchor" href="#文件与目录数据结构"></a> 文件与目录数据结构</h1>
<p>每个文件或目录都会占用一个 inode，且可依据文件内容的大小来分配多个 block 给该文件使用。</p>
<h2 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h2>
<p>当在系统中新建一个目录时，至少会分配一个 inode 与一个 block 给该目录。</p>
<ul>
<li><strong>inode 记录本目录相关权限、属性与本目录 block 号码</strong>。</li>
<li><strong>block 记录在这个目录下的文件名与该文件（或目录）对应的 inode 号码</strong>。</li>
</ul>
<p>例如使用 ls -i 查看目录 ext333 内文件所占用 inode 号码：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span><span class="token comment"># ls -li</span>
total <span class="token number">16</span>
<span class="token number">12</span> -rw-r--r--. <span class="token number">1</span> root root     <span class="token number">0</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:37 fist.log
<span class="token number">11</span> drwx------. <span class="token number">2</span> root root <span class="token number">16384</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:10 lost+found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>fist.log 文件的 inode 号码是 12，lost+found 目录的 inode 号码是 11，这些就是记录在 ext333 目录 block 中的数据。</p>
<p>再查看一下目录占用的大小：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span><span class="token comment"># ll -dh /ext333/lost+found/ /ext333/</span>
drwxr-xr-x. <span class="token number">3</span> root root <span class="token number">4</span>.0K Sep  <span class="token number">9</span> <span class="token number">15</span>:37 /ext333/
drwx------. <span class="token number">2</span> root root  16K Sep  <span class="token number">9</span> <span class="token number">15</span>:10 /ext333/lost+found/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>可以看到 ext333 目录大小为 4KB，而分区时设置的一个 block 大小也是 4KB，因此它使用了 1 个 block 来记录文件和目录 inode 号码信息。另外 lost+found 目录大小 16KB，说明记录信息太多 1 个 block 不够用，分配了 4 个 block 来记录。</p>
<h2 id="文件"><a class="markdownIt-Anchor" href="#文件"></a> 文件</h2>
<p>当新建一个一般文件时，系统会分配一个 inode 与相对于该文件大小的 block 数量给该文件。</p>
<p>假设 block 大小为 4KB，inode 大小为 128B，要新建 100KB 大小的文件，那么会分配到 1 个 inode 与 25 个 block 来储存该文件。由于 inode 只有 12 个直接指向，因此还要额外分配 1 个 block 来作为 block 号码记录用，文件实际上需要 26 个 block 来储存。</p>
<h2 id="目录树读取"><a class="markdownIt-Anchor" href="#目录树读取"></a> 目录树读取</h2>
<p>inode 本身并不记录文件名，文件名的记录在目录的 block 当中。所以给目录写权限，实际上操作的是修改目录的 block 数据。</p>
<p>删除文件记录（rm 操作），修改文件指向 inode 记录（mv 命令），或者新增文件指向 inode 记录（cp 命令），对应的就是在目录下进行删除、重命名、新增操作。</p>
<p>以下面记录为例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span><span class="token comment"># ll -di /ext333/ /ext333/lost+found/ /ext333/lost+found/pass </span>
<span class="token number">2</span>  drwxr-xr-x. <span class="token number">3</span> root root  <span class="token number">4096</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:37 /ext333/
<span class="token number">11</span> drwx------. <span class="token number">2</span> root root <span class="token number">16384</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:54 /ext333/lost+found/
<span class="token number">14</span> -rw-r--r--. <span class="token number">1</span> root root     <span class="token number">5</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:54 /ext333/lost+found/pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>假设 root 要读取/ext333/lost+found/pass 这个文件，顺序是这样的：</p>
<ol>
<li>通过挂载点的信息找到 inode 号码为 2 的 ext333 目录，查询 2 号 inode 内容，得到目录权限配置为 755。由于存在 x 权限，因此用户可以进入到 ext333 目录中。由于存在 r 权限，因此用户可以读取目录 ext333 的 block 内容。</li>
<li>通过读取 ext333 目录的 block 内容，得到 lost+found 目录的 inode 号码为 11。继续查询 11 号 inode 内容，得知权限为 rwx，因此继续进入 lost+found 目录，并读取目录的 block 内容。</li>
<li>通过读取目录 lost+found 的 block 内容得知 pass 文件的 inode 号码为 14。继续查询 14 号 inode 内容，得到权限为 rw。由于存在 r 权限，因此获得数据实际存放的 block 地址。</li>
<li>读取 pass 文件的 block 内容。</li>
</ol>
<h2 id="新增文件"><a class="markdownIt-Anchor" href="#新增文件"></a> 新增文件</h2>
<p>新增一个文件或目录时，文件系统的行为如下：</p>
<ol>
<li>首先确定用户是否对欲添加文件的目录拥有 w 和 x 权限，只有具备这两个权限才能进行添加操作；</li>
<li>根据 inode bitmap 寻找一个未使用的 inode 号码，并将新文件的权限和属性写入该 inode 中；</li>
<li>根据 block bitmap 寻找一个未使用的 block 号码，将实际数据写入该 block 中，并更新 inode 的 block 指向数据；</li>
<li>同步更新 inode bitmap 和 block bitmap 中的写入的 inode 与 block 数据，并更新 superblock 的内容。</li>
</ol>
<p>inode table 与 data block 被称为数据存储区域，而其他区域，如 superblock、block bitmap 和 inode bitmap 等，被称为 metadata(中间区域)。</p>
<h1 id="日志式文件系统"><a class="markdownIt-Anchor" href="#日志式文件系统"></a> 日志式文件系统</h1>
<p>Linux 中有三种广泛使用的日志文件方法，每种的保护等级都不相同：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据模式</td>
<td>索引节点和文件都会被写入日志。所有写入储存设备的数据都要写两次，因此数据安全但性能较差。</td>
</tr>
<tr>
<td>有序模式</td>
<td>只有索引节点数据会被写入日志，数据写入成功后立即删除。</td>
</tr>
<tr>
<td>回写模式</td>
<td>只有索引节点数据会被写入日志，但不控制文件数据何时写入。</td>
</tr>
</tbody>
</table>
<h2 id="异步处理"><a class="markdownIt-Anchor" href="#异步处理"></a> 异步处理</h2>
<p>当系统加载一个文件到内存后，如果长时间没有改动，则内存区段中的文件数据会被设置为 clean。如果更改了，则设置为 dirty。系统会不定时将内存中设置为 dirty 的数据写回磁盘。这个过程叫做异步处理（Asynchronously）。</p>
<ul>
<li>系统会将常用的文件数据放置在主储存器的缓冲区，以加速文件系统的读写；</li>
<li>可以通过 sync 命令将 dirty 数据写回到硬盘；</li>
<li>正常关机时会调用 sync 将内存中数据写回到硬盘；</li>
<li>非正常关机时可能会造成数据损毁。日志文件系统下次启动时会读取日志文件并处理上次留下的未写入的数据。</li>
</ul>
<h2 id="数据不一致状态"><a class="markdownIt-Anchor" href="#数据不一致状态"></a> 数据不一致状态</h2>
<p>假如文件写入过程中突然断电，写入的数据仅有 inode table 和 data block，最后一个同步更新中间数据的步骤没有完成就会发生数据不一致状态（Inconsistent）。</p>
<p>在 Ext2 文件系统中发生这个问题，系统在重启后会通过 Super Block 当中记录的 valid bit（是否有挂载）与文件系统的 state 等状态判断是否强制进行数据一致性的检查，需要的话运行磁盘扫描程序。</p>
<h2 id="日志文件系统"><a class="markdownIt-Anchor" href="#日志文件系统"></a> 日志文件系统</h2>
<p>日志式文件系统（Journaling file system）是为了避免文件系统不一致的情况发生，在文件系统中规划出一个块，用来记录写入或修改文件时的步骤。</p>
<ul>
<li>当系统要写入一个文件时，会先在日志记录块中记录某个文件准备要写入的信息；</li>
<li>当完成数据与元数据更新后，在日志记录块中完成该文件的记录；</li>
<li>这样当出现问题时，系统只要去检查日志记录块就知道哪个文件发生了问题，针对该问题做一致性检查即可。</li>
</ul>
<p>在上面的/dev/sdb1 中，journal 块指向 inode 8 号记录，具有 16MB 容量处理日志。</p>
<p>常见日志文件系统如下：</p>
<ul>
<li>
<p><strong>ext3 文件系统</strong></p>
<p>采用和 ext2 文件系统相同的索引节点表结构，但给每个存储设备增加了一个日志文件，以将准备写入存储设备的数据先记入日志。</p>
<p>默认情况下，ext3 文件系统用有序模式的日志功能。也可以在创建文件系统时加入选项，将日志方法改成数据模式或回写模式。</p>
</li>
<li>
<p><strong>ext4 文件系统</strong></p>
<p>除了支持数据压缩和加密，ext4 文件系统还支持一个称为区段（Extent）的特性，区段在存储设备上按块分配空间，但在索引节点表中只保留起始块的位置。</p>
<p>另外一个特性是块预分配技术（Block Preallocation）。如果要给存储一个会变大的文件预留空间，ext4 文件系统可以为文件预分配所有需要的块用 0 填满。</p>
</li>
<li>
<p><strong>Reiser 文件系统</strong></p>
<p>ReiserFS 文件系统只支持回写日志模式，它具有两个特性。一个是可以在线调整已有文件系统的大小。另一个被称为尾部压缩处理（Tailpacking），它能将一个文件的数据填进另一个文件的数据块中空白空间，以此节省容量。</p>
</li>
<li>
<p><strong>JFS 文件系统</strong></p>
<p>JFS 文件系统采用有序日志方法。特点是采用基于区段的文件分配，即为每个写入存储设备的文件分配一组块，这样可以减少存储设备上的碎片。</p>
</li>
<li>
<p><strong>XFS 文件系统</strong></p>
<p>XFS 文件系统采用回写日志模式。和 Reiser 一样支持在线调整文件系统大小，但它<strong>只能扩容，不能缩容</strong>。</p>
</li>
</ul>
<h2 id="写时复制文件系统"><a class="markdownIt-Anchor" href="#写时复制文件系统"></a> 写时复制文件系统</h2>
<p>写时复制（COW，copy-on-write）利用快照兼顾了安全性和性能。如果要修改数据，会使用克隆或可写快照，修改过的数据并不会直接覆盖当前数据，而是被放入文件系统中的另一个位置。即使数据修改已经完成，之前的旧数据也不会被重写。最流行的 COW 文件系统有下面两种：</p>
<ul>
<li>
<p><strong>ZFS 文件系统</strong></p>
<p>ZFS(Z File System)是一个稳定的文件系统，用在 Sun 公司的 OpenSolaris 系统中，但它并非开源。开源版本叫做 OpenZFS 项目。</p>
</li>
<li>
<p><strong>Btrfs 文件系统</strong></p>
<p>Btrfs 文件系统也被称为 B 树文件系统，它稳定易用，能够动态调整已挂载文件系统的大小。目前 OpenSUSE Linux 把 Btrfs 作为其默认文件系统。</p>
</li>
</ul>
<h1 id="xfs-文件系统"><a class="markdownIt-Anchor" href="#xfs-文件系统"></a> XFS 文件系统</h1>
<p>由于 Ext 文件系统在格式化时采用的是预先规划出所有 inode/block/metadata 等数据，当磁盘容量很小时问题不大，但处理按 TB 计的大硬盘时，仅格式化就需要花费很长时间。</p>
<p>而 XFS 是针对大文件和数据设计的日志式文件系统。XFS 具备了 Ext 文件系统的所有功能，因此被作为 CentOS 7 中的默认文件系统。</p>
<p>XFS 文件系统在数据分布上主要划分为三部分：数据区、文件系统活动登录区和实时运行区。</p>
<h2 id="数据区"><a class="markdownIt-Anchor" href="#数据区"></a> 数据区</h2>
<p>数据区(Data Section)结构基本与 Ext 文件系统相同，包括 inode/data block/superblock 等数据，并且也是分为多个存储区组(Allocation Groups)来分别放置文件系统所需数据。</p>
<p>每个存储区组都包含了：</p>
<ul>
<li>整个文件系统的 superblock；</li>
<li>剩余空间管理机制；</li>
<li>inode 的分配与追踪。</li>
</ul>
<p>此外，inode 与 block 都是系统需要用时才动态配置产生。block 容量可以设置成 512 字节到 64KB，inode 的容量可以设置成 256 字节到 2MB。这是与 Ext 文件系统的主要区别。</p>
<h2 id="文件系统活动日志区"><a class="markdownIt-Anchor" href="#文件系统活动日志区"></a> 文件系统活动日志区</h2>
<p>在文件系统活动日志区（Log Section）中，主要被用来记录文件系统的变化，有点像日志系统。文件的变化会在这里记录下来，直到变化完整写入到硬盘后，记录才会终止。</p>
<p>在遇到突发情况而造成文件系统损毁时，系统会检查日志区，看系统之前正在操作的文件，再检查文件是否正确，依次修复文件系统。</p>
<p>由于此区块读写频繁，因此可以指定单独的磁盘作为 XFS 文件系统的日志区。</p>
<h2 id="实时运行区"><a class="markdownIt-Anchor" href="#实时运行区"></a> 实时运行区</h2>
<p>当有文件要被创建时，XFS 会在实时运行区（Realtime Section）找一到多个 extent 区块，将文件放置在这个区块内，等到分配完成再写入到数据区的 inode 和 block 中。</p>
<p>extent 区块在格式化时可以指定，范围从 4KB 到 1GB，一般默认设置为 64KB 容量。</p>
<h2 id="查询文件系统详情-2"><a class="markdownIt-Anchor" href="#查询文件系统详情-2"></a> 查询文件系统详情</h2>
<p>在 XFS 文件系统中，使用 xfs_info 命令来查看分区详情：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span><span class="token comment"># xfs_info /dev/mapper/centos-root</span>
meta-data<span class="token operator">=</span>/dev/mapper/centos-root <span class="token assign-left variable">isize</span><span class="token operator">=</span><span class="token number">512</span>    <span class="token assign-left variable">agcount</span><span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">agsize</span><span class="token operator">=</span><span class="token number">1113856</span> blks
         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">attr</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">projid32bit</span><span class="token operator">=</span><span class="token number">1</span>
         <span class="token operator">=</span>                       <span class="token assign-left variable">crc</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token assign-left variable">finobt</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">spinodes</span><span class="token operator">=</span><span class="token number">0</span>
data     <span class="token operator">=</span>                       <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">4455424</span>, <span class="token assign-left variable">imaxpct</span><span class="token operator">=</span><span class="token number">25</span>
         <span class="token operator">=</span>                       <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span>      <span class="token assign-left variable">swidth</span><span class="token operator">=</span><span class="token number">0</span> blks
naming   <span class="token operator">=</span>version <span class="token number">2</span>              <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   ascii-ci<span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ftype</span><span class="token operator">=</span><span class="token number">1</span>
log      <span class="token operator">=</span>internal               <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">2560</span>, <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token number">2</span>
         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span> blks, lazy-count<span class="token operator">=</span><span class="token number">1</span>
realtime <span class="token operator">=</span>none                   <span class="token assign-left variable">extsz</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">rtextents</span><span class="token operator">=</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面简单解释下字段含义：</p>
<ul>
<li>第 1 行：
<ul>
<li>isize=512 指定 inode 的容量每个 512 字节大小。</li>
<li>agcount=4 是储存区群组的个数 4 个。可以设置成 CPU 核心的数量来搭配。</li>
<li>agsize=1113856 blks 每个储存区群组具有 1113856 个 block。</li>
</ul>
</li>
<li>第 2 行：
<ul>
<li>sectsz=512 指逻辑扇区容量设置为 512 字节。</li>
</ul>
</li>
<li>第 4 行：
<ul>
<li>bsize=4096 指每个 block 大小为 4KB，可以用 bsize*blocks 得到分区总容量 17821696KB ≈ 16GB。</li>
<li>blocks=4455424 指系统总共有 4455424 个 blocks，可以由 agsize*agcount 算得。</li>
</ul>
</li>
<li>第 5 行：
<ul>
<li>sunit=0 和 RAID 的 stripe 设置有关。</li>
<li>swidth=0 和 RAID 的工作盘数量有关。</li>
</ul>
</li>
<li>第 7 行：
<ul>
<li>internal 表示这个日志区的位置在文件系统内，而不是外部设备。</li>
<li>bsize=4096 日志区 block 大小为 4KB。</li>
<li>blocks=2560 日志区 block 总数 2560，可以算得日志区大小为 10MB。</li>
</ul>
</li>
<li>第 9 行：
<ul>
<li>extsz=4096 指 extent 大小为 4KB。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
  <entry>
    <title>08.Linux 文件属性</title>
    <url>/1872252014/</url>
    <content><![CDATA[<h1 id="查看文件属性"><a class="markdownIt-Anchor" href="#查看文件属性"></a> 查看文件属性</h1>
<p>执行 ls -la 命令后，可以看到当前目录下所有文件的权限和属性：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span><span class="token comment"># ll -la</span>
total <span class="token number">32</span>
dr-xr-x---.  <span class="token number">4</span> root root  <span class="token number">175</span> Sep  <span class="token number">8</span> <span class="token number">22</span>:48 <span class="token builtin class-name">.</span>
dr-xr-xr-x. <span class="token number">17</span> root root  <span class="token number">224</span> Sep  <span class="token number">7</span> <span class="token number">13</span>:37 <span class="token punctuation">..</span>
-rw-------.  <span class="token number">1</span> root root <span class="token number">1260</span> Sep  <span class="token number">7</span> <span class="token number">13</span>:38 anaconda-ks.cfg
-rw-------.  <span class="token number">1</span> root root  <span class="token number">847</span> Sep  <span class="token number">8</span> <span class="token number">12</span>:32 .bash_history
-rw-r--r--.  <span class="token number">1</span> root root   <span class="token number">18</span> Dec <span class="token number">28</span>  <span class="token number">2013</span> .bash_logout
-rw-r--r--.  <span class="token number">1</span> root root  <span class="token number">176</span> Dec <span class="token number">28</span>  <span class="token number">2013</span> .bash_profile
-rw-r--r--.  <span class="token number">1</span> root root  <span class="token number">176</span> Dec <span class="token number">28</span>  <span class="token number">2013</span> .bashrc
-rw-r--r--.  <span class="token number">1</span> root root  <span class="token number">100</span> Dec <span class="token number">28</span>  <span class="token number">2013</span> .cshrc
drwxr-xr-x.  <span class="token number">2</span> root root    <span class="token number">6</span> Sep  <span class="token number">8</span> <span class="token number">22</span>:48 dir1
drwxr-----.  <span class="token number">3</span> root root   <span class="token number">19</span> Sep  <span class="token number">7</span> 05:51 .pki
-rw-r--r--.  <span class="token number">1</span> root root  <span class="token number">129</span> Dec <span class="token number">28</span>  <span class="token number">2013</span> .tcshrc
-rw-------.  <span class="token number">1</span> root root  <span class="token number">508</span> Sep  <span class="token number">7</span> 05:52 .viminfo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>total 为该目录下的所有数据所占用的实际块数量乘以块大小的值。</p>
<p>从左到右以空格分隔成七列，分别代表：“类型和权限、连接、所有者、所有组、大小、修改时间、文件名”。</p>
<h1 id="文件类型"><a class="markdownIt-Anchor" href="#文件类型"></a> 文件类型</h1>
<p>第一列第一个字段用来表示文件的类型，文件类型有下面几种：</p>
<table>
<thead>
<tr>
<th><strong>标记</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>-</td>
<td>普通文件</td>
<td>文本文件、数据文件、可执行程序等都作为普通文件存储</td>
</tr>
<tr>
<td>d</td>
<td>目录</td>
<td>目录不存放常规数据，它用来组织访问其他文件</td>
</tr>
<tr>
<td>c</td>
<td>字符设备文件</td>
<td>指处理数据时每次只能处理一个字符的设备，例如鼠标、键盘（一次性读取设备）</td>
</tr>
<tr>
<td>b</td>
<td>块设备文件</td>
<td>指处理数据时每次能处理大块数据的设备，例如硬盘</td>
</tr>
<tr>
<td>s</td>
<td>本地域套接字</td>
<td>实现进程间通信的连接，本地域套接字由系统调用 socket 创建</td>
</tr>
<tr>
<td>p</td>
<td>有名管道(FIFO)</td>
<td>让运行在同一主机上的两个进程相互通信，和 socket 文件相似</td>
</tr>
<tr>
<td>l</td>
<td>符号链接</td>
<td>也叫做软链接(Linkfile)，通过名字指向文件</td>
</tr>
</tbody>
</table>
<p>ls 命令结果展示文件颜色含义：</p>
<table>
<thead>
<tr>
<th><strong>颜色</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>灰色</td>
<td>普通文件</td>
</tr>
<tr>
<td>蓝色</td>
<td>目录</td>
</tr>
<tr>
<td>绿色</td>
<td>可执行文件</td>
</tr>
<tr>
<td>黄色</td>
<td>特殊文件</td>
</tr>
<tr>
<td>红色</td>
<td>压缩文件</td>
</tr>
</tbody>
</table>
<h1 id="文件权限"><a class="markdownIt-Anchor" href="#文件权限"></a> 文件权限</h1>
<p>第一列后九个字段以三个为一组，分别表示：</p>
<ul>
<li>文件所有者权限</li>
<li>同用户组权限</li>
<li>其他用户权限</li>
</ul>
<p>权限为&quot;rwx&quot;的三个参数组合，没有权限显示为&quot;-&quot;减号。</p>
<h1 id="连接节点"><a class="markdownIt-Anchor" href="#连接节点"></a> 连接节点</h1>
<p>第二列数字表示节点，每个文件都会将它的权限与属性记录到文件系统的 inode 中。</p>
<p>这个属性记录的就是有多少不同的文件名连接到相同的一个 inode 号码。</p>
<h1 id="所有者所有组"><a class="markdownIt-Anchor" href="#所有者所有组"></a> 所有者/所有组</h1>
<p>第三列和第四列分别表示文件所属的用户和用户组。</p>
<h1 id="文件大小"><a class="markdownIt-Anchor" href="#文件大小"></a> 文件大小</h1>
<p>第五列表示文件的容量大小，默认单位为 Bytes。</p>
<p>目录显示的大小不是文件夹大小，而是目录元数据的大小。</p>
<h1 id="修改日期"><a class="markdownIt-Anchor" href="#修改日期"></a> 修改日期</h1>
<p>第六列为文件的创建日期或最近修改时间。</p>
<p>如果修改时间距离太久，那时间部分会显示成年份。</p>
<h1 id="文件名"><a class="markdownIt-Anchor" href="#文件名"></a> 文件名</h1>
<p>第七列为文件名或文件夹名。</p>
<p>Linux 的文件名是大小写敏感的。</p>
<p>文件或目录名的第一个字母是&quot;.&quot;表示隐藏文件。</p>
<p><strong>文件名规则</strong>：</p>
<ul>
<li>由大写字母、小写字母、数字和一些特殊符号组成；</li>
<li>不可以包含 * ? &lt; &gt; ( ) [ ] { } / \ | &quot;  ` ＆ ;  ! 等符号；</li>
<li>＋-可以出现在文件名中，但是不能作为文件名中的第一个字母；</li>
<li>文件名中一般不应该包含空格；</li>
<li>使用 Ext 文件系统时，文件名最长 255 个字符，路径最长 4096 个字符。</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
</search>
