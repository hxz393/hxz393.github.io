<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux 基本文件操作</title>
    <url>/3891118029/</url>
    <content><![CDATA[<h1 id="文件和目录查询"><a class="markdownIt-Anchor" href="#文件和目录查询"></a> 文件和目录查询</h1>
<p>使用 <code>ls</code> 命令可以列出目录中的文件，不包括隐藏文件。默认按文件名排序。<code>ll</code> 命令是 <code>ls -l</code> 的别名。</p>
<p>以下是一些常用选项参数：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>显示隐藏文件</td>
</tr>
<tr>
<td>-d</td>
<td>仅查看目录本身属性</td>
</tr>
<tr>
<td>-h</td>
<td>使显示结果更友好</td>
</tr>
<tr>
<td>-i</td>
<td>列出 inode 号码</td>
</tr>
<tr>
<td>-l</td>
<td>显示详细信息</td>
</tr>
<tr>
<td>-n</td>
<td>列出 UID 与 GID</td>
</tr>
<tr>
<td>-R</td>
<td>连同子目录内容一起列出</td>
</tr>
<tr>
<td>-S</td>
<td>以文件大小排序</td>
</tr>
<tr>
<td>-t</td>
<td>依时间排序</td>
</tr>
</tbody>
</table>
<p>可以同时查看多个文件信息，路径之间用空格隔开：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ ll ./dir1/ ./audit/
./audit/:
total <span class="token number">360</span>
-rw-------. <span class="token number">2</span> root root <span class="token number">182023</span> Sep <span class="token number">9</span> 05:01 audit.log
lrwxrwxrwx. <span class="token number">1</span> root root <span class="token number">9</span> Sep <span class="token number">9</span> 05:29 ha.log -<span class="token operator">></span> audit.log
-rw-------. <span class="token number">2</span> root root <span class="token number">182023</span> Sep <span class="token number">9</span> 05:01 la.log

./dir1/:
total <span class="token number">0</span>
-rwxrwxr--. <span class="token number">1</span> <span class="token function">ftp</span> root <span class="token number">0</span> Sep <span class="token number">8</span> <span class="token number">23</span>:29 xx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以使用通配符 *（? 匹配单字母）来显示所有匹配的文件和目录，包括子文件夹中的文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> <span class="token parameter variable">-l</span> s*
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">83886080</span> Sep <span class="token number">10</span> <span class="token number">22</span>:20 sdb5.disk

sdb4m:
total <span class="token number">20</span>
-rw-------. <span class="token number">1</span> root root <span class="token number">1260</span> Sep <span class="token number">10</span> <span class="token number">15</span>:05 a.cfg
drwx------. <span class="token number">2</span> root root <span class="token number">16384</span> Sep <span class="token number">10</span> <span class="token number">15</span>:03 lost+found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>展示完整的文件修改时间使用 <code>--full-time</code> 参数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> <span class="token parameter variable">-Al</span> --full-time /etc/bash_completion.d/
total <span class="token number">72</span>
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">56178</span> <span class="token number">2020</span>-05-28 <span class="token number">16</span>:32:30.000000000 <span class="token parameter variable">-0400</span> <span class="token function">git</span>
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">829</span> <span class="token number">2020</span>-02-05 07:58:44.000000000 <span class="token parameter variable">-0500</span> iprutils
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">11736</span> <span class="token number">2020</span>-03-31 <span class="token number">23</span>:33:31.000000000 <span class="token parameter variable">-0400</span> mercurial.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以指定展示特定时间戳，比如查询文件访问时间：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token parameter variable">--time</span><span class="token operator">=</span>atime 
total <span class="token number">364</span>
-rw-------. <span class="token number">1</span> root root <span class="token number">182023</span> Sep <span class="token number">9</span> 05:51 b.log
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">178</span> Sep <span class="token number">9</span> 05:57 c.log
-rw-------. <span class="token number">1</span> root root <span class="token number">182023</span> Sep <span class="token number">9</span> 05:48 mvau.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用 <code>-F</code> 参数能在文件名末显示该文件的类型：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> <span class="token parameter variable">-F</span> /sbin/
accessdb*              fsfreeze*                   mkdict@ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>结果中可执行文件会在文件名后加*，软链接加@，目录加/，管道加|，并用不同颜色表示结果。</p>
<p>此外，还可以使用 stat 命令来查看某个文件的具体属性，其展示结果一步到位，包括文件大小、块数、I/O 块大小、设备号、Inode 号码、硬链接数量、文件权限、UID 和 GID、SELinux 安全上下文、文件访问时间、修改时间、变化时间和创建时间等信息。例如，查看 <a href="http://ftp.sh">ftp.sh</a> 文件的属性：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span>$ <span class="token function">stat</span> ftp.sh
  File: ‘ftp.sh’
  Size: <span class="token number">52</span>              Blocks: <span class="token number">8</span>          IO Block: <span class="token number">4096</span>   regular <span class="token function">file</span>
Device: fd00h/64768d    Inode: <span class="token number">4215134</span>     Links: <span class="token number">1</span>
Access: <span class="token punctuation">(</span>0644/-rw-r--r--<span class="token punctuation">)</span>  Uid: <span class="token punctuation">(</span>    <span class="token number">0</span>/    root<span class="token punctuation">)</span>   Gid: <span class="token punctuation">(</span>    <span class="token number">0</span>/    root<span class="token punctuation">)</span>
Context: unconfined_u:object_r:admin_home_t:s0
Access: <span class="token number">2021</span>-09-23 <span class="token number">19</span>:18:22.974352478 +0800
Modify: <span class="token number">2021</span>-09-23 <span class="token number">19</span>:18:04.472546785 +0800
Change: <span class="token number">2021</span>-09-23 <span class="token number">19</span>:18:04.473546775 +0800
 Birth: -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中，Size 表示文件大小，Blocks 表示块数，IO Block 表示 I/O 块大小，regular file 表示文件类型为常规文件，Device 表示设备号，Inode 表示 Inode 号码，Links 表示硬链接数量，Access 表示文件访问时间，Modify 表示文件修改时间，Change 表示文件状态更改时间，Birth 表示文件创建时间。</p>
<h1 id="检查文件类型"><a class="markdownIt-Anchor" href="#检查文件类型"></a> 检查文件类型</h1>
<p>想了解某个文件的基本数据类型，可以使用 file 命令。</p>
<p>例如，查看二进制文件 passwd 的信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">file</span> /usr/bin/passwd 
/usr/bin/passwd: setuid ELF <span class="token number">64</span>-bit LSB shared object, x86-64, version <span class="token number">1</span> <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span>, dynamically linked <span class="token punctuation">(</span>uses shared libs<span class="token punctuation">)</span>, <span class="token keyword">for</span> GNU/Linux <span class="token number">2.6</span>.32, BuildID<span class="token punctuation">[</span>sha1<span class="token punctuation">]</span><span class="token operator">=</span>dee1b9ab6618c6bfb84a14f85ba258c742cf4aec, stripped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>再比如，查看日志文件 b.log 的信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">file</span> b.log 
b.log: ASCII text, with very long lines<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="复制文件与目录"><a class="markdownIt-Anchor" href="#复制文件与目录"></a> 复制文件与目录</h1>
<p>使用 <code>cp</code> 命令可以复制文件和文件夹，系统已经为 <code>cp</code> 加入 <code>-i</code> 选项以询问用户是否覆盖文件。</p>
<p>例如，复制当前目录下的 anaconda-ks.cfg 文件到 <code>/home/</code> 下并命名为 anac.cfg:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cp</span> anaconda-ks.cfg /home/anac.cfg <span class="token punctuation">;</span> ll /home
total <span class="token number">4</span>
-rw-------. <span class="token number">1</span> root root <span class="token number">1260</span> Sep  <span class="token number">9</span> 05:12 anac.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>复制文件夹需要使用递归参数 <code>-r</code>，例如复制 <code>/var/log</code> 下的文件夹 audit 到当前目录:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cp</span> <span class="token parameter variable">-r</span> /var/log/audit/ <span class="token builtin class-name">.</span> <span class="token punctuation">;</span> ll ./audit/
total <span class="token number">180</span>
-rw-------. <span class="token number">1</span> root root <span class="token number">182023</span> Sep  <span class="token number">9</span> 05:14 audit.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>复制后的文件属性，如修改时间和权限（所有者变为操作者）会改变。如果要保留源文件属性，可以使用 <code>-a</code> 参数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ ll /var/log/audit/
total <span class="token number">180</span>
-rw-------. <span class="token number">1</span> root root <span class="token number">182023</span> Sep  <span class="token number">9</span> 05:01 audit.log
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ ll audit/
total <span class="token number">180</span>
-rw-------. <span class="token number">1</span> root root <span class="token number">182023</span> Sep  <span class="token number">9</span> 05:14 audit.log
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> audit/ <span class="token punctuation">;</span> <span class="token function">cp</span> <span class="token parameter variable">-ra</span> /var/log/audit/ <span class="token builtin class-name">.</span> <span class="token punctuation">;</span> ll audit/
total <span class="token number">180</span>
-rw-------. <span class="token number">1</span> root root <span class="token number">182023</span> Sep  <span class="token number">9</span> 05:01 audit.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="删除文件与目录"><a class="markdownIt-Anchor" href="#删除文件与目录"></a> 删除文件与目录</h1>
<p>删除文件或文件夹使用 rm 命令。如果需要删除以-开头的特殊文件，需要使用相对路径。</p>
<p>例如，要删除当前目录下的 la.log 和 ha.log 两个文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">rm</span> <span class="token parameter variable">-f</span> la.log ha.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果需要删除文件夹，则需要使用 <code>-r</code> 参数，并且可以使用通配符*。例如，要删除当前文件夹下以 app 开头的所有文件和文件夹：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> app*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="移动和更名文件和目录"><a class="markdownIt-Anchor" href="#移动和更名文件和目录"></a> 移动和更名文件和目录</h1>
<p>在 Linux 中，可以使用 <code>mv</code> 命令移动和更名文件和目录。移动文件或目录会保持其 inode 编号和时间戳不变。</p>
<p>例如，将文件 audit.log 移动到其上级目录并将其更名为 mvau.log：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">mv</span> audit.log <span class="token punctuation">..</span>/mvau.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>也可以同时移动多个文件到指定目录。例如，将 mvau.log 和 b.log 一次性移动到目录 audit 中：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mv</span> mvau.log b.log audit/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="修改文件时间戳"><a class="markdownIt-Anchor" href="#修改文件时间戳"></a> 修改文件时间戳</h1>
<p>在 Linux 系统中，每个文件都有三个时间戳：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Modification Time(<strong>mtime</strong>)  修改时间</td>
<td>当文件<strong>内容更改</strong>时会更新这个时间.不包括文件的属性或权限更改</td>
</tr>
<tr>
<td>Status Time(<strong>ctime</strong>)     状态(创建)时间</td>
<td>当文件<strong>状态改变</strong>时会更新这个时间,比如权限和属性的更改</td>
</tr>
<tr>
<td>Access Time(<strong>atime</strong>)    (上次)访问时间</td>
<td>当文件<strong>内容读取</strong>时会更新这个时间,比如用 cat 或 less 去读取</td>
</tr>
</tbody>
</table>
<p>可以使用 <code>touch</code> 命令来修改文件的时间戳。如果不指定时间，则修改为当前时间。</p>
<p>例如，将 a.log 文件的修改时间和访问时间修改为 2007 年 1 月 1 日 1 点 1 分：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ ll a.log<span class="token punctuation">;</span>ll <span class="token parameter variable">--time</span><span class="token operator">=</span>atime a.log<span class="token punctuation">;</span> ll <span class="token parameter variable">--time</span><span class="token operator">=</span>ctime a.log 
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">0</span> Sep  <span class="token number">9</span> 07:35 a.log
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">0</span> Sep  <span class="token number">9</span> 07:35 a.log
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">0</span> Sep  <span class="token number">9</span> 07:35 a.log
<span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">touch</span> <span class="token parameter variable">-t</span> 0701010101 a.log
<span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ ll a.log<span class="token punctuation">;</span>ll <span class="token parameter variable">--time</span><span class="token operator">=</span>atime a.log<span class="token punctuation">;</span> ll <span class="token parameter variable">--time</span><span class="token operator">=</span>ctime a.log 
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">0</span> Jan  <span class="token number">1</span>  <span class="token number">2007</span> a.log
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">0</span> Jan  <span class="token number">1</span>  <span class="token number">2007</span> a.log
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">0</span> Sep  <span class="token number">9</span> 07:38 a.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="创建文件"><a class="markdownIt-Anchor" href="#创建文件"></a> 创建文件</h1>
<p><code>touch</code> 命令本意用来更新文件时间戳，当文件不存在时会创建一个新的空文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">touch</span> a.log <span class="token punctuation">;</span> ll
total <span class="token number">364</span>
-rw-r--r--. <span class="token number">1</span> root root      <span class="token number">0</span> Sep  <span class="token number">9</span> 07:35 a.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>也可以使用 <code>cat</code> 命令接收用户输入，并将其重定向到文件中：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> <span class="token operator">></span> catfile
<span class="token number">123</span>
<span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>输入完毕后按下 Ctrl+d 组合键以结束输入。</p>
<h1 id="擦除文件内容"><a class="markdownIt-Anchor" href="#擦除文件内容"></a> 擦除文件内容</h1>
<p>当使用 <code>rm</code> 命令删除文件时，实际上只是将文件的块标记为可写，而磁盘上的数据并没有被删除。如果要安全删除文件并保证不留下任何痕迹，可以使用 <code>shred</code> 命令，它会用随机数据对目标文件进行多次覆写。例如，以下命令对名为 www 的文件进行四次覆写，最后填充为零后再删除文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span>$ shred <span class="token parameter variable">-fuvz</span> www 
shred: www: pass <span class="token number">1</span>/4 <span class="token punctuation">(</span>random<span class="token punctuation">)</span><span class="token punctuation">..</span>.
shred: www: pass <span class="token number">2</span>/4 <span class="token punctuation">(</span>random<span class="token punctuation">)</span><span class="token punctuation">..</span>.
shred: www: pass <span class="token number">3</span>/4 <span class="token punctuation">(</span>random<span class="token punctuation">)</span><span class="token punctuation">..</span>.
shred: www: pass <span class="token number">4</span>/4 <span class="token punctuation">(</span>000000<span class="token punctuation">)</span><span class="token punctuation">..</span>.
shred: www: removing
shred: www: renamed to 000
shred: 000: renamed to 00
shred: 00: renamed to <span class="token number">0</span>
shred: www: removed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>需要注意的是，<code>shred</code> 命令并不适用于所有文件系统。例如，ZFS 文件系统会为新数据分配新的数据块，而不是直接覆写旧数据。</p>
<h1 id="连接文件"><a class="markdownIt-Anchor" href="#连接文件"></a> 连接文件</h1>
<p>在 Linux 中，可以使用 <code>ln</code> 命令来连接文件。<code>ln</code> 命令有两种链接方式：硬链接和软链接。</p>
<h2 id="硬连接"><a class="markdownIt-Anchor" href="#硬连接"></a> 硬连接</h2>
<p>硬连接（hard link）是在某个目录 block 数据中新建一条文件名，连接到某个已存在的 inode 号码关联记录。</p>
<p>硬链接特点：</p>
<ul>
<li>新建的硬连接属性权限和源文件一样，修改也和源文件同步，是因为其数据储存在引用的 inode 块中；</li>
<li>一个文件有几个硬连接就有几个 Link Counter；</li>
<li>建立硬连接不占用磁盘空间与 inode 数目。</li>
</ul>
<p>建立硬连接有两个限制：</p>
<ul>
<li>不能跨文件系统，因为不同文件系统有不同 inode；</li>
<li>不能连接到目录。</li>
</ul>
<h2 id="软连接"><a class="markdownIt-Anchor" href="#软连接"></a> 软连接</h2>
<p>软连接（symbolic link）也叫做符号连接或快捷方式，是指向另一个文件或目录的特殊文件。它有自己的 inode 编号和硬链接计数器。但是软链接的内容是源文件的路径名。</p>
<p>软连接文件属性为 l ，使用 <code>ls</code> 查看时会有个 -&gt; 符号指向源文件的路径名。</p>
<p>如果源文件改名或删除，软链接文件将不会指向正确位置，因为其使用文件名作为引用。</p>
<h2 id="目录的连接数量"><a class="markdownIt-Anchor" href="#目录的连接数量"></a> 目录的连接数量</h2>
<p>当新建一个目录时，新的目录连接数为 2。</p>
<p>比如新建目录 <code>/root/1/</code>，另一个硬连接等于 <code>/root/1/.</code>。</p>
<p>而上层目录的连接数会增加 1，也就是增加了 <code>/root/1/..</code> 这个硬连接。</p>
<h2 id="创建连接"><a class="markdownIt-Anchor" href="#创建连接"></a> 创建连接</h2>
<p>使用 <code>ln</code> 和 <code>cp</code> 命令都可以创建连接。默认不加参数使用 <code>ln</code> 建立的就是硬连接：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ <span class="token function">ln</span> hhh hhh_hark<span class="token punctuation">;</span> ll <span class="token parameter variable">-i</span>
total <span class="token number">24</span>
<span class="token number">16</span> -rw-r--r--. <span class="token number">2</span> root root     <span class="token number">4</span> Sep <span class="token number">10</span> 01:57 hhh
<span class="token number">16</span> -rw-r--r--. <span class="token number">2</span> root root     <span class="token number">4</span> Sep <span class="token number">10</span> 01:57 hhh_hark
<span class="token number">11</span> drwx------. <span class="token number">2</span> root root <span class="token number">16384</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:54 lost+found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建符号连接使用参数 <code>-s</code> 来建立：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ <span class="token function">ln</span> <span class="token parameter variable">-s</span> hhh hhh_soft<span class="token punctuation">;</span> ll <span class="token parameter variable">-i</span>
total <span class="token number">24</span>
<span class="token number">16</span> -rw-r--r--. <span class="token number">2</span> root root     <span class="token number">4</span> Sep <span class="token number">10</span> 01:57 hhh
<span class="token number">16</span> -rw-r--r--. <span class="token number">2</span> root root     <span class="token number">4</span> Sep <span class="token number">10</span> 01:57 hhh_hark
<span class="token number">12</span> lrwxrwxrwx. <span class="token number">1</span> root root     <span class="token number">3</span> Sep <span class="token number">10</span> 02:04 hhh_soft -<span class="token operator">></span> hhh
<span class="token number">11</span> drwx------. <span class="token number">2</span> root root <span class="token number">16384</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:54 lost+found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="隐藏属性"><a class="markdownIt-Anchor" href="#隐藏属性"></a> 隐藏属性</h1>
<p>文件和文件夹主要的隐藏属性列表如下：</p>
<table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>访问此文件的 atime 不会被修改，可避免读写较慢的机器过度访问磁盘。</td>
</tr>
<tr>
<td>S</td>
<td>加上此属性后，任何修改都将立即写入硬盘，不在内存中缓存。</td>
</tr>
<tr>
<td>a</td>
<td>设置此属性后，文件只能增加数据，不能删除也不能修改数据。设置在目录上，目录内的文件不能删除。</td>
</tr>
<tr>
<td>c</td>
<td>此文件会自动压缩，读取时自动解压缩。储存时会先进行压缩。</td>
</tr>
<tr>
<td>d</td>
<td>当 dump 执行时，此文件或目录不会被 dump 备份。</td>
</tr>
<tr>
<td>i</td>
<td>文件不能删除、改名、修改。设置在目录上表示不允许在目录内建立和删除文件。</td>
</tr>
<tr>
<td>s</td>
<td>如果文件被删除，立即将原先位置填充，完全销毁数据。</td>
</tr>
<tr>
<td>u</td>
<td>开启回收站功能，文件被删除后还能恢复。</td>
</tr>
</tbody>
</table>
<p>上表是在 ext 文件系统中可用的属性，xfs 文件系统仅支持部分隐藏属性。</p>
<h2 id="设置隐藏属性"><a class="markdownIt-Anchor" href="#设置隐藏属性"></a> 设置隐藏属性</h2>
<p>使用 <code>chattr</code> 命令来给文件设置隐藏属性。例如给文件 1 加上 i 和 a 属性：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ chattr +ia <span class="token number">1</span>
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token number">1</span>
rm: cannot remove <span class="token string">'1'</span><span class="token builtin class-name">:</span> Operation not permitted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>取消文件的隐藏属性 i：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ chattr <span class="token parameter variable">-i</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果设置对象是文件夹，使用 <code>-R</code> 可以递归修改，在文件夹中新建的文件会继承隐藏属性。</p>
<h2 id="显示文件隐藏属性"><a class="markdownIt-Anchor" href="#显示文件隐藏属性"></a> 显示文件隐藏属性</h2>
<p>使用 <code>lsattr</code> ming’l 来查看文件或目录的隐藏属性：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ lsattr <span class="token parameter variable">-R</span>
---------------- ./anaconda-ks.cfg
---------------- ./audit

./audit:
---------------- ./audit/mvau.log
---------------- ./audit/b.log

---------------- ./2
--S--adA-------- ./3

./3:
--S--adA-------- ./3/3

--S-ia-A-------- ./1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux</category>
        <category>1.基本操作</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 下搜索文件</title>
    <url>/3570307132/</url>
    <content><![CDATA[<h1 id="通配符"><a class="markdownIt-Anchor" href="#通配符"></a> 通配符</h1>
<p>通配符（wildcard）是 Bash 操作接口的一个功能。常用的通配符如下表：</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>代表 0 到无穷多个任意字符。</td>
</tr>
<tr>
<td>?</td>
<td>代表一定有一个任意字符。</td>
</tr>
<tr>
<td>[]</td>
<td>代表一定有一个括号内的字符，例如 [xgw] 代表可能是 xgw 其中一个。</td>
</tr>
<tr>
<td>[-]</td>
<td>代表在编码顺序内的所有字符，例如 [0-9] 代表 0 到 9 之间的所有数字。</td>
</tr>
<tr>
<td>[^]</td>
<td>第一个字符为 ^ 代表反向选择，例如 [^xpw]代表任意一个非 xpw 的字符。</td>
</tr>
</tbody>
</table>
<h1 id="快速搜索"><a class="markdownIt-Anchor" href="#快速搜索"></a> 快速搜索</h1>
<p>在 Linux 中，可以使用不同的命令进行快速搜索，以下是一些常用命令。</p>
<p>使用 <code>which</code> 命令来查找命令所在路径。这个命令根据的是$PATH 环境变量所指定的路径去查询：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">which</span> <span class="token function">ls</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ls</span><span class="token operator">=</span><span class="token string">'ls --color=auto'</span>
        /usr/bin/ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><code>whereis</code> 命令会在指定的几个常用目录中搜索文件，使用 <code>-l</code> 参数可以查看可搜索的目录。</p>
<p><code>whereis</code> 命令可以搜索以下类型的文件：二进制文件（<code>-b</code>）、说明文件（<code>-m</code>）、源代码（<code>-s</code>）和其他特殊文件（<code>-u</code>）。</p>
<p>例如搜索和 <code>ifconfig</code> 有关的说明文档：</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">whereis</span> <span class="token parameter variable">-m</span> <span class="token function">ifconfig</span>
ifconfig: /usr/share/man/man8/ifconfig.8.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>locate</code> 命令使用数据库来查找文件。数据库存放在 <code>/var/lib/mlocate/</code> 目录下，每天会更新一次。若需要手动更新数据库，可以使用 <code>updatedb</code> 命令。</p>
<p>例如忽略大小写搜索与 <code>passwd</code> 有关的文件，并列出前四个结果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">locate</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-l</span> <span class="token number">4</span> <span class="token function">passwd</span>
/etc/passwd
/etc/passwd-
/etc/pam.d/passwd
/etc/security/opasswd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="精确搜索"><a class="markdownIt-Anchor" href="#精确搜索"></a> 精确搜索</h1>
<p>精确搜索指使用<code>find</code>命令执行的搜索。</p>
<h2 id="按时间搜索文件"><a class="markdownIt-Anchor" href="#按时间搜索文件"></a> 按时间搜索文件</h2>
<p>与时间有关的参数有<code>-atime</code>，<code>-ctime</code>和<code>-mtime</code>：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-mtime n</code></td>
<td>表示在 n 天之前那天内被更改过的文件；</td>
</tr>
<tr>
<td><code>-mtime +n</code></td>
<td>列出在 n 天之前（不含 n）被更改过的文件，文件修改日期大于等于 n+1 天；</td>
</tr>
<tr>
<td><code>-mtime -n</code></td>
<td>列出在 n 天之内（包含 n）被更改过的文件，文件修改日期小于等于 n 天；</td>
</tr>
<tr>
<td><code>-newer file</code></td>
<td>列出比<code>file</code>还要新的文件名。</td>
</tr>
</tbody>
</table>
<p>例如，搜索过去系统上 24 小时内有更改过的文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">find</span> / <span class="token parameter variable">-mtime</span> <span class="token number">0</span>
/dev/char
/dev/char/189:132<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>查找当前目录下修改时间在 5 分钟到 24 小时之间的文件：</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">find</span> <span class="token parameter variable">-mtime</span> <span class="token number">0</span> <span class="token parameter variable">-mmin</span> +5
<span class="token builtin class-name">.</span>
./.bash_history
./audit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>寻找<code>/etc</code>目录下比<code>/etc/passwd</code>文件日期新的文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">find</span> /etc <span class="token parameter variable">-newer</span> /etc/passwd <span class="token operator">|</span> <span class="token function">tail</span> 
/etc/audit/audit.rules
/etc/postfix
/etc/kernel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>查找<code>/root</code>目录下更改时间在 5 天前的文件并删除：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">find</span> /root <span class="token parameter variable">-type</span> f <span class="token parameter variable">-mtime</span> +5 <span class="token parameter variable">-ok</span> rm<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>删除当前目录中访问时间在 7 天以前，含有数字后缀的<code>admin.log</code>文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"admin.log[0-9][0-9][0-9]"</span> <span class="token parameter variable">-atime</span> <span class="token parameter variable">-7</span> <span class="token parameter variable">-exec</span> <span class="token function">rm</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="按用户名及组名搜索"><a class="markdownIt-Anchor" href="#按用户名及组名搜索"></a> 按用户名及组名搜索</h2>
<p>可以使用 <code>find</code> 命令按照文件的所有者和用户组来搜索文件，常用参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-uid n</code></td>
<td>按照用户 UID 来搜索</td>
</tr>
<tr>
<td><code>-gid n</code></td>
<td>按用户组 GID 来搜索</td>
</tr>
<tr>
<td><code>-user name</code></td>
<td>按用户名来搜索</td>
</tr>
<tr>
<td><code>-group name</code></td>
<td>按用户组名来搜索</td>
</tr>
<tr>
<td><code>-nouser</code></td>
<td>搜索文件的所有者不存在 <code>/etc/passwd</code> 的人</td>
</tr>
<tr>
<td><code>-nogroup</code></td>
<td>搜索所有用户组不存在 <code>/etc/group</code> 中的文件</td>
</tr>
</tbody>
</table>
<p>例如查找 <code>/home</code> 目录下属于用户 abc 的文件:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">find</span> /home <span class="token parameter variable">-user</span> abc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查找系统中不属于任何人的文件:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">find</span> / <span class="token parameter variable">-nouser</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="按文件名及属性搜索"><a class="markdownIt-Anchor" href="#按文件名及属性搜索"></a> 按文件名及属性搜索</h2>
<p>主要参数:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-name filename</td>
<td>搜索文件名为 filename 的文件</td>
</tr>
<tr>
<td>-iname filename</td>
<td>忽略大小写，搜索文件名为 filename 的文件</td>
</tr>
<tr>
<td>-size [±]SIZE</td>
<td>搜索大小比 SIZE 大（+）或小（-）的文件，大小单位有 c、k、m、g 等</td>
</tr>
<tr>
<td>-type TYPE</td>
<td>搜索文件类型为 TYPE 的文件，如一般文件（f）、设备文件（b、c）、目录（d）、连接（l）、socket（s）等</td>
</tr>
<tr>
<td>-perm mode</td>
<td>搜索权限刚好等于 mode 的文件，如 mode 为 4775</td>
</tr>
<tr>
<td>-perm -mode</td>
<td>搜索权限必须全部包括 mode 的权限，如 mode 为 0744，会找到权限为 4775 的文件</td>
</tr>
<tr>
<td>-perm +mode</td>
<td>搜索权限包含任一 mode 的权限，如 mode 为 755 时，会找到权限为 101 的文件</td>
</tr>
</tbody>
</table>
<p>例如，在当前目录中查找文件 redis-3.2.6.tar.gz 并删除：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">find</span> <span class="token parameter variable">-name</span> redis-3.2.6.tar.gz <span class="token parameter variable">-delete</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>忽略大小写，在 <code>/etc</code> 目录下搜索 ssh 文件或目录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">find</span> /etc <span class="token parameter variable">-iname</span> <span class="token function">ssh</span>
/etc/ssh
/etc/selinux/targeted/active/modules/100/ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在 <code>/etc</code> 目录中查找以 rc 开头的文件，并以列表形式显示：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">find</span> /etc <span class="token parameter variable">-name</span> rc* <span class="token parameter variable">-ls</span>
<span class="token number">50332831</span>    <span class="token number">0</span> drwxr-xr-x  <span class="token number">10</span> root     root          <span class="token number">127</span> Sep  <span class="token number">7</span> 05:53 /etc/rc.d
<span class="token number">16781412</span>    <span class="token number">0</span> drwxr-xr-x   <span class="token number">2</span> root     root           <span class="token number">45</span> Oct <span class="token number">13</span>  <span class="token number">2020</span> /etc/rc.d/rc0.d
<span class="token number">33644238</span>    <span class="token number">0</span> drwxr-xr-x   <span class="token number">2</span> root     root           <span class="token number">45</span> Oct <span class="token number">13</span>  <span class="token number">2020</span> /etc/rc.d/rc1.d
<span class="token number">50332832</span>    <span class="token number">0</span> drwxr-xr-x   <span class="token number">2</span> root     root           <span class="token number">45</span> Oct <span class="token number">13</span>  <span class="token number">2020</span> /etc/rc.d/rc2.d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 <code>/root</code> 目录下搜索所有小于 1MB 的文件，用 <code>-size -1M</code> 参数等同于 <code>-size 0M</code>，需要注意。这是个 ChatGPT 都会答错的问题：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">find</span> /root <span class="token parameter variable">-size</span> <span class="token parameter variable">-1M</span>
/root/audit/a.log
/root/3/3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>查找 <code>/root</code> 目录下大于 10KB 并且（<code>-a</code> 表示“与”）小于 2M 的普通文件，并以列表形式显示：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">find</span> /root <span class="token parameter variable">-type</span> f <span class="token parameter variable">-size</span> +10k <span class="token parameter variable">-a</span> <span class="token parameter variable">-size</span> <span class="token parameter variable">-2M</span> <span class="token parameter variable">-exec</span> <span class="token function">ls</span> <span class="token parameter variable">-lh</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span>
-rw-------. <span class="token number">1</span> root root 17K Sep <span class="token number">16</span> 03:15 /root/.bash_history
-rw-------. <span class="token number">1</span> root root 178K Sep  <span class="token number">9</span> 05:48 /root/audit/b.log
-rw-r--r--. <span class="token number">1</span> root root 30K Sep <span class="token number">10</span> <span class="token number">15</span>:05 /root/backup/sdb4.dump
-rw-r--r--. <span class="token number">1</span> root root 11K Sep <span class="token number">10</span> <span class="token number">14</span>:39 /root/backup/lost.dump.bz2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查找当前目录中的所有目录并排序：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> d <span class="token operator">|</span> <span class="token function">sort</span>
<span class="token builtin class-name">.</span>
./3
./audit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>在当前目录下查找除普通文件以外的所有类型的文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token operator">!</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-print</span>
<span class="token builtin class-name">.</span>
./.pki
./.pki/nssdb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>查找 <code>/bin</code> 和 <code>/sbin</code> 目录下中含有 SGID, SUID 或 SBIT 属性的文件:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">find</span> /bin /sbin <span class="token parameter variable">-perm</span> +7000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="处理搜索结果"><a class="markdownIt-Anchor" href="#处理搜索结果"></a> 处理搜索结果</h2>
<p><code>find</code> 命令可以接受表达式，表达式可能由下列成份组成：操作符、选项、测试表达式以及动作。</p>
<p>常见动作有 <code>-print</code>（打印输出，默认动作）、<code>-ls</code>（显示长目录列表）、<code>-delete</code>（删除文件）。</p>
<p><code>-exec</code> 选项后面跟命令（不支持别名）或脚本，然后是大括号 <code>&#123;&#125;</code> 表示由 <code>find</code> 找到的路径名，一个空格，接 <code>\</code> 用来转义分号；表示命令结束。相应命令的形式为 <code>command &#123;&#125; \</code>；</p>
<p><code>-ok</code> 和 <code>-exec</code> 的作用相同，只不过在执行每一个命令之前都会给出提示，让用户来确定是否执行。</p>
<p>例如在 <code>/etc</code> 目录中搜索 <code>passwd</code> 文件并从中找 <code>root</code> 相关信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">find</span> /etc <span class="token parameter variable">-name</span> <span class="token string">"passwd*"</span> <span class="token parameter variable">-exec</span> <span class="token function">grep</span> <span class="token string">"root"</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span>
root:x:0:0:root:/root:/bin/bash
operator:x:11:0:operator:/root:/sbin/nologin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在 <code>/usr/sam</code> 目录下查找不在 <code>dir1</code> 子目录之内的所有文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">find</span> /usr/sam <span class="token parameter variable">-path</span> <span class="token string">"/usr/sam/dir1"</span> <span class="token parameter variable">-prune</span> <span class="token parameter variable">-o</span> <span class="token parameter variable">-print</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>复制搜索到的文件到 <code>backup</code> 目录下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-exec</span> <span class="token function">cp</span> <span class="token parameter variable">--parents</span>  <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> ./backup/ <span class="token punctuation">\</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>-exec</code> 为每个文件生成一条单独的命令，例如搜索到 57 个文件，那么将生成 57 条单独命令。如果想要提高效率，可以使用 <code>xargs</code> 运行任何使用参数指定的命令，参数通过标准输入传递给程序。</p>
<p>例如配合 <code>grep</code> 在 <code>find</code> 找到的文件中搜寻特定内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span>$ <span class="token function">find</span> /var <span class="token parameter variable">-name</span> *.log <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span> <span class="token string">"notice"</span>
/var/log/anaconda/X.log:        <span class="token punctuation">(</span>++<span class="token punctuation">)</span> from <span class="token builtin class-name">command</span> line, <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">)</span> notice, <span class="token punctuation">(</span>II<span class="token punctuation">)</span> informational,
/var/log/anaconda/journal.log:Sep <span class="token number">22</span> <span class="token number">13</span>:09:41 localhost kernel: <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token number">1107</span> audit<span class="token punctuation">(</span><span class="token number">1632316181.830</span>:44<span class="token punctuation">)</span>: <span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token number">1577</span> <span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">auid</span><span class="token operator">=</span><span class="token number">4294967295</span> <span class="token assign-left variable">ses</span><span class="token operator">=</span><span class="token number">4294967295</span> <span class="token assign-left variable">subj</span><span class="token operator">=</span>system_u:system_r:system_dbusd_t:s0-s0:c0.c1023 <span class="token assign-left variable">msg</span><span class="token operator">=</span>'avc:  received policyload notice <span class="token punctuation">(</span>seqno<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>将搜索到的文件重命名，可以在 <code>xargs</code> 中使用 <code>&#123;&#125;</code> 占位符来代表搜索结果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"back.sh*"</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-i</span> <span class="token function">mv</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>.dele
<span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span>$ ll back*
-rwxr--r--. <span class="token number">1</span> root root <span class="token number">52</span> Oct  <span class="token number">7</span> 06:15 back.sh1.dele
-rwxr--r--. <span class="token number">2</span> root root <span class="token number">52</span> Sep <span class="token number">23</span> <span class="token number">19</span>:18 back.sh.dele<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux</category>
        <category>1.基本操作</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 文件内容查看</title>
    <url>/1251081056/</url>
    <content><![CDATA[<h1 id="一次性输出"><a class="markdownIt-Anchor" href="#一次性输出"></a> 一次性输出</h1>
<p>在 Linux 中，可以使用 <code>cat</code> 和 <code>tac</code> 命令一次性将文本内容打印出来，即将标准输入的数据复制到标准输出。</p>
<p><code>cat</code> 是 Catenate 的缩写，从第一行开始显示文件内容。另外一个重要的应用是组合多个文件。如果没有指定文件或文件为 <code>-</code>，则从标准输入读取。</p>
<p>例如，要查看 <code>c.log</code> 文件的内容，并使用 <code>-b</code> 参数来显示行号（不计空行，计空行使用 <code>-n</code>）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">cat</span> <span class="token parameter variable">-b</span> c.log 
     <span class="token number">1</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>CRED_DISP <span class="token assign-left variable">msg</span><span class="token operator">=</span>audit<span class="token punctuation">(</span><span class="token number">1631178061.322</span>:415<span class="token punctuation">)</span>
     <span class="token number">2</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>USER_END <span class="token assign-left variable">msg</span><span class="token operator">=</span>audit<span class="token punctuation">(</span><span class="token number">1631178061</span>
     <span class="token number">3</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>USER_START <span class="token assign-left variable">msg</span><span class="token operator">=</span>audit<span class="token punctuation">(</span><span class="token number">163</span>
     <span class="token number">4</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>CRED_DISP <span class="token assign-left variable">msg</span><span class="token operator">=</span>audi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用 <code>-A</code> 参数可以将特殊字符打印出来，例如 <code>[Tab]</code> 显示为 <code>^I</code>，<code>[Enter]</code> 换行显示为 <code>$</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">cat</span> <span class="token parameter variable">-nA</span> c.log 
     <span class="token number">1</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>CRED_DISP <span class="token assign-left variable">msg</span><span class="token operator">=</span>audit<span class="token punctuation">(</span><span class="token number">1631178061.322</span>:415<span class="token punctuation">)</span>
     <span class="token number">2</span> ^Itype<span class="token operator">=</span>USER_END <span class="token assign-left variable">msg</span><span class="token operator">=</span>audit<span class="token punctuation">(</span><span class="token number">1631178061</span>$
     <span class="token number">3</span>   <span class="token assign-left variable">type</span><span class="token operator">=</span>USER_START <span class="token assign-left variable">msg</span><span class="token operator">=</span>audit<span class="token punctuation">(</span><span class="token number">163</span>$
     <span class="token number">4</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>CRED_DISP <span class="token assign-left variable">msg</span><span class="token operator">=</span>audi$
     <span class="token number">5</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>cat</code> 命令的一个常见用途是将多个文件内容组合到一个文件中：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> ftp.sh ca.srl <span class="token operator">>></span> newfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用 <code>tac</code> 命令可以倒序输出文件内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">tac</span> c.log 
<span class="token assign-left variable">type</span><span class="token operator">=</span>CRED_DISP <span class="token assign-left variable">msg</span><span class="token operator">=</span>audi
  <span class="token assign-left variable">type</span><span class="token operator">=</span>USER_START <span class="token assign-left variable">msg</span><span class="token operator">=</span>audit<span class="token punctuation">(</span><span class="token number">163</span>
       <span class="token assign-left variable">type</span><span class="token operator">=</span>USER_END <span class="token assign-left variable">msg</span><span class="token operator">=</span>audit<span class="token punctuation">(</span><span class="token number">1631178061</span>
<span class="token assign-left variable">type</span><span class="token operator">=</span>CRED_DISP <span class="token assign-left variable">msg</span><span class="token operator">=</span>audit<span class="token punctuation">(</span><span class="token number">1631178061.322</span>:415<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果要将每行的内容反转输出，可以使用 <code>rev</code> 命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server3 ~<span class="token punctuation">]</span>$ <span class="token function">rev</span> ftp.sh 
gro.miv.ptf nepo
bup <span class="token function">dc</span>
txt.tahWdniFoTerehW teg
eyb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用 <code>nl</code> 命令可以自定义行号位置打印文件内容，例如给行号加零填充：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">nl</span> <span class="token parameter variable">-n</span> rz c.log 
000001 <span class="token assign-left variable">type</span><span class="token operator">=</span>CRED_DISP <span class="token assign-left variable">msg</span><span class="token operator">=</span>audit<span class="token punctuation">(</span><span class="token number">1631178061.322</span>:415<span class="token punctuation">)</span>
000002  <span class="token assign-left variable">type</span><span class="token operator">=</span>USER_END <span class="token assign-left variable">msg</span><span class="token operator">=</span>audit<span class="token punctuation">(</span><span class="token number">1631178061</span>
000003   <span class="token assign-left variable">type</span><span class="token operator">=</span>USER_START <span class="token assign-left variable">msg</span><span class="token operator">=</span>audit<span class="token punctuation">(</span><span class="token number">163</span>
000004 <span class="token assign-left variable">type</span><span class="token operator">=</span>CRED_DISP <span class="token assign-left variable">msg</span><span class="token operator">=</span>audi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="阅读文件"><a class="markdownIt-Anchor" href="#阅读文件"></a> 阅读文件</h1>
<p>使用 <code>more</code> 命令可以查看文件内容并逐页翻阅：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">more</span> nohup.out
Vim: Warning: Output is not to a terminal
Vim: Warning: Input is not from a terminal
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
--More--<span class="token punctuation">(</span><span class="token number">23</span>%<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当文件内容超过一页时，会提示 <code>--More--</code>，此时可以使用以下按键进行操作：</p>
<table>
<thead>
<tr>
<th>按键</th>
<th><strong>功能</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>空格(space)</td>
<td>向下翻一页</td>
</tr>
<tr>
<td>回车(enter)</td>
<td>向下滚动一行</td>
</tr>
<tr>
<td>/字符串</td>
<td>向下搜索关键字,定位到那一页</td>
</tr>
<tr>
<td>:f</td>
<td>显示文件名以及当前行数</td>
</tr>
<tr>
<td>q</td>
<td>退出</td>
</tr>
<tr>
<td>b</td>
<td>往回翻页,对管道无用</td>
</tr>
<tr>
<td>v</td>
<td>调用 vi 编辑器</td>
</tr>
</tbody>
</table>
<p>使用<code>less</code>命令查看文件时，可以使用方向键进行导航：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">less</span> nohup.out
Vim: Warning: Output is not to a terminal
Vim: Warning: Output is not to a terminal
<span class="token builtin class-name">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>进入查看页面后，可以使用以下键盘按键：</p>
<table>
<thead>
<tr>
<th>按键</th>
<th><strong>功能</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>PageUp/PageDown</td>
<td>向上/向下翻页。</td>
</tr>
<tr>
<td>方向键上/方向键下</td>
<td>向上/向下滚动一行。</td>
</tr>
<tr>
<td>/字符串&amp;?字符串</td>
<td>向下&amp;向上查询字符串。</td>
</tr>
<tr>
<td>n/N</td>
<td>向下/向上重复查询。</td>
</tr>
<tr>
<td>v</td>
<td>启动 vi 编辑器编辑当前文件。</td>
</tr>
<tr>
<td>q</td>
<td>离开。</td>
</tr>
<tr>
<td>h</td>
<td>帮助文件。</td>
</tr>
</tbody>
</table>
<p>可以通过设置环境变量 PAGER 来指定希望使用的分页程序。</p>
<h1 id="数据选取"><a class="markdownIt-Anchor" href="#数据选取"></a> 数据选取</h1>
<p><code>head</code> 命令可以设定从文件开头开始选取多少行的内容。例如，要查看 nohup.out 文件的前 2 行内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">head</span> <span class="token parameter variable">-2</span> nohup.out
Vim: Warning: Output is not to a terminal
Vim: Warning: Input is not from a terminal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><code>tail</code> 命令则从文件后面开始取多少行的内容并显示出来。例如，要选取查看 list.txt 文件最后 1 行的内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">tail</span> <span class="token parameter variable">-1</span> list.txt
/tmp/etc/skel/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可以加上 <code>-f</code> 参数来持续打印文件内容，这在查看日志文件时非常有用：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">tail</span> <span class="token parameter variable">-f</span> nohup.out 
Vim: Error reading input, exiting<span class="token punctuation">..</span>.sers package to sandbox the tcsd daemon:/devv
Vim: Finished.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这将持续打印 nohup.out 文件的内容，直到手动停止命令。</p>
<h1 id="二进制文件查看"><a class="markdownIt-Anchor" href="#二进制文件查看"></a> 二进制文件查看</h1>
<p>使用普通的文本查看命令查看二进制文件会显示乱码，可以使用 <code>od</code> 命令来查阅二进制文件。</p>
<p>例如，以默认八进制方式查看 <code>passwd</code> 文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ od /bin/passwd <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">10</span>
0000000 042577 043114 000402 000001 000000 000000 000000 000000
0000020 000003 000076 000001 000000 031110 000000 000000 000000
0000040 000100 000000 000000 000000 062620 000000 000000 000000
0000060 000000 000000 000100 000070 000011 000100 000035 000034
0000100 000006 000000 000005 000000 000100 000000 000000 000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用 <code>-t</code> 参数指定显示格式，例如将十六位进制与 ASCII 字符同时显示：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ od <span class="token parameter variable">-t</span> xCc c.log
0000000  <span class="token number">74</span>  <span class="token number">79</span>  <span class="token number">70</span>  <span class="token number">65</span>  3d  <span class="token number">43</span>  <span class="token number">52</span>  <span class="token number">45</span>  <span class="token number">44</span>  5f  <span class="token number">44</span>  <span class="token number">49</span>  <span class="token number">53</span>  <span class="token number">50</span>  <span class="token number">20</span>  6d
          t   y   p   e   <span class="token operator">=</span>   C   R   E   D   _   D   I   S   P       m
0000020  <span class="token number">73</span>  <span class="token number">67</span>  3d  <span class="token number">61</span>  <span class="token number">75</span>  <span class="token number">64</span>  <span class="token number">69</span>  <span class="token number">74</span>  <span class="token number">28</span>  <span class="token number">31</span>  <span class="token number">36</span>  <span class="token number">33</span>  <span class="token number">31</span>  <span class="token number">31</span>  <span class="token number">37</span>  <span class="token number">38</span>
          s   g   <span class="token operator">=</span>   a   u   d   i   t   <span class="token punctuation">(</span>   <span class="token number">1</span>   <span class="token number">6</span>   <span class="token number">3</span>   <span class="token number">1</span>   <span class="token number">1</span>   <span class="token number">7</span>   <span class="token number">8</span>
0000040  <span class="token number">30</span>  <span class="token number">36</span>  <span class="token number">31</span>  2e  <span class="token number">33</span>  <span class="token number">32</span>  <span class="token number">32</span>  3a  <span class="token number">34</span>  <span class="token number">31</span>  <span class="token number">35</span>  <span class="token number">29</span>  3a  <span class="token number">20</span>  <span class="token number">70</span>  <span class="token number">69</span>
          <span class="token number">0</span>   <span class="token number">6</span>   <span class="token number">1</span>   <span class="token builtin class-name">.</span>   <span class="token number">3</span>   <span class="token number">2</span>   <span class="token number">2</span>   <span class="token builtin class-name">:</span>   <span class="token number">4</span>   <span class="token number">1</span>   <span class="token number">5</span>   <span class="token punctuation">)</span>   <span class="token builtin class-name">:</span>       p   i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以使用 <code>hexdump</code> 命令来查看二进制文件，唯一区别是 <code>hexdump</code> 默认情况下以十六进制显示数据：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server3 ~<span class="token punctuation">]</span>$ hexdump <span class="token parameter variable">-C</span> /usr/bin/scsi_temperature
00000000  <span class="token number">23</span> <span class="token number">21</span> 2f <span class="token number">62</span> <span class="token number">69</span> 6e 2f <span class="token number">62</span>  <span class="token number">61</span> <span class="token number">73</span> <span class="token number">68</span> 0a 0a <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span>  <span class="token operator">|</span><span class="token comment">#!/bin/bash..###|</span>
00000010  <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span>  <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span>  <span class="token operator">|</span><span class="token comment">################|</span>
*
00000050  0a <span class="token number">23</span> 0a <span class="token number">23</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">43</span> <span class="token number">68</span>  <span class="token number">65</span> <span class="token number">63</span> 6b <span class="token number">20</span> <span class="token number">74</span> <span class="token number">68</span> <span class="token number">65</span> <span class="token number">20</span>  <span class="token operator">|</span><span class="token builtin class-name">.</span><span class="token comment">#.#  Check the |</span>
00000060  <span class="token number">74</span> <span class="token number">65</span> 6d <span class="token number">70</span> <span class="token number">65</span> <span class="token number">72</span> <span class="token number">61</span> <span class="token number">74</span>  <span class="token number">75</span> <span class="token number">72</span> <span class="token number">65</span> <span class="token number">20</span> 6f <span class="token number">66</span> <span class="token number">20</span> <span class="token number">74</span>  <span class="token operator">|</span>temperature of t<span class="token operator">|</span>
00000070  <span class="token number">68</span> <span class="token number">65</span> <span class="token number">20</span> <span class="token number">67</span> <span class="token number">69</span> <span class="token number">76</span> <span class="token number">65</span> 6e  <span class="token number">20</span> <span class="token number">53</span> <span class="token number">43</span> <span class="token number">53</span> <span class="token number">49</span> <span class="token number">20</span> <span class="token number">64</span> <span class="token number">65</span>  <span class="token operator">|</span>he given SCSI de<span class="token operator">|</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面二进制数据显示方式叫规范格式（Canonical Format）。每行最左边是十六进制表示的偏移，中间 16 个字节是实际数据，右边为相应 ASCII 字符。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>1.基本操作</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 基本目录操作</title>
    <url>/735422586/</url>
    <content><![CDATA[<h1 id="路径"><a class="markdownIt-Anchor" href="#路径"></a> 路径</h1>
<p>根据文件名写法不同，可以分为绝对路径（absolute）和相对路径（relative）：</p>
<ul>
<li>
<p><strong>绝对路径</strong></p>
<p>由根目录开始写起的文件或目录名称，定义了在虚拟目录结构中该文件的确切位置。例如 <code>/home/base/.bashrc</code>。</p>
</li>
<li>
<p><strong>相对路径</strong></p>
<p>基于目前位置的路径写法。例如 <code>./base/.bashrc</code> 或 <code>../../home/base/</code> 等。</p>
</li>
</ul>
<p>Linux 中有些比较特殊的目录表示符号如下表：</p>
<table>
<thead>
<tr>
<th><strong>符号</strong></th>
<th><strong>意义</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>此层目录</td>
</tr>
<tr>
<td>…</td>
<td>上一层目录</td>
</tr>
<tr>
<td>-</td>
<td>前一个工作目录</td>
</tr>
<tr>
<td>~</td>
<td>目前用户身份所在的主文件夹</td>
</tr>
<tr>
<td>~account</td>
<td>代表 account 这个用户的主文件夹</td>
</tr>
</tbody>
</table>
<h1 id="显示当前目录"><a class="markdownIt-Anchor" href="#显示当前目录"></a> 显示当前目录</h1>
<p>使用 <code>pwd</code> 命令（Print Working Directory 的缩写）显示目前所在目录。</p>
<p>如显示当前路径：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 init.d<span class="token punctuation">]</span>$ <span class="token builtin class-name">pwd</span>
/etc/init.d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>追踪链接文件显示实际路径加 <code>-P</code> 参数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 init.d<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> /var/mail <span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span>
/var/mail
<span class="token punctuation">[</span>root@101c7 mail<span class="token punctuation">]</span>$ <span class="token builtin class-name">pwd</span> <span class="token parameter variable">-P</span>
/var/spool/mail<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="切换目录"><a class="markdownIt-Anchor" href="#切换目录"></a> 切换目录</h1>
<p>切换目录使用 <code>cd</code> 命令（change directory 的缩写）。</p>
<p>例如进入到用户 abc 主目录下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> ~abc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用绝对路径写法进入到 <code>/etc/fonts/</code> 目录中：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> /etc/fonts/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>回退到上个目录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> -
/etc/fonts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>使用相对路径写法进入到上级目录下的 init.d 目录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 fonts<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/init.d/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>不接参数直接进入当前用户的主目录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> <span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span>
/root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="新建目录"><a class="markdownIt-Anchor" href="#新建目录"></a> 新建目录</h1>
<p>使用 <code>mkdir</code> 命令（make directory 的简写）来建立目录。</p>
<p>如建立一个名为 test1 的目录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> test1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以用 -p 参数建立嵌套目录，比如建立 test2 文件夹后，在其下建立 test3 文件夹：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> test2/test3 <span class="token punctuation">;</span> ll test2
total <span class="token number">0</span>
drwxr-xr-x. <span class="token number">2</span> root root <span class="token number">6</span> Sep <span class="token number">9</span> 04:19 test3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>可以同时创建多个目录，目录名之间用空格分开。如一次建立 a1、b2、c3 三个文件夹：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> a1 b2 c3 <span class="token punctuation">;</span> ll
total <span class="token number">3</span>
drwxr-xr-x. <span class="token number">2</span> root root <span class="token number">6</span> Sep <span class="token number">9</span> 04:21 a1
drwxr-xr-x. <span class="token number">2</span> root root <span class="token number">6</span> Sep <span class="token number">9</span> 04:21 b2
drwxr-xr-x. <span class="token number">2</span> root root <span class="token number">6</span> Sep <span class="token number">9</span> 04:21 c3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>新建目录默认权限是 755，可以用 <code>-m</code> 参数在创建目录时自定义权限，比如建立权限为 777 的文件夹 decay：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 a1<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> <span class="token parameter variable">-m</span> <span class="token number">777</span> decay <span class="token punctuation">;</span> ll
total <span class="token number">0</span>
drwxrwxrwx. <span class="token number">2</span> root root <span class="token number">6</span> Sep <span class="token number">9</span> 04:23 decay<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="删除空目录"><a class="markdownIt-Anchor" href="#删除空目录"></a> 删除空目录</h1>
<p>使用 <code>rmdir</code> 只能删除空目录。例如同时删除空目录 b2、c3：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">rmdir</span> b2 c3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以加入 <code>-p</code> 来递归删除多级空目录。例如删除 decay 目录下面的空文件夹 cc，再删除 decay 目录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 a1<span class="token punctuation">]</span>$ ll
total <span class="token number">0</span>
drwxrwxrwx. <span class="token number">3</span> root root <span class="token number">16</span> Sep <span class="token number">9</span> 04:31 decay
<span class="token punctuation">[</span>root@101c7 a1<span class="token punctuation">]</span>$ <span class="token function">rmdir</span> <span class="token parameter variable">-p</span> decay/cc/ <span class="token punctuation">;</span> ll
total <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="查询目录大小"><a class="markdownIt-Anchor" href="#查询目录大小"></a> 查询目录大小</h1>
<p>使用 <code>du</code> 可以查询到文件或目录所占大小。列出当前目录下面所有文件与目录大小：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ <span class="token function">du</span> <span class="token parameter variable">-ha</span>
102K    ./100K2
21M     ./1.copy
21M     ./lost+found/1.copy
21M     ./lost+found
<span class="token number">2</span>.0K    ./a.cfg
21M     ./1.iso
<span class="token number">2</span>.0K    ./users/jill.txt
<span class="token number">4</span>.0K    ./users
102K    ./100K
61M     <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最末一行显示整个文件夹大小为 61MB。</p>
<p>只统计当前目录下文件和文件夹（不列出文件夹下文件）大小，不包括隐藏文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ <span class="token function">du</span> <span class="token parameter variable">-sh</span> *
102K    ./100K
102K    ./100K2
21M     ./1.copy
21M     ./1.iso
<span class="token number">2</span>.0K    ./a.cfg
21M     ./lost+found
<span class="token number">4</span>.0K    ./users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>统计包含隐藏文件和文件夹大小：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-250 ~<span class="token punctuation">]</span>$ <span class="token function">du</span> <span class="token parameter variable">-h</span> --max-depth<span class="token operator">=</span><span class="token number">1</span>
<span class="token number">0</span>       ./.pki
16M     ./.kube
16K     ./.ssh
<span class="token number">0</span>       ./.git-credential-cache
<span class="token number">8</span>.0K    ./.docker
124K    ./.mizu
40K     ./.cache
<span class="token number">1</span>.7G    ./1
<span class="token number">1</span>.7G    <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux</category>
        <category>1.基本操作</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 备份与刻录工具</title>
    <url>/3733482185/</url>
    <content><![CDATA[<h1 id="备份基础"><a class="markdownIt-Anchor" href="#备份基础"></a> 备份基础</h1>
<p>系统备份重要目录有：<code>/etc/</code>、<code>/home/</code>、<code>/root/</code>、<code>/var</code>。不需要备份的目录有：<code>/dev</code>、<code>/proc</code>、<code>/sys</code>、<code>/run</code>、<code>/mnt</code>、<code>/media</code>、<code>/tmp</code>。</p>
<p>常见备份类型有 3 种：</p>
<ul>
<li>完全备份（full）：在备份定义的范围内备份所有数据。</li>
<li>差分备份（differential）：备份所有自上次备份之后发生过变化的数据。在恢复时需要用到完全备份和最近的差分备份。</li>
<li>增量备份（incremental）：备份上次备份完成之后所有发生变化的数据，而不考虑上次备份是什么类型。</li>
</ul>
<h1 id="使用-rsync-备份"><a class="markdownIt-Anchor" href="#使用-rsync-备份"></a> 使用 rsync 备份</h1>
<p><code>rsync</code>可以对两个目录进行镜像，用法非常简单：<code>rsync -av 来源目录 目标目录</code></p>
<p>例如备份<code>/root</code>目录到<code>/backup</code>目录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">rsync</span> <span class="token parameter variable">-av</span> /root /backup/
sending incremental <span class="token function">file</span> list
root/
root/.bash_history
root/.bash_logout
root/.bash_profile
root/.bashrc
root/.cshrc
root/.tcshrc
root/.viminfo
root/anaconda-ks.cfg
root/.pki/
root/.pki/nssdb/

sent <span class="token number">4,095</span> bytes  received <span class="token number">184</span> bytes  <span class="token number">8,558</span>.00 bytes/sec
total size is <span class="token number">3,458</span>  speedup is <span class="token number">0.81</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>进行差异备份使用同样的命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cp</span> anaconda-ks.cfg <span class="token number">1</span>.cfg
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">rsync</span> <span class="token parameter variable">-av</span> /root /backup/
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token number">1</span>.cfg 
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">rsync</span> <span class="token parameter variable">-av</span> /root /backup/
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ ll /backup/root/
total <span class="token number">8</span>
-rw-------. <span class="token number">1</span> root root  <span class="token number">240</span> Sep <span class="token number">21</span> <span class="token number">18</span>:02 <span class="token number">1</span>.cfg
-rw-------. <span class="token number">1</span> root root <span class="token number">1260</span> Sep  <span class="token number">8</span> 01:38 anaconda-ks.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从结果可以看到在当前目录新增或修改文件，备份后<code>/backup</code>目录下会一同新增和修改。当前目录删除文件，备份后<code>/backup</code>目录并不会同步删除文件。</p>
<p>另外，<code>rsync</code>还支持通过网络备份。例如将本地<code>/root</code>备份到<code>192.168.2.102</code>主机上面：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server2 ~<span class="token punctuation">]</span>$ <span class="token function">rsync</span> <span class="token parameter variable">-av</span> <span class="token parameter variable">-e</span> <span class="token function">ssh</span> /root root@192.168.2.234:/backup
sending incremental <span class="token function">file</span> list
root/
root/.bash_history
root/iptables/
root/iptables/iptables.allow
root/iptables/iptables.deny
root/iptables/iptables.rules

sent <span class="token number">33,124</span> bytes  received <span class="token number">363</span> bytes  <span class="token number">22,324</span>.67 bytes/sec
total size is <span class="token number">31,780</span>  speedup is <span class="token number">0.95</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>种方式要求远端服务器也安装了<code>rsync</code>软件。</p>
<h1 id="使用-dump-备份"><a class="markdownIt-Anchor" href="#使用-dump-备份"></a> 使用 Dump 备份</h1>
<p>Dump 是 ext 文件系统的备份工具。</p>
<h2 id="工具简介"><a class="markdownIt-Anchor" href="#工具简介"></a> 工具简介</h2>
<p>Dump 备份工具可以指定备份等级，与上一等级比较只备份差异文件。</p>
<p>备份对象为单一文件系统时，可以使用完整 dump 功能，可以使用挂载点或设备名来进行备份。</p>
<p>备份对象为目录时，仅能使用 level 0 完整备份，不能使用 -u 参数创建时间记录文件。</p>
<p>命令用法：</p>
<p><code>dump [-Suvj] [-level] [-f 备份文件] 待备份数据</code></p>
<p>可用参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-S</td>
<td>仅列出后面的待备份数据需要多少容量才能备份完毕。</td>
</tr>
<tr>
<td>-u</td>
<td>将这次的 dump 时间记录到 /etc/dumpdateS 文件中。</td>
</tr>
<tr>
<td>-v</td>
<td>将备份过程显示出来。</td>
</tr>
<tr>
<td>-j</td>
<td>假如对 bzip2 的支持，将数据压缩，默认压缩等级 2。</td>
</tr>
<tr>
<td>-level</td>
<td>从 0 到 9 共 10 个等级。</td>
</tr>
<tr>
<td>-f</td>
<td>接备份生成的文件名。</td>
</tr>
<tr>
<td>-W</td>
<td>列出在 /etc/fstab 里面具有 dump 设置的分区是否有备份过。</td>
</tr>
</tbody>
</table>
<h2 id="完整备份"><a class="markdownIt-Anchor" href="#完整备份"></a> 完整备份</h2>
<p>先测试备份目标需要多少容量:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">df</span> <span class="token parameter variable">-h</span> <span class="token operator">|</span> <span class="token function">grep</span> sdb
/dev/sdb4                 91M  342K   86M   <span class="token number">1</span>% /root/sdb4m
<span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ dump <span class="token parameter variable">-S</span> /dev/sdb4
<span class="token number">39936</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>单位为 B，所以需要容量为 39KB。</p>
<p>将 <code>/dev/sdb4</code> 备份到<code>/root/backup/sdb4.dump</code>中，同时更新记录文件:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 backup<span class="token punctuation">]</span>$ dump <span class="token parameter variable">-0u</span> <span class="token parameter variable">-f</span> /root/backup/sdb4.dump /dev/sdb4
  DUMP: Date of this level <span class="token number">0</span> dump: Fri Sep <span class="token number">10</span> <span class="token number">14</span>:26:24 <span class="token number">2021</span>
  DUMP: Dumping /dev/sdb4 <span class="token punctuation">(</span>/root/sdb4m<span class="token punctuation">)</span> to /root/backup/sdb4.dump
  DUMP: DUMP IS DONE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看备份更新记录:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 backup<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/dumpdates 
/dev/sdb4 <span class="token number">0</span> Fri Sep <span class="token number">10</span> <span class="token number">14</span>:26:24 <span class="token number">2021</span> <span class="token parameter variable">-0400</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="差异备份"><a class="markdownIt-Anchor" href="#差异备份"></a> 差异备份</h2>
<p>先查看上次备份的时间：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 backup<span class="token punctuation">]</span>$ dump <span class="token parameter variable">-W</span>
Last dump<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">done</span> <span class="token punctuation">(</span>Dump <span class="token string">'>'</span> <span class="token function">file</span> systems<span class="token punctuation">)</span>:
  /dev/sdb4     <span class="token punctuation">(</span>/root/sdb4m<span class="token punctuation">)</span> Last dump: Level <span class="token number">0</span>, Date Fri Sep <span class="token number">10</span> <span class="token number">14</span>:26:24 <span class="token number">2021</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>可以看到 <code>/dev/sdb4</code> 已经进行过一次 level 0 备份。使用 level 1 备份 <code>/dev/sdb4</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ dump <span class="token parameter variable">-1u</span> <span class="token parameter variable">-f</span> /root/backup/sdb4.dump1 /dev/sdb4
  DUMP: Date of this level <span class="token number">1</span> dump: Fri Sep <span class="token number">10</span> <span class="token number">14</span>:34:25 <span class="token number">2021</span>
  DUMP: Date of last level <span class="token number">0</span> dump: Fri Sep <span class="token number">10</span> <span class="token number">14</span>:26:24 <span class="token number">2021</span>
  DUMP: Dumping /dev/sdb4 <span class="token punctuation">(</span>/root/sdb4m<span class="token punctuation">)</span> to /root/backup/sdb4.dump1
  DUMP: DUMP IS DONE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="备份目录"><a class="markdownIt-Anchor" href="#备份目录"></a> 备份目录</h2>
<p>对目录备份只能使用 level 0 来完成备份。</p>
<p>下面将 <code>/root/sdb4m/lost+found</code> 目录压缩备份到 <code>/root/backup/lost.dump.bz2</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ dump <span class="token parameter variable">-0j</span> <span class="token parameter variable">-f</span> /root/backup/lost.dump.bz2 /root/sdb4m/lost+found/
  DUMP: Date of this level <span class="token number">0</span> dump: Fri Sep <span class="token number">10</span> <span class="token number">14</span>:39:46 <span class="token number">2021</span>
  DUMP: Dumping /dev/sdb4 <span class="token punctuation">(</span>/root/sdb4m <span class="token punctuation">(</span>dir /lost+found<span class="token punctuation">))</span> to /root/backup/lost.dump.bz2
  DUMP: DUMP IS DONE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="还原备份"><a class="markdownIt-Anchor" href="#还原备份"></a> 还原备份</h2>
<p>还原备份使用<code>restore</code>工具，主要参数有：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-t</td>
<td>查看<code>dump</code>文件的内容。</td>
</tr>
<tr>
<td>-C</td>
<td>将<code>dump</code>文件内的数据拿来与实际的文件系统作比较，列出不相同的文件。</td>
</tr>
<tr>
<td>-i</td>
<td>进入互动模式，可以仅还原部分文件。</td>
</tr>
<tr>
<td>-r</td>
<td>将整个文件系统还原。</td>
</tr>
<tr>
<td>-h</td>
<td>查看完整备份数据中的<code>inode</code>与文件系统<code>label</code>等信息。</td>
</tr>
<tr>
<td>-f</td>
<td>选择要读取的<code>dump</code>文件。</td>
</tr>
<tr>
<td>-D</td>
<td>与<code>-C</code>搭配，查出后面接的挂载点与<code>dump</code>内有不同的文件。</td>
</tr>
</tbody>
</table>
<p>查看<code>dump</code>文件<code>sdb4.dmp</code>的内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 backup<span class="token punctuation">]</span>$ restore <span class="token parameter variable">-t</span> <span class="token parameter variable">-f</span> sdb4.dump 
Dump   date: Fri Sep <span class="token number">10</span> <span class="token number">14</span>:34:25 <span class="token number">2021</span>
Dumped from: Fri Sep <span class="token number">10</span> <span class="token number">14</span>:26:24 <span class="token number">2021</span>
Level <span class="token number">1</span> dump of /root/sdb4m on 101c7:/dev/sdb4
Label: P1
         <span class="token number">2</span>      <span class="token builtin class-name">.</span>
        <span class="token number">13</span>      ./test10m.img<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>显示出文件名与原文件的<code>inode</code>号码。</p>
<p>查询<code>sdb4.dmp</code>与文件系统的差异：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 backup<span class="token punctuation">]</span>$ restore <span class="token parameter variable">-C</span> <span class="token parameter variable">-f</span> sdb4.dump <span class="token parameter variable">-D</span> /root/sdb4m/
Dump   date: Fri Sep <span class="token number">10</span> <span class="token number">14</span>:34:25 <span class="token number">2021</span>
Dumped from: Fri Sep <span class="token number">10</span> <span class="token number">14</span>:26:24 <span class="token number">2021</span>
Level <span class="token number">1</span> dump of /root/sdb4m on 101c7:/dev/sdb4
Label: P1
filesys <span class="token operator">=</span> /root/sdb4m/
restore: unable to <span class="token function">stat</span> ./test10m.img: No such <span class="token function">file</span> or directory
Some files were modified<span class="token operator">!</span>  <span class="token number">1</span> compare errors<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>提示有一个文件被更改。</p>
<p>进入到需要还原的文件系统的挂载点下，将<code>sdb4.dump</code>还原到当前文件系统：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ restore <span class="token parameter variable">-r</span> <span class="token parameter variable">-f</span> /root/backup/sdb4.dump 
restore: ./lost+found: File exists<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>此文件系统中已存在的文件不会被修改，同名文件则会被覆盖。</p>
<p>想还原部分文件可以使用交互模式：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ restore <span class="token parameter variable">-i</span> <span class="token parameter variable">-f</span> /root/backup/sdb4.dump 
restore <span class="token operator">></span> <span class="token function">ls</span>
.:
a.cfg       lost+found/

restore <span class="token operator">></span> <span class="token builtin class-name">help</span>
Available commands are:
        <span class="token function">ls</span> <span class="token punctuation">[</span>arg<span class="token punctuation">]</span> - list directory
        <span class="token builtin class-name">cd</span> arg - change directory
        <span class="token builtin class-name">pwd</span> - print current directory
        <span class="token function">add</span> <span class="token punctuation">[</span>arg<span class="token punctuation">]</span> - <span class="token function">add</span> <span class="token variable"><span class="token variable">`</span>arg' to list of files to be extracted
        delete <span class="token punctuation">[</span>arg<span class="token punctuation">]</span> - delete <span class="token variable">`</span></span>arg<span class="token string">' from list of files to be extracted
        extract - extract requested files
        setmodes - set modes of requested directories
        quit - immediately exit program
        what - list dump header information
        verbose - toggle verbose flag (useful with ``ls'</span>'<span class="token punctuation">)</span>
        prompt - toggle the prompt display
        <span class="token builtin class-name">help</span> or <span class="token variable"><span class="token variable">`</span>?' - print this list
If no <span class="token variable">`</span></span>arg' is supplied, the current directory is used
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>除了可以使用<code>ls</code>，<code>cd</code>等命令，主要操作命令为：</p>
<ul>
<li><code>add</code> 将文件加入等下要解压缩的文件列表中；</li>
<li><code>delete</code> 将文件从解压缩的列表中删除；</li>
<li><code>extract</code> 开始将刚才选择的文件列表解压。</li>
</ul>
<p>将<code>a.cfg</code>加入解压缩列表：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">restore <span class="token operator">></span> <span class="token function">add</span> a.cfg  
restore <span class="token operator">></span> <span class="token function">ls</span>
.:
*a.cfg        lost+found/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>要被解压缩的文件前面会出现*符号。</p>
<p>开始进行解压缩：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">restore <span class="token operator">></span> extract
You have not <span class="token builtin class-name">read</span> any volumes yet.
Unless you know <span class="token function">which</span> volume your file<span class="token punctuation">(</span>s<span class="token punctuation">)</span> are on you should start
with the last volume and work towards the first.
Specify next volume <span class="token comment"># (none if no more volumes): 1</span>
<span class="token builtin class-name">set</span> owner/mode <span class="token keyword">for</span> <span class="token string">'.'</span>? <span class="token punctuation">[</span>yn<span class="token punctuation">]</span> n
restore <span class="token operator">></span> quit
<span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ ll
total <span class="token number">3</span>
-rw-------. <span class="token number">1</span> root root <span class="token number">1260</span> Sep <span class="token number">10</span> <span class="token number">15</span>:05 a.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>交互过程中分别会询问：</p>
<ul>
<li>需要的 volume 是什么：1</li>
<li>是否需要修改权限：n</li>
</ul>
<p>完成后使用 quit 命令退出，就可以查看到需要的文件已经被解压出来了。</p>
<h1 id="使用-xfsdump-备份"><a class="markdownIt-Anchor" href="#使用-xfsdump-备份"></a> 使用 XfsDump 备份</h1>
<p>CentOS 7 中常用<code>xfsdump</code>和<code>xfsrestore</code>工具来备份<code>XFS</code>格式文件系统。</p>
<h2 id="工具简介-2"><a class="markdownIt-Anchor" href="#工具简介-2"></a> 工具简介</h2>
<p><code>xfsdump</code>和<code>dump</code>的备份原理相似，但<code>xfsdump</code>通过文件系统的 UUID 来区分各个备份文件，因此不能备份具有相同 UUID 的两个文件系统。此外，<code>xfsdump</code>不支持对特定目录进行备份。</p>
<p>命令用法：<code>xfsdump [-L 标签] [-M 说明] [-l 备份等级] [-f 输出备份文件] 待备份数据</code></p>
<h2 id="完整备份-2"><a class="markdownIt-Anchor" href="#完整备份-2"></a> 完整备份</h2>
<p>对分区<code>/xfs333</code>做完整备份并将结果保存在<code>/root/backup/sdd1.dump</code>中：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 xfs333<span class="token punctuation">]</span>$ xfsdump <span class="token parameter variable">-l</span> <span class="token number">0</span> <span class="token parameter variable">-L</span> sdd1 <span class="token parameter variable">-M</span> sdd1 <span class="token parameter variable">-f</span> /root/backup/sdd1.dump /xfs333
xfsdump: using <span class="token function">file</span> dump <span class="token punctuation">(</span>drive_simple<span class="token punctuation">)</span> strategy
xfsdump: version <span class="token number">3.1</span>.7 <span class="token punctuation">(</span>dump <span class="token function">format</span> <span class="token number">3.0</span><span class="token punctuation">)</span> - <span class="token builtin class-name">type</span> ^C <span class="token keyword">for</span> status and control
xfsdump: level <span class="token number">0</span> dump of 101c7:/xfs333
xfsdump: dump date: Thu Sep <span class="token number">16</span> <span class="token number">14</span>:59:39 <span class="token number">2021</span>
xfsdump: session id: 4545d809-55e2-4de6-ba33-381ed071399c
xfsdump: session label: <span class="token string">"sdd1_all"</span>
xfsdump:   stream <span class="token number">0</span> /root/backup/sdd1.dump OK <span class="token punctuation">(</span>success<span class="token punctuation">)</span>
xfsdump: Dump Status: SUCCESS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>备份记录保存在<code>/var/lib/xfsdump/inventory</code>中。</p>
<h2 id="增量备份"><a class="markdownIt-Anchor" href="#增量备份"></a> 增量备份</h2>
<p>先查询是否存在备份记录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 xfs333<span class="token punctuation">]</span>$ xfsdump <span class="token parameter variable">-I</span>
<span class="token function">file</span> system <span class="token number">0</span>:
        fs id:          c96b6650-756a-4496-bf26-6e7286c55891
        session <span class="token number">0</span>:
                <span class="token function">mount</span> point:    101c7:/xfs333
                device:         101c7:/dev/sdd1
                time:           Thu Sep <span class="token number">16</span> <span class="token number">14</span>:59:39 <span class="token number">2021</span>
                session label:  <span class="token string">"sdd1_all"</span>
                session id:     4545d809-55e2-4de6-ba33-381ed071399c
                level:          <span class="token number">0</span>
                resumed:        NO
                subtree:        NO
                streams:        <span class="token number">1</span>
                stream <span class="token number">0</span>:
                        pathname:       /root/backup/sdd1.dump
                        start:          ino <span class="token number">67</span> offset <span class="token number">0</span>
                        end:            ino <span class="token number">70</span> offset <span class="token number">0</span>
                        interrupted:    NO
                        media files:    <span class="token number">1</span>
                        media <span class="token function">file</span> <span class="token number">0</span>:
                                mfile index:    <span class="token number">0</span>
                                mfile type:     data
                                mfile size:     <span class="token number">10512128</span>
                                mfile start:    ino <span class="token number">67</span> offset <span class="token number">0</span>
                                mfile end:      ino <span class="token number">70</span> offset <span class="token number">0</span>
                                media label:    <span class="token string">"sdd1_all"</span>
                                media id:       e2964845-d8da-4b5f-8226-9390468d538f
xfsdump: Dump Status: SUCCESS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到存在一个 session 0 的 level 0 备份。接着进行 level 1 的增量备份，备份参数和制作 level 0 时一样：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 xfs333<span class="token punctuation">]</span>$ xfsdump <span class="token parameter variable">-l</span> <span class="token number">1</span> <span class="token parameter variable">-L</span> sdd1_1 <span class="token parameter variable">-M</span> sdd1_1 <span class="token parameter variable">-f</span> /root/backup/sdd1.dump1 /xfs333
xfsdump: using <span class="token function">file</span> dump <span class="token punctuation">(</span>drive_simple<span class="token punctuation">)</span> strategy
xfsdump: version <span class="token number">3.1</span>.7 <span class="token punctuation">(</span>dump <span class="token function">format</span> <span class="token number">3.0</span><span class="token punctuation">)</span> - <span class="token builtin class-name">type</span> ^C <span class="token keyword">for</span> status and control
xfsdump: level <span class="token number">1</span> incremental dump of 101c7:/xfs333 based on level <span class="token number">0</span> dump begun Thu Sep <span class="token number">16</span> <span class="token number">14</span>:59:39 <span class="token number">2021</span>
xfsdump:   stream <span class="token number">0</span> /root/backup/sdd1.dump1 OK <span class="token punctuation">(</span>success<span class="token punctuation">)</span>
xfsdump: Dump Status: SUCCESS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>完成后可以用 <code>xfsdump -I</code> 查询备份记录，多了一个 session 1 的记录。</p>
<h2 id="还原备份-2"><a class="markdownIt-Anchor" href="#还原备份-2"></a> 还原备份</h2>
<p>备份还原使用的是 <code>xfsrestore</code> 命令，基本使用方法如下：</p>
<p><code>xfsrestore [-f 备份文件] [-L S_label] [-s] 待复原目录</code></p>
<p>常用选项如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-I</td>
<td>查询备份数据，包括 Label 名称与备份时间等。</td>
</tr>
<tr>
<td>-f</td>
<td>后面指定备份文件目录。</td>
</tr>
<tr>
<td>-L</td>
<td>指定备份等级。</td>
</tr>
<tr>
<td>-s</td>
<td>仅恢复特定目录或文件。</td>
</tr>
<tr>
<td>-i</td>
<td>进入交互模式。</td>
</tr>
</tbody>
</table>
<p>恢复完整备份，需要先查询到 session label 值，用来代表要恢复的备份等级：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 xfs333<span class="token punctuation">]</span>$ xfsrestore <span class="token parameter variable">-f</span> /root/backup/sdd1.dump <span class="token parameter variable">-L</span> sdd1_all /xfs333
xfsrestore: using <span class="token function">file</span> dump <span class="token punctuation">(</span>drive_simple<span class="token punctuation">)</span> strategy
xfsrestore:   stream <span class="token number">0</span> /root/backup/sdd1.dump OK <span class="token punctuation">(</span>success<span class="token punctuation">)</span>
xfsrestore: Restore Status: SUCCESS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>指定将备份数据恢复到 <code>/tmp/xfs/</code> 目录下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 xfs333<span class="token punctuation">]</span>$ xfsrestore <span class="token parameter variable">-f</span> /root/backup/sdd1.dump <span class="token parameter variable">-L</span> sdd1_all /tmp/xfs/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>指定仅还原备份文件中的 <code>255</code> 目录到 <code>/tmp/xfs</code> 目录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 xfs333<span class="token punctuation">]</span>$ xfsrestore <span class="token parameter variable">-f</span> /root/backup/sdd1.dump <span class="token parameter variable">-L</span> sdd1_all <span class="token parameter variable">-s</span> <span class="token number">255</span> /tmp/xfs/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>恢复 level 1 备份到 <code>/tmp/xfs</code> 目录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 xfs333<span class="token punctuation">]</span>$ xfsrestore <span class="token parameter variable">-f</span> /root/backup/sdd1.dump1 /tmp/xfs/
xfsrestore:   stream <span class="token number">0</span> /root/backup/sdd1.dump1 OK <span class="token punctuation">(</span>success<span class="token punctuation">)</span>
xfsrestore: Restore Status: SUCCESS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>使用交互模式来恢复文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 xfs333<span class="token punctuation">]</span>$ xfsrestore <span class="token parameter variable">-f</span> /root/backup/sdd1.dump <span class="token parameter variable">-i</span> /tmp/xfs/

 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> subtree selection dialog <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>

the following commands are available:
        <span class="token builtin class-name">pwd</span> 
        <span class="token function">ls</span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>path<span class="token operator">></span> <span class="token punctuation">]</span>
        <span class="token builtin class-name">cd</span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>path<span class="token operator">></span> <span class="token punctuation">]</span>
        <span class="token function">add</span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>path<span class="token operator">></span> <span class="token punctuation">]</span>
        delete <span class="token punctuation">[</span> <span class="token operator">&lt;</span>path<span class="token operator">></span> <span class="token punctuation">]</span>
        extract 
        quit 
        <span class="token builtin class-name">help</span> 

 -<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用方式与 <code>restoredump</code> 一样，选择好文件后（比如 <code>10M</code>）使用 <code>extract</code> 命令解压：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> -<span class="token operator">></span> <span class="token function">add</span> 10M

 -<span class="token operator">></span> <span class="token function">ls</span>
              <span class="token number">68</span> <span class="token number">255</span>/
    *         <span class="token number">67</span> 10M 

 -<span class="token operator">></span> extract

 --------------------------------- end dialog ---------------------------------

xfsrestore: restoring non-directory files
xfsrestore: restore complete: <span class="token number">154</span> seconds elapsed
xfsrestore: Restore Summary:
xfsrestore:   stream <span class="token number">0</span> /root/backup/sdd1.dump OK <span class="token punctuation">(</span>success<span class="token punctuation">)</span>
xfsrestore: Restore Status: SUCCESS
<span class="token punctuation">[</span>root@101c7 xfs333<span class="token punctuation">]</span>$ ll /tmp/xfs/
total <span class="token number">10240</span>
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">10485760</span> Sep <span class="token number">16</span> <span class="token number">14</span>:55 10M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="其他备份方式"><a class="markdownIt-Anchor" href="#其他备份方式"></a> 其他备份方式</h1>
<p>遇到一些特殊的需求时，可能需要使用 <code>dd</code> 和 <code>cpio</code> 命令来进行备份。</p>
<h2 id="使用-dd-备份"><a class="markdownIt-Anchor" href="#使用-dd-备份"></a> 使用 dd 备份</h2>
<p><code>dd</code> 可以通过直接读取扇区的方式，将整个设备备份成一个文件，使用方法如下：</p>
<p><code>dd if=&quot;输入文件&quot; of=&quot;输出文件&quot; bs=&quot;block大小&quot; count=&quot;block数量&quot;</code></p>
<p>例如备份磁盘第一个扇区：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/sdb <span class="token assign-left variable">of</span><span class="token operator">=</span>/tmp/bmr.back <span class="token assign-left variable">bs</span><span class="token operator">=</span><span class="token number">512</span> <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token number">1</span>+0 records <span class="token keyword">in</span>
<span class="token number">1</span>+0 records out
<span class="token number">512</span> bytes <span class="token punctuation">(</span><span class="token number">512</span> B<span class="token punctuation">)</span> copied, <span class="token number">0.000158292</span> s, <span class="token number">3.2</span> MB/s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>备份 <code>sdb5</code> 整个分区，类似于 Ghost 软件做的镜像：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/sdb5 <span class="token assign-left variable">of</span><span class="token operator">=</span>/root/sdb5.disk
<span class="token number">163840</span>+0 records <span class="token keyword">in</span>
<span class="token number">163840</span>+0 records out
<span class="token number">83886080</span> bytes <span class="token punctuation">(</span><span class="token number">84</span> MB<span class="token punctuation">)</span> copied, <span class="token number">0.476346</span> s, <span class="token number">176</span> MB/s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>还原备份到 <code>sdb5</code> 只需要将 <code>if</code> 和 <code>of</code> 交换一下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/root/sdb5.disk <span class="token assign-left variable">of</span><span class="token operator">=</span>/dev/sdb5
<span class="token number">163840</span>+0 records <span class="token keyword">in</span>
<span class="token number">163840</span>+0 records out
<span class="token number">83886080</span> bytes <span class="token punctuation">(</span><span class="token number">84</span> MB<span class="token punctuation">)</span> copied, <span class="token number">0.246963</span> s, <span class="token number">340</span> MB/s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="使用-cpio-备份"><a class="markdownIt-Anchor" href="#使用-cpio-备份"></a> 使用 cpio 备份</h2>
<p><code>cpio</code>（copy in/out）命令从其他命令获取输入，因此需要配合类似 <code>find</code> 等命令来获取需要备份的文件名。<code>cpio</code> 可以将数据备份到磁带机上。常见用法：</p>
<table>
<thead>
<tr>
<th>目标</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>备份</td>
<td><code>cpio -ovcB &gt; 文件或设备</code></td>
</tr>
<tr>
<td>还原</td>
<td><code>cpio -ivcdu &lt; 文件或设备</code></td>
</tr>
<tr>
<td>查看</td>
<td><code>cpio -ivct &lt; 文件或设备</code></td>
</tr>
</tbody>
</table>
<p>例如将 <code>/boot</code> 目录备份到 <code>boot.cpio</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">find</span> /boot <span class="token operator">|</span> cpio <span class="token parameter variable">-ocvB</span> <span class="token operator">></span> boot.cpio
/boot/initramfs-3.10.0-862.el7.x86_64kdump.img
/boot/initramfs-3.10.0-1160.41.1.el7.x86_64kdump.img
<span class="token number">31339</span> blocks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>将 <code>boot.cpio</code> 解压：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ cpio <span class="token parameter variable">-idvc</span> <span class="token operator">&lt;</span> boot.cpio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="镜像制作"><a class="markdownIt-Anchor" href="#镜像制作"></a> 镜像制作</h1>
<p>在 Linux 下制作镜像可以使用 <code>mkisofs</code> 命令，可用参数如下:</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-o</td>
<td>生成的镜像文件名字。</td>
</tr>
<tr>
<td>-r</td>
<td>附带记录文件属性。</td>
</tr>
<tr>
<td>-v</td>
<td>显示过程。</td>
</tr>
<tr>
<td>-m</td>
<td>要排除的文件。</td>
</tr>
<tr>
<td>-V</td>
<td>新建 Volume。</td>
</tr>
<tr>
<td>-graft-point</td>
<td>保留文件结构，否则文件将会全部存在顶层目录下。</td>
</tr>
</tbody>
</table>
<p>例如将 <code>/root</code> 和 <code>/etc</code> 目录制作成 <code>system.img</code>:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ <span class="token function">mkisofs</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-V</span> <span class="token string">'home'</span> <span class="token parameter variable">-o</span> /tmp/system.img -graft-point /root<span class="token operator">=</span>/root /home<span class="token operator">=</span>/home
I: -input-charset not specified, using utf-8 <span class="token punctuation">(</span>detected <span class="token keyword">in</span> locale settings<span class="token punctuation">)</span>
<span class="token number">47.36</span>% done, estimate finish Fri Sep <span class="token number">10</span> <span class="token number">21</span>:42:20 <span class="token number">2021</span>
<span class="token number">94.80</span>% done, estimate finish Fri Sep <span class="token number">10</span> <span class="token number">21</span>:42:20 <span class="token number">2021</span>
Total translation table size: <span class="token number">0</span>
Total rockridge attributes bytes: <span class="token number">4458</span>
Total directory bytes: <span class="token number">26624</span>
Path table size<span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>: <span class="token number">160</span>
Max brk space used <span class="token number">24000</span>
<span class="token number">10557</span> extents written <span class="token punctuation">(</span><span class="token number">20</span> MB<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>-graft-point</code> 后面接要备份的数据，等号左边代表镜像文件内的目录，右侧是实际路径。</p>
<h1 id="光盘刻录"><a class="markdownIt-Anchor" href="#光盘刻录"></a> 光盘刻录</h1>
<p>在 Linux 下，使用<code>cdrecord</code>命令进行 CD/DVD 刻录。</p>
<p>首先扫描系统中的光驱设备：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ cdrecord <span class="token parameter variable">--devices</span>
wodim: Overview of accessible drives <span class="token punctuation">(</span><span class="token number">1</span> found<span class="token punctuation">)</span> <span class="token builtin class-name">:</span>
-------------------------------------------------------------------------
<span class="token number">0</span>  <span class="token assign-left variable">dev</span><span class="token operator">=</span><span class="token string">'/dev/sg2'</span>      rwrw-- <span class="token builtin class-name">:</span> <span class="token string">'NECVMWar'</span> <span class="token string">'VMware IDE CDR10'</span>
-------------------------------------------------------------------------
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将<code>system.img</code>刻录成数据 CD：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ cdrecord <span class="token parameter variable">-v</span> <span class="token assign-left variable">dev</span><span class="token operator">=</span><span class="token string">'/dev/sg2'</span> <span class="token assign-left variable">fs</span><span class="token operator">=</span>8m <span class="token parameter variable">-dummy</span> <span class="token parameter variable">-data</span> /tmp/system.img 
wodim: No <span class="token function">write</span> mode specified.
wodim: Assuming <span class="token parameter variable">-tao</span> mode.
wodim: Future versions of wodim may have different drive dependent defaults.
TOC Type: <span class="token number">1</span> <span class="token operator">=</span> CD-ROM
scsidev: <span class="token string">'/dev/sg2'</span>
devname: <span class="token string">'/dev/sg2'</span>
scsibus: <span class="token parameter variable">-2</span> target: <span class="token parameter variable">-2</span> lun: <span class="token parameter variable">-2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用<code>wodim</code>命令刻录<code>system.img</code>文件如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 xfs333<span class="token punctuation">]</span>$ wodim <span class="token parameter variable">-v</span> <span class="token assign-left variable">dev</span><span class="token operator">=</span>/dev/sr0 <span class="token assign-left variable">speed</span><span class="token operator">=</span><span class="token number">8</span> <span class="token parameter variable">-dummy</span> <span class="token parameter variable">-eject</span> /tmp/system.img
wodim: No <span class="token function">write</span> mode specified.
wodim: Assuming <span class="token parameter variable">-tao</span> mode.
wodim: Future versions of wodim may have different drive dependent defaults.
TOC Type: <span class="token number">1</span> <span class="token operator">=</span> CD-ROM
scsidev: <span class="token string">'/dev/sr0'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux</category>
        <category>2.系统管理</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 用户管理</title>
    <url>/3199649610/</url>
    <content><![CDATA[<h1 id="用户管理"><a class="markdownIt-Anchor" href="#用户管理"></a> 用户管理</h1>
<p>针对用户的新增,删除,修改操作.</p>
<h2 id="新增用户"><a class="markdownIt-Anchor" href="#新增用户"></a> 新增用户</h2>
<p>可以使用 <code>useradd</code> 命令来新建用户。命令用法如下：</p>
<p><code>useradd [-u UID] [-g 初始组] [-G 次要组] [-nM] [-c 说明] [-d 主目录绝对路径] [-a shell] 用户名</code></p>
<p>主要参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-u</td>
<td>接 UID 数字，直接指定一个特定的 UID 号码</td>
</tr>
<tr>
<td>-g</td>
<td>接组名或 GID，设置初始用户组</td>
</tr>
<tr>
<td>-G</td>
<td>接组名或 GID，设置用户的附加组</td>
</tr>
<tr>
<td>-M</td>
<td>不创建用户主文件夹（系统账号默认值）</td>
</tr>
<tr>
<td>-m</td>
<td>创建用户主文件夹（一般账号默认值）</td>
</tr>
<tr>
<td>-c</td>
<td>用户说明文字内容</td>
</tr>
<tr>
<td>-d</td>
<td>指定用户主目录位置，必须使用绝对路径</td>
</tr>
<tr>
<td>-r</td>
<td>创建一个系统账号，UID 会有限制</td>
</tr>
<tr>
<td>-s</td>
<td>接指定的 shell，默认为 /bin/bash</td>
</tr>
<tr>
<td>-e</td>
<td>接日期格式 “YYYY-MM-DD”，设置账号失效日</td>
</tr>
<tr>
<td>-f</td>
<td>指定密码是否失效，0 为立刻失效，-1 为永不失效</td>
</tr>
<tr>
<td>-N</td>
<td>不创建同名的组</td>
</tr>
<tr>
<td>-p</td>
<td>设置密码</td>
</tr>
</tbody>
</table>
<p>例如，新建立用户 user1，密码为 user1：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">useradd</span> <span class="token parameter variable">-p</span> user1 user1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>设置一个 2040 年 1 月 13 日过期的临时用户 user2：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">useradd</span> <span class="token parameter variable">-p</span> <span class="token function">passwd</span> <span class="token parameter variable">-e</span> <span class="token number">2040</span>-01-13 user2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="修改密码"><a class="markdownIt-Anchor" href="#修改密码"></a> 修改密码</h2>
<p>可以使用 <code>passwd</code> 命令来进行密码设置功能。主要参数如下：</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-l</td>
<td>锁定密码，设置密码失效</td>
</tr>
<tr>
<td>-i</td>
<td>接日期，设置密码失效日期</td>
</tr>
<tr>
<td>-u</td>
<td>解锁密码</td>
</tr>
<tr>
<td>-n</td>
<td>设置修改密码限制周期</td>
</tr>
<tr>
<td>-x</td>
<td>设置密码使用最长天数</td>
</tr>
<tr>
<td>-w</td>
<td>密码过期前的警告天数</td>
</tr>
</tbody>
</table>
<p><code>passwd</code> 后不接账户名为设置当前账户密码。root 给别账号设置密码可以无视密码规则：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">passwd</span> user1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>passwd</code> 支持 <code>--stdin</code> 参数，使得可以在脚本中批量建立账户：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"abc"</span> <span class="token operator">|</span> <span class="token function">passwd</span> <span class="token parameter variable">--stdin</span> user1
Changing password <span class="token keyword">for</span> user user1.
passwd: all authentication tokens updated successfully.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>可以用 <code>chage</code> 查看密码策略。例如查看 user1 的参数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ chage <span class="token parameter variable">-l</span> user1
Last password change                                    <span class="token builtin class-name">:</span> Sep <span class="token number">13</span>, <span class="token number">2021</span>
Password expires                                        <span class="token builtin class-name">:</span> never
Password inactive                                       <span class="token builtin class-name">:</span> never
Account expires                                         <span class="token builtin class-name">:</span> never
Minimum number of days between password change          <span class="token builtin class-name">:</span> <span class="token number">0</span>
Maximum number of days between password change          <span class="token builtin class-name">:</span> <span class="token number">99999</span>
Number of days of warning before password expires       <span class="token builtin class-name">:</span> <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另外 <code>chage</code> 还可以修改密码策略，例如修改密码最后修改时间为 0，用户下次登录时会被要求强制修改密码：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ chage <span class="token parameter variable">-d</span> <span class="token number">0</span> user1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="修改用户参数"><a class="markdownIt-Anchor" href="#修改用户参数"></a> 修改用户参数</h2>
<p>可以使用 <code>usermod</code> 命令来修改已存在的用户设置，命令使用参数可参考 <code>useradd</code> 命令。</p>
<p>例如，修改用户 <code>user7</code> 的用户名为 <code>user07</code>，并修改用户主目录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span>$ <span class="token function">usermod</span> <span class="token parameter variable">-d</span> /home/user07 <span class="token parameter variable">-m</span> <span class="token parameter variable">-l</span> user07 user7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>再例如，将用户 <code>user1</code> 的 shell 设置为 <code>id</code>，这样用户只能运行 <code>id</code> 命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">usermod</span> <span class="token parameter variable">-s</span> /usr/bin/id user1
<span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">su</span> user1
<span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span> <span class="token assign-left variable">context</span><span class="token operator">=</span>unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>切换到 <code>user1</code> 时直接运行了 <code>id</code> 命令。修改 shell 还可以使用 <code>chsh</code> 命令来操作。</p>
<p>将 shell 指定为 <code>/sbin/nologin</code> 表示不能登录，并将尝试登录记录到 syslog 后台程序。可以修改 <code>/etc/nologin.txt</code> 文件来为 <code>nologin</code> 用户展示信息。</p>
<h2 id="删除用户"><a class="markdownIt-Anchor" href="#删除用户"></a> 删除用户</h2>
<p>可以使用<code>userdel</code>命令来删除用户和用户相关数据，指定<code>-r</code>参数可以连同用户主目录和邮件一起删除:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">userdel</span> <span class="token parameter variable">-r</span> user1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>一般更建议先将用户停用，使用<code>usermod -e 1</code>让用户立即过期。</p>
<h1 id="用户组管理"><a class="markdownIt-Anchor" href="#用户组管理"></a> 用户组管理</h1>
<p>针对用户组的新增，修改，删除。</p>
<h2 id="新增用户组"><a class="markdownIt-Anchor" href="#新增用户组"></a> 新增用户组</h2>
<p>使用 <code>groupadd</code> 命令新建用户组，例如新建组 group1：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">groupadd</span> group1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="修改用户组"><a class="markdownIt-Anchor" href="#修改用户组"></a> 修改用户组</h2>
<p>可以通过 <code>groupmod</code> 命令来修改已存在的组名或 GID。比如将组 group1 改名为 newgroup：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">groupmod</span> <span class="token parameter variable">-n</span> newgroup group1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>将组 user7 的 GID 改为 10007：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span>$ <span class="token function">groupmod</span> <span class="token parameter variable">-g</span> <span class="token number">10007</span> user7
<span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span>$ <span class="token function">tail</span> /etc/group <span class="token operator">|</span> <span class="token function">grep</span> user7
user7:x:10007:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="删除用户组"><a class="markdownIt-Anchor" href="#删除用户组"></a> 删除用户组</h2>
<p>使用 <code>groupdel</code> 可以删除无人使用的用户组（目标不能是初始用户组）。例如删除组 group2：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">groupdel</span> group2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="用户组管理员"><a class="markdownIt-Anchor" href="#用户组管理员"></a> 用户组管理员</h2>
<p>用户组管理员是设置一个组内的成员为管理用，专门管理哪些账号可以加入/移出该组。</p>
<p>管理用户组成员使用 <code>gpasswd</code> 命令。例如将 user2 设置为组 group2 的管理员：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ gpasswd <span class="token parameter variable">-A</span> user2 group2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>设置组密码：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ gpasswd user2
Changing the password <span class="token keyword">for</span> group user2
New Password: 
Re-enter new password: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>管理员可以使用 <code>-a</code> 参数将其他用户加入到管理的小组。比如将 user3 加入到 group2：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ gpasswd <span class="token parameter variable">-a</span> user3 group2
Adding user user3 to group group2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="查询信息"><a class="markdownIt-Anchor" href="#查询信息"></a> 查询信息</h1>
<p>可以使用多种命令来查询用户和组的详细信息。</p>
<h2 id="查询用户信息"><a class="markdownIt-Anchor" href="#查询用户信息"></a> 查询用户信息</h2>
<p>通过<code>id</code>命令可以查询到用户的 UID 和 GID 信息，例如查询用户<code>user2</code>:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">id</span> user2
<span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可以使用<code>whoami</code>命令显示当前登录的用户名，等同于<code>id -un</code>:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">whoami</span>
root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>查询用户属组信息可以使用<code>groups</code>命令，例如查询<code>user1</code>的所属组:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">groups</span> user1
user1 <span class="token builtin class-name">:</span> user1 root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>finger</code>命令是一般用户可以使用的用户信息数据查询工具，例如查询<code>root</code>用户的信息:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ finger root
Login: root                             Name: root
Directory: /root                        Shell: /bin/bash
On since Sat Sep <span class="token number">11</span> 09:35 <span class="token punctuation">(</span>EDT<span class="token punctuation">)</span> on tty1    <span class="token number">1</span> day <span class="token number">20</span> hours idle
On since Sat Sep <span class="token number">11</span> 07:08 <span class="token punctuation">(</span>EDT<span class="token punctuation">)</span> on pts/0 from <span class="token number">192.168</span>.2.101
   <span class="token number">3</span> seconds idle
Last login Mon Sep <span class="token number">13</span> 05:48 <span class="token punctuation">(</span>EDT<span class="token punctuation">)</span> on pts/1
No mail.
No Plan.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果不加参数，<code>finger</code>查询出来的是目前在系统上登录的用户与登录时间。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ finger
Login     Name       Tty      Idle  Login Time   Office     Office Phone   Host
root      root       tty1       1d  Sep <span class="token number">11</span> 09:35           
root      root       pts/0          Sep <span class="token number">11</span> 07:08                           <span class="token punctuation">(</span><span class="token number">192.168</span>.2.101<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="修改用户附加信息"><a class="markdownIt-Anchor" href="#修改用户附加信息"></a> 修改用户附加信息</h2>
<p>若要修改 <code>finger</code> 命令输出结果中的 Office、Phone 等信息，可以使用 <code>chfn</code> 命令。</p>
<p>输入 <code>chfn</code> 命令后，会进入交互式输入页面：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ chfn
Changing finger information <span class="token keyword">for</span> root.
Name <span class="token punctuation">[</span>root<span class="token punctuation">]</span>: assassing
Office <span class="token punctuation">[</span><span class="token punctuation">]</span>: STU
Office Phone <span class="token punctuation">[</span><span class="token punctuation">]</span>: 010-8515834
Home Phone <span class="token punctuation">[</span><span class="token punctuation">]</span>: none

Finger information changed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改的内容实际存放在 <code>/etc/passwd</code> 文件中第五个字段中。</p>
<h2 id="查询用户登录信息"><a class="markdownIt-Anchor" href="#查询用户登录信息"></a> 查询用户登录信息</h2>
<p>使用<code>who</code>命令可以简单查看当前在线的用户：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">who</span>
root     tty1         <span class="token number">2021</span>-09-11 09:35
root     pts/0        <span class="token number">2021</span>-09-13 08:19 <span class="token punctuation">(</span><span class="token number">192.168</span>.2.101<span class="token punctuation">)</span>
root     pts/1        <span class="token number">2021</span>-09-13 <span class="token number">11</span>:38 <span class="token punctuation">(</span><span class="token number">192.168</span>.2.101<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用<code>w</code>命令可以看到更详细的在线用户信息，包括系统资源使用和最后执行的命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ w
<span class="token number">11</span>:38:55 up <span class="token number">3</span> days, <span class="token number">20</span>:30,  <span class="token number">3</span> users,  load average: <span class="token number">0.01</span>, <span class="token number">0.02</span>, <span class="token number">0.05</span>
<span class="token environment constant">USER</span>     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
root     tty1                      Sat09    2days  <span class="token number">0</span>.01s  <span class="token number">0</span>.01s <span class="token parameter variable">-bash</span>
root     pts/0    <span class="token number">192.168</span>.2.101    08:19    <span class="token number">7</span>.00s  <span class="token number">0</span>.11s  <span class="token number">0</span>.00s w
root     pts/1    <span class="token number">192.168</span>.2.101    <span class="token number">11</span>:38   <span class="token number">45</span>.00s  <span class="token number">0</span>.01s  <span class="token number">0</span>.00s <span class="token parameter variable">-bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>要查询用户的登录动作记录，可以使用<code>last</code>命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ last
root     pts/1        <span class="token number">192.168</span>.2.101    Mon Sep <span class="token number">13</span> <span class="token number">11</span>:38   still logged <span class="token keyword">in</span>   
root     pts/0        <span class="token number">192.168</span>.2.101    Mon Sep <span class="token number">13</span> 08:19   still logged <span class="token keyword">in</span>   
root     tty1                          Sat Sep <span class="token number">11</span> 09:35   still logged <span class="token keyword">in</span>   
root     pts/1        <span class="token number">192.168</span>.2.101    Sat Sep <span class="token number">11</span> 08:58 - 06:09 <span class="token punctuation">(</span><span class="token number">1</span>+21:10<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>想知道每个账号最后登录时间可以使用<code>lastlog</code>命令，它会去读取<code>/var/log/lastlog</code>文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ lastlog
Username         Port     From             Latest
root             pts/1    <span class="token number">192.168</span>.2.101    Mon Sep <span class="token number">13</span> <span class="token number">11</span>:38:10 <span class="token parameter variable">-0400</span> <span class="token number">2021</span>
bin                                        **Never logged in**
daemon                                     **Never logged in**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="配置检查工具"><a class="markdownIt-Anchor" href="#配置检查工具"></a> 配置检查工具</h2>
<p>使用<code>pwck</code>命令可以检查 <code>/etc/passwd</code> 文件是否正确：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ pwck
user <span class="token string">'ftp'</span><span class="token builtin class-name">:</span> directory <span class="token string">'/var/ftp'</span> does not exist
pwck: no changes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><code>pwconv</code> 命令将 <code>/etc/passwd</code> 内的账号与密码移动到 <code>/etc/shadow</code> 中，用来迁移早期 Linux 的用户数据。</p>
<p><code>pwunconv</code> 是 <code>pwconv</code> 的反向操作。</p>
<p><code>chpasswd</code> 用来读入未加密前的密码，并将加密后的密码写入到 <code>/etc/shadow</code> 中。例如修改 <code>user1</code> 的密码：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"user1:newpassword"</span> <span class="token operator">|</span> chpasswd <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="用户交流"><a class="markdownIt-Anchor" href="#用户交流"></a> 用户交流</h1>
<p>Linux 内置的几个命令可以直接和系统内其他用户交流。</p>
<h2 id="在线交流"><a class="markdownIt-Anchor" href="#在线交流"></a> 在线交流</h2>
<p>例如使用<code>write</code>可以直接将信息传给其他在线用户：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">write</span> root
write: root is logged <span class="token keyword">in</span> <span class="token function">more</span> than once<span class="token punctuation">;</span> writing to pts/1
my message1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>输入完毕用<code>Ctrl+d</code>结束并发送，对面会立即收到信息。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>user1@101c7 ~<span class="token punctuation">]</span>$ 
Message from root@101c7 on pts/0 at <span class="token number">11</span>:45 <span class="token punctuation">..</span>.
my message1
EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>想要关闭消息接受可以使用<code>mesg n</code>命令（重新打开用<code>mesg y</code>）。</p>
<h2 id="群发消息"><a class="markdownIt-Anchor" href="#群发消息"></a> 群发消息</h2>
<p>使用<code>wall</code>命令能发送广播，让所有在线的用户都收到消息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>user1@101c7 ~<span class="token punctuation">]</span>$ wall <span class="token string">"911"</span>
<span class="token punctuation">[</span>user1@101c7 ~<span class="token punctuation">]</span>$ 
Broadcast message from user1@101c7 <span class="token punctuation">(</span>pts/1<span class="token punctuation">)</span> <span class="token punctuation">(</span>Mon Sep <span class="token number">13</span> <span class="token number">11</span>:52:06 <span class="token number">2021</span><span class="token punctuation">)</span>:

<span class="token number">911</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="用户切换"><a class="markdownIt-Anchor" href="#用户切换"></a> 用户切换</h1>
<p>在用户间切换使用<code>su</code>命令（switch user）。一般用户切换到 root 需要 root 的密码。命令格式为：</p>
<p><code>su [-lm] [-c 命令] [用户名]</code></p>
<p>可用参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-</td>
<td>代表使用 login-shell 的变量文件读取方式来登录</td>
</tr>
<tr>
<td>-l</td>
<td>也是 login-shell 的方式，后面需要加账号</td>
</tr>
<tr>
<td>-m</td>
<td>使用目前的环境设置，而不读取新用户的配置文件</td>
</tr>
<tr>
<td>-c</td>
<td>仅运行一次命令，后面加要执行的命令</td>
</tr>
</tbody>
</table>
<h2 id="non-login-shell"><a class="markdownIt-Anchor" href="#non-login-shell"></a> non-login shell</h2>
<p>使用<code>su</code>命令仅切换用户身份时，将以非登录 Shell 方式登录，此方式不会读取用户配置文件。例如，切换到<code>user1</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 dir2<span class="token punctuation">]</span>$ <span class="token function">su</span> user1
<span class="token punctuation">[</span>user1@101c7 dir2<span class="token punctuation">]</span>$ <span class="token function">env</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'root'</span>
<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin
<span class="token assign-left variable">MAIL</span><span class="token operator">=</span>/var/spool/mail/root
<span class="token assign-left variable"><span class="token environment constant">PWD</span></span><span class="token operator">=</span>/root/sdb4m/dir1/dir2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，<code>PATH</code>和<code>MAIL</code>等变量并没有切换到<code>user1</code>。</p>
<h2 id="login-shell"><a class="markdownIt-Anchor" href="#login-shell"></a> login shell</h2>
<p>要使用登录 Shell 的方式登录需要记得使用 <code>-</code>（切换到 root）或 <code>-l</code> 参数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 dir2<span class="token punctuation">]</span>$ <span class="token function">su</span> <span class="token parameter variable">-l</span> user1
Last login: Mon Sep <span class="token number">13</span> 08:11:48 EDT <span class="token number">2021</span> on pts/0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>使用 <code>-c</code> 参数能很方便地使用其他账户身份运行命令而并不需要登录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 dir2<span class="token punctuation">]</span>$ <span class="token function">su</span> <span class="token parameter variable">-l</span> user1 <span class="token parameter variable">-c</span> <span class="token string">'whoami'</span>
user1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="用-sudo-执行命令"><a class="markdownIt-Anchor" href="#用-sudo-执行命令"></a> 用 sudo 执行命令</h2>
<p>通过 <code>sudo</code> 命令，能让在 <code>/etc/sudoers</code> 文件中列出的用户使用其他用户的身份（包括 nologin 的系统用户）来执行命令。使用方法如下：</p>
<p><code>sudo [-b] [-u 其他用户名]</code></p>
<p>例如，以 <code>user2</code> 的身份在 <code>/tmp</code> 目录下新建名为 <code>us2</code> 的文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token parameter variable">-u</span> user2 <span class="token function">touch</span> /tmp/us2 <span class="token punctuation">;</span> ll <span class="token parameter variable">-l</span> /tmp/us2
-rw-r--r--. <span class="token number">1</span> user2 user2 <span class="token number">0</span> Sep <span class="token number">13</span> 08:24 /tmp/us2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如果要运行一连串命令，使用 <code>sh -c</code> 将命令用双引号括起来：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token parameter variable">-u</span> user2 <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"touch /tmp/us1; mv /tmp/us1 /tmp/us3"</span><span class="token punctuation">;</span>ll /tmp/us3
-rw-r--r--. <span class="token number">1</span> user2 user2 <span class="token number">0</span> Sep <span class="token number">13</span> 08:29 /tmp/us3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="设置-sudoers"><a class="markdownIt-Anchor" href="#设置-sudoers"></a> 设置 sudoers</h2>
<p>使用 <code>visudo</code> 命令设置 sudo 配置文件 <code>/etc/sudoers</code>。例如，将 <code>user1</code> 加入到 <code>sudoers</code> 中：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ visudo
<span class="token comment">## Allow root to run any commands anywhere</span>
root     <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>       ALL
user1    <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>       ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>第二段 <code>(ALL)=(ALL)</code> 表示登录者的来源主机名=(可切换的身份)，第三段表示可执行的命令。必须使用绝对路径指定。</p>
<p>切换到 <code>user1</code> 使用 <code>sudo</code> 运行命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>user1@101c7 root<span class="token punctuation">]</span>$ <span class="token function">sudo</span> ll /root

We trust you have received the usual lecture from the <span class="token builtin class-name">local</span> System
Administrator. It usually boils down to these three things:

    <span class="token comment">#1) Respect the privacy of others.</span>
    <span class="token comment">#2) Think before you type.</span>
    <span class="token comment">#3) With great power comes great responsibility.</span>
<span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> password <span class="token keyword">for</span> user1: 
sudo: ll: <span class="token builtin class-name">command</span> not found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输入 <code>user1</code> 的密码后可以自由使用 <code>sudo</code>。如果两次 <code>sudo</code> 操作的间隔超过 5 分钟，需要重新输入一次密码。</p>
<p>设置用户组 <code>%group2</code> 可以不需要密码使用 <code>sudo</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ visudo
root       <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>       ALL
%group2    <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>       NOPASSWD:ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>可以通过 <code>User_Alias</code> 和 <code>Cmnd_alias</code> 配置来设置别名，配置使用的别名一定要使用大写。</p>
<p>例如，将 <code>ADMUSER</code> 指向用户 <code>user1</code> 和 <code>user2</code>，<code>ADMPW</code> 指向 <code>/usr/bin/passwd</code>，并排除掉直接运行 <code>passwd</code> 和 <code>passwd root</code> 命令（都为给 <code>root</code> 修改密码）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ visudo
User_Alias ADMUSER <span class="token operator">=</span> user1, user2
Cmnd_Alias ADMPW <span class="token operator">=</span> /usr/bin/passwd <span class="token punctuation">[</span>A-za-z<span class="token punctuation">]</span>*, <span class="token operator">!</span>/usr/bin/passd, <span class="token operator">!</span>/usr/bin/passwd root
ADMUSER   <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>       NOPASSWD:ADMPW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用 <code>sudo -l</code> 可以查询当前 <code>sudo</code> 权限设置情况：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token parameter variable">-l</span>
Matching Defaults entries <span class="token keyword">for</span> root on server1:
    <span class="token operator">!</span>visiblepw, always_set_home, match_group_by_gid, always_query_group_plugin, env_reset, <span class="token assign-left variable">env_keep</span><span class="token operator">=</span><span class="token string">"COLORS DISPLAY HOSTNAME
    HISTSIZE KDEDIR LS_COLORS"</span>, <span class="token assign-left variable">env_keep</span><span class="token operator">+=</span><span class="token string">"MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE"</span>, <span class="token assign-left variable">env_keep</span><span class="token operator">+=</span><span class="token string">"LC_COLLATE
    LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES"</span>, <span class="token assign-left variable">env_keep</span><span class="token operator">+=</span><span class="token string">"LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE"</span>,
    <span class="token assign-left variable">env_keep</span><span class="token operator">+=</span><span class="token string">"LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY"</span>, <span class="token assign-left variable">secure_path</span><span class="token operator">=</span>/sbin<span class="token punctuation">\</span>:/bin<span class="token punctuation">\</span>:/usr/sbin<span class="token punctuation">\</span>:/usr/bin

User root may run the following commands on server1:
    <span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux</category>
        <category>2.系统管理</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 软件安装与管理</title>
    <url>/1357678012/</url>
    <content><![CDATA[<h1 id="编译安装"><a class="markdownIt-Anchor" href="#编译安装"></a> 编译安装</h1>
<p>编译程序是将源代码编译成机器语言生成可执行二进制程序的过程。</p>
<p>在 Linux 中，可以使用 <code>configure</code> 命令对系统环境进行检测和收集，生成 <code>Makefile</code> 文件，<code>make</code> 命令根据 <code>Makefile</code> 文件的配置来对源文件进行编译，生成可执行二进制程序。</p>
<p>简单来说，通过源代码安装程序的步骤如下：</p>
<ol>
<li>从网上下载包含源代码的压缩包；</li>
<li>解压压缩包；</li>
<li>使用 <code>gcc</code> 进行源代码编译，生成目标文件（object files）；</li>
<li>使用 <code>gcc</code> 进行函数库、主程序和辅助程序的链接，形成二进制文件；</li>
<li>将二进制文件及相关配置文件安装到指定目录。</li>
</ol>
<p>编译安装需要用到的程序包括：<code>gcc</code>、<code>make</code>、<code>autoconfig</code>，以及相关的库文件和头文件。通常可以使用 <code>yum groupinstall &quot;Development Tools&quot;</code> 命令来安装所需套件。</p>
<h2 id="单一程序"><a class="markdownIt-Anchor" href="#单一程序"></a> 单一程序</h2>
<p>编写一个简单的 C 语言源代码进行编译测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">vi</span> hello.c
<span class="token comment">#include &lt;stdio.h></span>
int main <span class="token punctuation">(</span>void<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
        printf<span class="token punctuation">(</span><span class="token string">"hello<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token string">"hello.c"</span> <span class="token punctuation">[</span>New<span class="token punctuation">]</span> 5L, 58C written<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用 gcc 进行编译并运行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ gcc hello.c 
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ ll
total <span class="token number">20</span>
-rw-------. <span class="token number">1</span> root root <span class="token number">1260</span> Sep  <span class="token number">8</span> 01:38 anaconda-ks.cfg
-rwxr-xr-x. <span class="token number">1</span> root root <span class="token number">8360</span> Sep <span class="token number">21</span> <span class="token number">20</span>:33 a.out
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">59</span> Sep <span class="token number">21</span> <span class="token number">20</span>:32 hello.c
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ ./a.out 
hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若没有指定输出文件名，则可执行文件名为 a.out。使用 <code>-o</code> 参数指定输出文件名为 hello.exe：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ gcc <span class="token parameter variable">-c</span> hello.c
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ gcc <span class="token parameter variable">-o</span> hello.exe hello.o
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ ./hello.exe 
hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="主副程序链接"><a class="markdownIt-Anchor" href="#主副程序链接"></a> 主副程序链接</h2>
<p>如果在主程序里又调用了另一个副程序，例如新建一个<code>world.c</code>，再到<code>hello.c</code>调用它：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">vi</span> world.c
<span class="token comment">#include &lt;stdio.h></span>
void world <span class="token punctuation">(</span>void<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
        printf<span class="token punctuation">(</span><span class="token string">"world!<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token string">"world.c"</span> <span class="token punctuation">[</span>New<span class="token punctuation">]</span> 5L, 62C written
<span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">vi</span> hello.c 
<span class="token comment">#include &lt;stdio.h></span>
int main <span class="token punctuation">(</span>void<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
        printf<span class="token punctuation">(</span><span class="token string">"hello "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        world <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token string">"hello.c"</span> 6L, 69C written<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同样执行编译，最终生成二进制文件<code>helloworld</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ gcc <span class="token parameter variable">-c</span> hello.c world.c 
<span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ ll
total <span class="token number">20</span>
-rw-------. <span class="token number">1</span> root root <span class="token number">1260</span> Sep  <span class="token number">8</span> 01:38 anaconda-ks.cfg
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">69</span> Sep <span class="token number">21</span> <span class="token number">20</span>:43 hello.c
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">1560</span> Sep <span class="token number">21</span> <span class="token number">20</span>:44 hello.o
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">62</span> Sep <span class="token number">21</span> <span class="token number">20</span>:42 world.c
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">1488</span> Sep <span class="token number">21</span> <span class="token number">20</span>:44 world.o
<span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ gcc <span class="token parameter variable">-o</span> helloworld hello.o world.o
<span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ ./helloworld 
hello world<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个生成的二进制文件<code>helloworld</code>包含了两个源代码里的内容。如果修改了源文件<code>world.c</code>内容，只需要重新编译<code>world.c</code>文件，将新的<code>world.o</code>和<code>hello.o</code>链接制作出修改过后的二进制可执行文件。</p>
<h2 id="调用外部函数库"><a class="markdownIt-Anchor" href="#调用外部函数库"></a> 调用外部函数库</h2>
<p>如果调用的是系统函数库，直接在源文件里<code>include</code>进来。也可以使用<code>-I</code>参数来指定<code>include</code>文件位置：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">vi</span> sin.c
<span class="token comment">#include &lt;stdio.h></span>
<span class="token comment">#include &lt;math.h></span>
int main <span class="token punctuation">(</span>void<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
        float value<span class="token punctuation">;</span>
        value <span class="token operator">=</span> sin <span class="token punctuation">(</span><span class="token number">3</span>/2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token builtin class-name">printf</span> <span class="token punctuation">(</span><span class="token string">"%f<span class="token entity" title="\n">\n</span>"</span>,value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token string">"sin.c"</span> 8L, 115C written
<span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ gcc sin.c -I/usr/include     
<span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ ./a.out 
<span class="token number">0.841471</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果要指定函数库位置可以使用<code>-L</code>参数。另外，<code>-</code>参数表示加入某函数库，<code>m</code>代表<code>libm.so</code>函数库：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ gcc sin.c <span class="token parameter variable">-lm</span> -L/lib -L/lib64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="创建-makefile"><a class="markdownIt-Anchor" href="#创建-makefile"></a> 创建 Makefile</h2>
<p><code>Makefile</code>文件作用为简化整个编译流程。可以手动创建一个<code>Makefile</code>来测试下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">vi</span> makefile
main: hello.o world.o
        gcc <span class="token parameter variable">-o</span> main hello.o world.o
<span class="token string">"makefile"</span> <span class="token punctuation">[</span>New<span class="token punctuation">]</span> 2L, 51C written
<span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">make</span>
cc    <span class="token parameter variable">-c</span> <span class="token parameter variable">-o</span> hello.o hello.c
cc    <span class="token parameter variable">-c</span> <span class="token parameter variable">-o</span> world.o world.c
gcc <span class="token parameter variable">-o</span> main hello.o world.o
<span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ ll
total <span class="token number">40</span>
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">69</span> Sep <span class="token number">21</span> <span class="token number">20</span>:43 hello.c
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">1560</span> Sep <span class="token number">21</span> <span class="token number">21</span>:05 hello.o
-rwxr-xr-x. <span class="token number">1</span> root root <span class="token number">8472</span> Sep <span class="token number">21</span> <span class="token number">21</span>:05 main
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">51</span> Sep <span class="token number">21</span> <span class="token number">21</span>:05 makefile
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">62</span> Sep <span class="token number">21</span> <span class="token number">20</span>:42 world.c
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">1488</span> Sep <span class="token number">21</span> <span class="token number">21</span>:05 world.o
<span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">make</span>
make: `main' is up to date.
<span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ ./main 
hello world<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>目标（<code>target</code>）与相关文件之间以分号<code>:</code>隔开，<code>gcc</code>行前必须使用 <code>[Tab]</code> 按键来缩进。</p>
<p>如果更新了源文件，只需要再次执行 <code>make</code> 命令就可以将生成的可执行文件更新。</p>
<p>当有两个以上执行动作时，例如编译完成后删除生成的 <code>.o</code> 文件，可以直接在后面接自定义阶段名：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">vi</span> makefile 
main: hello.o world.o
        gcc <span class="token parameter variable">-o</span> main hello.o world.o
clean:
        <span class="token function">rm</span> <span class="token parameter variable">-f</span> hello.o world.o
<span class="token string">"makefile"</span> 4L, 81C written
<span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">make</span> clean
<span class="token function">rm</span> <span class="token parameter variable">-f</span> hello.o world.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行时，在 <code>make</code> 后面接阶段名即可执行那一阶段定义的命令。</p>
<p>默认不接参数时执行 <code>main</code> 中命令，想要先执行 <code>main</code> 段再执行 <code>clean</code> 段，可以把两个阶段名都写出来：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">make</span> main clean
cc    <span class="token parameter variable">-c</span> <span class="token parameter variable">-o</span> hello.o hello.c
cc    <span class="token parameter variable">-c</span> <span class="token parameter variable">-o</span> world.o world.c
gcc <span class="token parameter variable">-o</span> main hello.o world.o
<span class="token function">rm</span> <span class="token parameter variable">-f</span> hello.o world.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 <code>Makefile</code> 中可以使用变量来简化内容，例如将 <code>hello.o</code> <code>world.o</code> 定义为 <code>OBJS</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">vi</span> makefile 
OBJS <span class="token operator">=</span> hello.o world.o
main: <span class="token variable">$&#123;OBJS&#125;</span>
        gcc <span class="token parameter variable">-o</span> main <span class="token variable">$&#123;OBJS&#125;</span>
clean:
        <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable">$&#123;OBJS&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另外可以用 <code>$@</code> 代表目前的 <code>target</code>（也就是 <code>main</code>）。</p>
<h2 id="从源代码安装程序"><a class="markdownIt-Anchor" href="#从源代码安装程序"></a> 从源代码安装程序</h2>
<p>通常建议将源代码放在 <code>/usr/local/src</code> 目录下，软件安装到 <code>/usr/local</code> 目录下。</p>
<p>一般从网上下载的源码包安装实际操作步骤如下：</p>
<ol>
<li>取得原始文件，一般是 <code>tar</code> 压缩包；</li>
<li>将 <code>tar</code> 解压缩，读取里面的 <code>INSTALL</code> 或 <code>README</code> 等文档；</li>
<li>根据文档的要求安装好一些依赖软件；</li>
<li>创建 <code>makefile</code>，一般用 <code>./configure</code> 脚本来检测系统与相关软件属性；</li>
<li>运行 <code>make clean; make</code> 以 <code>makefile</code> 作为配置来编译；</li>
<li>运行 <code>make install</code> 将目标文件安装到指定路径。</li>
</ol>
<p>以上每个步骤都必须执行成功，才能进行下一步骤。</p>
<p>下面以安装 NTP 举例。先到官网 <a href="http://www.ntp.org/downloads.html">http://www.ntp.org/downloads.html</a> 找到最新的安装包用 <code>wget</code> 下载：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> /usr/local/src
<span class="token punctuation">[</span>root@234c8 src<span class="token punctuation">]</span>$ <span class="token function">wget</span> http://www.eecis.udel.edu/~ntp/ntp_spool/ntp4/ntp-4.2/ntp-4.2.8p15.tar.gz
<span class="token number">100</span>%<span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">]</span> <span class="token number">7,015</span>,970   <span class="token number">23</span>.5KB/s   <span class="token keyword">in</span> 6m 2s  

<span class="token number">2021</span>-09-21 <span class="token number">22</span>:14:23 <span class="token punctuation">(</span><span class="token number">18.9</span> KB/s<span class="token punctuation">)</span> - ‘ntp-4.2.8p15.tar.gz’ saved <span class="token punctuation">[</span><span class="token number">7015970</span>/7015970<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>验证下载的 <code>tar</code> 文件 MD5 值是否正确：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 src<span class="token punctuation">]</span>$ <span class="token function">wget</span> http://www.eecis.udel.edu/~ntp/ntp_spool/ntp4/ntp-4.2/ntp-4.2.8p15.tar.gz.md5
<span class="token number">100</span>%<span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">]</span> <span class="token number">61</span>          --.-K/s   <span class="token keyword">in</span> 0s      

<span class="token number">2021</span>-09-21 <span class="token number">23</span>:01:20 <span class="token punctuation">(</span><span class="token number">9.29</span> MB/s<span class="token punctuation">)</span> - ‘ntp-4.2.8p15.tar.gz.md5’ saved <span class="token punctuation">[</span><span class="token number">61</span>/61<span class="token punctuation">]</span>
<span class="token punctuation">[</span>root@234c8 src<span class="token punctuation">]</span>$ md5sum ntp-4.2.8p15.tar.gz <span class="token parameter variable">--check</span> ntp-4.2.8p15.tar.gz.md5 
md5sum: ntp-4.2.8p15.tar.gz: no properly formatted MD5 checksum lines found
ntp-4.2.8p15.tar.gz: OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将其解压并阅读 <code>README</code> 文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 src<span class="token punctuation">]</span>$ <span class="token function">tar</span> <span class="token parameter variable">-zxv</span> <span class="token parameter variable">-f</span> ntp-4.2.8p15.tar.gz 
ntp-4.2.8p15/lib/isc/ia64/include/isc/
ntp-4.2.8p15/lib/isc/ia64/include/isc/atomic.h
ntp-4.2.8p15/lib/isc/alpha/include/
ntp-4.2.8p15/lib/isc/alpha/include/isc/
ntp-4.2.8p15/lib/isc/alpha/include/isc/atomic.h
<span class="token punctuation">[</span>root@234c8 src<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> ntp-4.2.8p15 <span class="token punctuation">;</span> <span class="token function">less</span> README
Submit patches, bug reports, and enhancement requests via

                        http://bugs.ntp.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>README 文件解释了每个文件的作用。然后使用<code>./configure</code>创建 makefile，并加入<code>--prefix</code>参数指定安装位置：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ntp-4.2.8p15<span class="token punctuation">]</span>$ ./configure <span class="token parameter variable">--help</span>
<span class="token punctuation">[</span>root@234c8 ntp-4.2.8p15<span class="token punctuation">]</span>$ ./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/ntp --enable-all-clocks --enable-parse-clocks
config.status: creating Makefile
config.status: creating config.h
config.status: creating evconfig-private.h
config.status: evconfig-private.h is unchanged
config.status: executing depfiles commands
config.status: executing libtool commands
<span class="token punctuation">[</span>root@234c8 ntp-4.2.8p15<span class="token punctuation">]</span>$ <span class="token function">cat</span> Makefile <span class="token operator">|</span> <span class="token function">grep</span> /usr/local/ntp
NTP_KEYSDIR <span class="token operator">=</span> /usr/local/ntp/etc
PERLLIBDIR <span class="token operator">=</span> /usr/local/ntp/share/ntp/lib
prefix <span class="token operator">=</span> /usr/local/ntp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后使用<code>make</code>来安装：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ntp-4.2.8p15<span class="token punctuation">]</span>$ <span class="token function">make</span> clean<span class="token punctuation">;</span> <span class="token function">make</span>
make<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: Entering directory <span class="token variable"><span class="token variable">`</span>/usr/local/src/ntp-4.2.8p15'
make<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: Leaving directory <span class="token variable">`</span></span>/usr/local/src/ntp-4.2.8p15<span class="token string">'
make[1]: Leaving directory `/usr/local/src/ntp-4.2.8p15'</span>
<span class="token punctuation">[</span>root@234c8 ntp-4.2.8p15<span class="token punctuation">]</span>$ <span class="token function">make</span> check
make<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: Leaving directory <span class="token variable"><span class="token variable">`</span>/usr/local/src/ntp-4.2.8p15'
make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Leaving directory <span class="token variable">`</span></span>/usr/local/src/ntp-4.2.8p15<span class="token string">'
[root@234c8 ntp-4.2.8p15]$ make install
Installing stand-alone HTML documentation
make[3]: Leaving directory `/usr/local/src/ntp-4.2.8p15'</span>
make<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: Leaving directory <span class="token variable"><span class="token variable">`</span>/usr/local/src/ntp-4.2.8p15'
make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Leaving directory <span class="token variable">`</span></span>/usr/local/src/ntp-4.2.8p15'
<span class="token punctuation">[</span>root@234c8 ntp-4.2.8p15<span class="token punctuation">]</span>$ ll /usr/local/ntp/
total <span class="token number">0</span>
drwxr-xr-x. <span class="token number">2</span> root root <span class="token number">189</span> Sep <span class="token number">21</span> <span class="token number">22</span>:26 bin
drwxr-xr-x. <span class="token number">2</span> root root   <span class="token number">6</span> Sep <span class="token number">21</span> <span class="token number">22</span>:26 libexec
drwxr-xr-x. <span class="token number">2</span> root root   <span class="token number">6</span> Sep <span class="token number">21</span> <span class="token number">22</span>:26 sbin
drwxr-xr-x. <span class="token number">5</span> root root  <span class="token number">39</span> Sep <span class="token number">21</span> <span class="token number">22</span>:26 share<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用<code>patch</code>命令来对源码进行更新后，还需要再次编译才能生效。</p>
<h1 id="函数库管理"><a class="markdownIt-Anchor" href="#函数库管理"></a> 函数库管理</h1>
<p>在 Linux 下依据函数库是否被编译到程序内部分为动态与静态函数库：</p>
<ul>
<li>
<p><strong>静态</strong>（Static）</p>
<p>一般扩展名为 <code>.a</code>，在编译时直接整合到执行程序中。</p>
</li>
<li>
<p><strong>动态</strong>（Dynamic）</p>
<p>扩展名为 <code>.so</code>，在编译时程序只有一个指向（Pointer）位置，需要用到时才会去读取。</p>
</li>
</ul>
<p>现在软件偏向使用动态函数库，这样方便升级函数库后不需重新编译程序。</p>
<h2 id="将函数库常驻内存"><a class="markdownIt-Anchor" href="#将函数库常驻内存"></a> 将函数库常驻内存</h2>
<p>可以将常用的动态函数库载入内存中，这样程序调用函数库时比从硬盘读取速度快。方法如下：</p>
<ul>
<li>在 <code>/etc/ld.so.conf</code> 里写明要读入内存中的函数库目录；</li>
<li>利用 <code>ldconfig</code> 将 <code>ld.so.conf</code> 中配置的函数库读入内存；</li>
<li>同时也将数据记录一份在 <code>/etc/ld.so.cache</code> 这个文件中。</li>
</ul>
<p>假设要把 MySQL 数据库的函数库载入内存（实际上系统默认已经这么做了）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">vi</span> /etc/ld.so.conf.d/mariadb-x86_64.conf 
/usr/lib64/mysql
<span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ ldconfig
<span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ ldconfig <span class="token parameter variable">-p</span> <span class="token operator">|</span> <span class="token function">grep</span> mysql
        libmysqlclient.so.18 <span class="token punctuation">(</span>libc6,x86-64<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> /usr/lib64/mysql/libmysqlclient.so.18
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="程序的动态函数库解析"><a class="markdownIt-Anchor" href="#程序的动态函数库解析"></a> 程序的动态函数库解析</h2>
<p>可以使用<code>ldd</code>命令来查询，例如查询<code>df</code>命令使用的动态函数库：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ ldd /usr/bin/df
        linux-vdso.so.1 <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">(</span>0x00007ffe7de99000<span class="token punctuation">)</span>
        libc.so.6 <span class="token operator">=</span><span class="token operator">></span> /lib64/libc.so.6 <span class="token punctuation">(</span>0x00007fec1f049000<span class="token punctuation">)</span>
        /lib64/ld-linux-x86-64.so.2 <span class="token punctuation">(</span>0x00007fec1f417000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以继续拿<code>ldd</code>来查询某个函数的相关函数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ ldd <span class="token parameter variable">-v</span> /lib64/libc.so.6 
        /lib64/ld-linux-x86-64.so.2 <span class="token punctuation">(</span>0x00007f894f632000<span class="token punctuation">)</span>
        linux-vdso.so.1 <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">(</span>0x00007ffecdfd8000<span class="token punctuation">)</span>

        Version information:
        /lib64/libc.so.6:
                ld-linux-x86-64.so.2 <span class="token punctuation">(</span>GLIBC_2.3<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> /lib64/ld-linux-x86-64.so.2
                ld-linux-x86-64.so.2 <span class="token punctuation">(</span>GLIBC_PRIVATE<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> /lib64/ld-linux-x86-64.so.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个命令可以用来检查程序安装时的依赖性。</p>
<h1 id="软件管理"><a class="markdownIt-Anchor" href="#软件管理"></a> 软件管理</h1>
<p>通常不同的分发商会将一些软件编译好成二进制，并通过软件管理平台提供给用户。Fedora/CentOS 系列使用 RPM 软件管理机制和 yum 线上更新模式，而 Debian/Ubuntu 使用 dpkg 软件管理机制和 APT 线上更新模式。</p>
<h2 id="rpm-与-srpm"><a class="markdownIt-Anchor" href="#rpm-与-srpm"></a> RPM 与 SRPM</h2>
<p>RPM 的全名是 RedHat Package Manager，它要求软件文件安装环境与打包时一致，并且需要满足软件依赖性需求。</p>
<p>SRPM 是 Source RPM，也就是提供的 RPM 包的源文件，通常扩展名为 *.src.rpm。与普通源代码安装不同的是，要将它以 RPM 管理的方式编译成 RPM 文件，再安装到系统中。</p>
<p>RPM 包文件名通常有固定格式，例如：<code>cronolog-1.6.2-14.el7.x86_64.rpm</code>：</p>
<ul>
<li><code>cronolog</code>：软件名</li>
<li><code>1.6.2</code>：软件版本。主版本为 1，在主版本架构下的功能更新变动次版本号 6，小修补则用动用再次版本号 2 来表示。</li>
<li><code>14</code>：释出版本次数，也就是编译次数。可能由于一些 bug 或安全原因，重新调整过编译参数。</li>
<li><code>el7.x86_64</code>：适合的硬件平台。如果没有硬件等级限制，用 <code>noarch</code> 表示。</li>
<li><code>rpm</code>：固定扩展名</li>
</ul>
<p>RPM 的特点：</p>
<ul>
<li>RPM 内含已经编译过的程序与配置文件，不需要使用者重新编译。</li>
<li>RPM 在被安装之前，会检查系统版本、剩余容量等，可避免被错误安装。</li>
<li>RPM 文件本身提供软件版本信息、软件依赖信息、用途说明、文件内容等信息。</li>
<li>RPM 管理的方式使用数据库记录 RPM 文件相关参数，方便升级、卸载、查询等。</li>
</ul>
<p>RPM 使用 YUM 服务器提供下载，每次安装软件前，yum 都会先在线更新本地软件数据库，得出需要安装的软件列表。再到 YUM 服务器去获取软件，通过 RPM 的机制开始安装。使用 RPM 安装软件的信息会记录在 <code>/var/lib/rpm/</code> 目录下的数据库内。</p>
<p>SRPM 文件编译打包使用 <code>rpmbuild --rebuild</code> 命令。配置文件一般是 SPECS 目录下的 <code>.spec</code> 文件，修改完成后可以用 <code>rpmbuild -bb spec</code> 文件来编译成 RPM 文件。</p>
<h2 id="rpm-命令"><a class="markdownIt-Anchor" href="#rpm-命令"></a> RPM 命令</h2>
<p>安装使用 <code>-ivh</code> 参数，比如安装 <code>cronolog</code> 软件:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> cronolog-1.6.2-14.el7.x86_64.rpm 
Preparing<span class="token punctuation">..</span>.                          <span class="token comment">################################# [100%]</span>
Updating / installing<span class="token punctuation">..</span>.
   <span class="token number">1</span>:cronolog-1.6.2-14.el7            <span class="token comment">################################# [100%]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>参数后面可以接多个 rpm 包来一次安装，也可以指定网络上的地址来安装。</p>
<p>其他一些有用的参数如下:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>--nodeps</code></td>
<td>强制忽略软件依赖性来安装</td>
</tr>
<tr>
<td><code>--replacefiles</code></td>
<td>直接覆盖掉原先安装过的软件</td>
</tr>
<tr>
<td><code>--replacepkgs</code></td>
<td>直接重装 rpm 包</td>
</tr>
<tr>
<td><code>--force</code></td>
<td>等于 <code>--replacefiles</code> 加 <code>--replacepkgs</code></td>
</tr>
<tr>
<td><code>--test</code></td>
<td>测试 rpm 包是否能正确安装</td>
</tr>
<tr>
<td><code>--justdb</code></td>
<td>在数据库有错误时，更新此软件在数据库内的信息</td>
</tr>
<tr>
<td><code>--nosignature</code></td>
<td>忽略数字签名检查</td>
</tr>
<tr>
<td><code>--prefix</code> 路径</td>
<td>指定软件安装到自定义目录</td>
</tr>
<tr>
<td><code>--noscripts</code></td>
<td>禁止软件在安装时执行的命令</td>
</tr>
</tbody>
</table>
<p>如果要升级软件使用 <code>-Uvh</code> 参数:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">rpm</span> <span class="token parameter variable">-Uvh</span> cronolog-1.6.2-14.el7.x86_64.rpm 
Preparing<span class="token punctuation">..</span>.                          <span class="token comment">################################# [100%]</span>
        package cronolog-1.6.2-14.el7.x86_64 is already installed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>查询本机已安装的软件或 RPM 包可以使用以下命令及参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-q</code></td>
<td>仅查询软件是否有安装</td>
</tr>
<tr>
<td><code>-qa</code></td>
<td>列出所有已经安装的软件</td>
</tr>
<tr>
<td><code>-qi</code></td>
<td>列出软件详细信息</td>
</tr>
<tr>
<td><code>-ql</code></td>
<td>列出软件的所有文件与目录路径</td>
</tr>
<tr>
<td><code>-qc</code></td>
<td>列出软件的所有配置文件</td>
</tr>
<tr>
<td><code>-qd</code></td>
<td>列出软件的说明文档</td>
</tr>
<tr>
<td><code>-qR</code></td>
<td>列出软件的依赖情况</td>
</tr>
<tr>
<td><code>-qf</code></td>
<td>找出查询文件属于哪一个已经安装的软件</td>
</tr>
<tr>
<td><code>-q --script</code></td>
<td>列出是否含有安装后需要执行的脚本</td>
</tr>
<tr>
<td><code>-qp[icdlR]</code></td>
<td>查询 RPM 文件内的信息</td>
</tr>
</tbody>
</table>
<p>例如，查询 cronolog 软件安装的文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">rpm</span> <span class="token parameter variable">-ql</span> cronolog
/usr/bin/cronosplit
/usr/sbin/cronolog
/usr/share/doc/cronolog-1.6.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>查询 cronolog 软件相关说明：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">rpm</span> <span class="token parameter variable">-qi</span> cronolog
Name        <span class="token builtin class-name">:</span> cronolog
Version     <span class="token builtin class-name">:</span> <span class="token number">1.6</span>.2
Release     <span class="token builtin class-name">:</span> <span class="token number">14</span>.el7
Architecture: x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查询文件 <code>/bin/rpcgen</code> 属于哪个软件包。如果文件被误删了也可以查询：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">rpm</span> <span class="token parameter variable">-qf</span> /bin/rpcgen 
glibc-common-2.17-324.el7_9.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可以使用 <code>-V</code> 参数来验证某个软件是否缺失或更改了文件，例如查询 rootfiles：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">rpm</span> <span class="token parameter variable">-V</span> rootfiles<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>卸载软件使用 <code>-e</code> 参数，当软件没有依赖关系时才能卸载。如果强制移除软件造成数据库错误，可以使用 <code>--rebuilddb</code> 来重建数据库：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">rpm</span> <span class="token parameter variable">--rebuilddb</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="yum-命令"><a class="markdownIt-Anchor" href="#yum-命令"></a> YUM 命令</h2>
<p><code>yum</code> (Yellowdog Updater Modified) 是一种通过线上服务器安装软件的工具，常用参数包括 <code>-y</code> 用于自动确认，以及 <code>--installroot</code> 用于指定安装路径。</p>
<p>使用 <code>list</code> 选项查询软件列表，使用 <code>search</code> 选项在线上搜索软件，例如搜索和 <code>vim</code> 有关的软件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ yum search <span class="token function">vim</span>
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
 * base: mirrors.tuna.tsinghua.edu.cn
 * epel: mirrors.tuna.tsinghua.edu.cn
 * extras: mirrors.tuna.tsinghua.edu.cn
 * updates: mirrors.tuna.tsinghua.edu.cn
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> N/S matched: <span class="token function">vim</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
beakerlib-vim-syntax.noarch <span class="token builtin class-name">:</span> Files <span class="token keyword">for</span> syntax highlighting BeakerLib tests <span class="token keyword">in</span> VIM editor
boxes-vim.noarch <span class="token builtin class-name">:</span> Vim plugin <span class="token keyword">for</span> boxes
fluxbox-vim-syntax.noarch <span class="token builtin class-name">:</span> Fluxbox syntax scripts <span class="token keyword">for</span> <span class="token function">vim</span>
geany-plugins-vimode.x86_64 <span class="token builtin class-name">:</span> Vim-mode plugin <span class="token keyword">for</span> Geany<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用 <code>info</code> 选项搜索软件信息，例如搜索 <code>gdisk</code> 软件的信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ yum info gdisk
Available Packages
Name        <span class="token builtin class-name">:</span> gdisk
Arch        <span class="token builtin class-name">:</span> x86_64
Version     <span class="token builtin class-name">:</span> <span class="token number">0.8</span>.10
Release     <span class="token builtin class-name">:</span> <span class="token number">3</span>.el7
Size        <span class="token builtin class-name">:</span> <span class="token number">190</span> k<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>列出可升级的软件使用 <code>list updates</code> 命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ yum list updates
Updated Packages
epel-release.noarch                     <span class="token number">7</span>-14                                   epel   
kernel.x86_64                           <span class="token number">3.10</span>.0-1160.42.2.el7                   update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>安装软件使用 <code>install</code> 命令，升级使用 <code>update</code> 命令，例如安装 <code>agrep</code> 软件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ yum <span class="token function">install</span> <span class="token parameter variable">-y</span> agrep
Installed:
  agrep.x86_64 <span class="token number">0</span>:0.8.0-18.20140228gitc2f5d13.el7                                                           

Dependency Installed:
  tre.x86_64 <span class="token number">0</span>:0.8.0-18.20140228gitc2f5d13.el7     tre-common.noarch <span class="token number">0</span>:0.8.0-18.20140228gitc2f5d13.el7    

Complete<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以只下载 RPM 包但不安装（软件已安装的情况下使用 <code>reinstall</code> 代替 <code>install</code>）。例如下载 <code>agrep</code> 到 <code>/root/dl/</code> 目录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span>$ yum <span class="token function">install</span> <span class="token parameter variable">-y</span> agrep <span class="token parameter variable">--downloadonly</span> <span class="token parameter variable">--downloaddir</span><span class="token operator">=</span>/root/dl/
<span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span>$ ll /root/dl/
total <span class="token number">96</span>
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">19924</span> Nov  <span class="token number">4</span>  <span class="token number">2016</span> agrep-0.8.0-18.20140228gitc2f5d13.el7.x86_64.rpm
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">40868</span> Nov  <span class="token number">4</span>  <span class="token number">2016</span> tre-0.8.0-18.20140228gitc2f5d13.el7.x86_64.rpm
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">32920</span> Nov  <span class="token number">4</span>  <span class="token number">2016</span> tre-common-0.8.0-18.20140228gitc2f5d13.el7.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>软件删除使用 <code>remove</code> 命令，例如移除掉 <code>agrep</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ yum remove agrep
Remove  <span class="token number">1</span> Package

Installed size: <span class="token number">22</span> k
Is this ok <span class="token punctuation">[</span>y/N<span class="token punctuation">]</span>: y
Downloading packages:
Running transaction check
Running transaction <span class="token builtin class-name">test</span>
Transaction <span class="token builtin class-name">test</span> succeeded
Running transaction
  Erasing    <span class="token builtin class-name">:</span> agrep-0.8.0-18.20140228gitc2f5d13.el7.x86_64                                            <span class="token number">1</span>/1 
  Verifying  <span class="token builtin class-name">:</span> agrep-0.8.0-18.20140228gitc2f5d13.el7.x86_64                                            <span class="token number">1</span>/1 

Removed:
  agrep.x86_64 <span class="token number">0</span>:0.8.0-18.20140228gitc2f5d13.el7                                                           

Complete<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果想要加入自定义仓库地址，可以修改 yum 配置文件 <code>/etc/yum.repos.d/CentOS-Base.repo</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/yum.repos.d/CentOS-Base.repo
<span class="token punctuation">[</span>base<span class="token punctuation">]</span>
<span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Base
<span class="token assign-left variable">mirrorlist</span><span class="token operator">=</span>http://mirrorlist.centos.org/?release<span class="token operator">=</span><span class="token variable">$releasever</span><span class="token operator">&amp;</span><span class="token assign-left variable">arch</span><span class="token operator">=</span><span class="token variable">$basearch</span><span class="token operator">&amp;</span><span class="token assign-left variable">repo</span><span class="token operator">=</span>os<span class="token operator">&amp;</span><span class="token assign-left variable">infra</span><span class="token operator">=</span><span class="token variable">$infra</span>
<span class="token comment">#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/</span>
<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中以中括号代表软件库名称，可以自己取名，其他设置如下：</p>
<ul>
<li>name：自定义仓库名，不要重名即可；</li>
<li>mirrorlist：列出这个软件仓库可用的映射站点，可以不需要；</li>
<li>baseurl：后面接实际软件仓库网址；</li>
<li>enable：设置是否要启用此仓库；</li>
<li>gpgcheck：是否要检查数字签名；</li>
<li>gpgkey：数字签名文件位置。</li>
</ul>
<p>设置好以后可以使用 <code>repolist all</code> 来查询：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ yum repolist all
repo <span class="token function">id</span>                       repo name                                status
C7.8.2003-updates/x86_64      CentOS-7.8.2003 - Updates                disabled
base/7/x86_64                 CentOS-7 - Base                          enabled: <span class="token number">10,072</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>yum 支持软件群组功能，可以使用下面选项来操作：</p>
<ul>
<li>grouplist：列出所有可用的软件群组；</li>
<li>groupinfo：查询软件群组内容；</li>
<li>groupinstall：安装一组软件群组；</li>
<li>groupremove：删除某软件群组。</li>
</ul>
<p>软件群组内软件分主要和可选，使用 <code>groupinstall</code> 只会安装主要软件，可以修改 <code>/etc/yum.conf</code> 配置，在 <code>distroverpkg</code> 下面加入一行配置 <code>group_package_types=default, mandatory, optional</code> 来安装所有软件群组的软件。</p>
<p>另外，想要通过代理连接下载，可以在配置文件中新增一行 <code>proxy=代理服务器地址</code> 来启用。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>2.系统管理</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 中用户与用户组</title>
    <url>/2592592171/</url>
    <content><![CDATA[<h1 id="用户标识符"><a class="markdownIt-Anchor" href="#用户标识符"></a> 用户标识符</h1>
<p>每个用户至少都有两个 ID，用户 ID（UID，User ID）和用户组 ID（GID，Group ID）。</p>
<p>当显示文件属性时，系统会根据 <code>/etc/passwd</code> 与 <code>/etc/group</code> 文件的内容找到 UID/GID 对应的账号与组名再显示出来。</p>
<h1 id="用户账号"><a class="markdownIt-Anchor" href="#用户账号"></a> 用户账号</h1>
<p>用户通过终端或 SSH 登录时，系统的处理过程如下：</p>
<ol>
<li>首先在 <code>/etc/passwd</code> 中查找是否存在输入的账户，如果存在，则读取对应的 UID、GID、主目录和 shell 设置。</li>
<li>核对输入的密码是否与 <code>/etc/shadow</code> 记录匹配。</li>
<li>如果账户和密码都正确，就可以进入 shell。</li>
</ol>
<h2 id="etcpasswd-文件结构"><a class="markdownIt-Anchor" href="#etcpasswd-文件结构"></a> /etc/passwd 文件结构</h2>
<p>passwd 中以行为单位记录系统中所有账号，各字段之间用冒号分隔开：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">head</span> <span class="token parameter variable">-4</span> /etc/passwd
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上以第一条为例，总共七个字段，说明如下：</p>
<table>
<thead>
<tr>
<th>编号</th>
<th>内容</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>root</td>
<td>账号名称，用来对应 UID。</td>
</tr>
<tr>
<td>2</td>
<td>x</td>
<td>密码，早期 UNIX 用来存放加密过的密码字段。</td>
</tr>
<tr>
<td>3</td>
<td>0</td>
<td>UID，其中 0 固定为 root 用，1-499 号留给系统账号用，500 之后为一般用户。</td>
</tr>
<tr>
<td>4</td>
<td>0</td>
<td>GID，组信息保存在 <code>/etc/group</code> 中。</td>
</tr>
<tr>
<td>5</td>
<td>root</td>
<td>用户信息说明列，只是用来解释账号意义。</td>
</tr>
<tr>
<td>6</td>
<td>/root</td>
<td>用户主文件夹位置。</td>
</tr>
<tr>
<td>7</td>
<td>/bin/bash</td>
<td>默认使用的 shell。如果是 <code>/sbin/nologin</code> 代表不能登录。</td>
</tr>
</tbody>
</table>
<h2 id="etcshadow-文件结构"><a class="markdownIt-Anchor" href="#etcshadow-文件结构"></a> /etc/shadow 文件结构</h2>
<p>shadow 文件中保存了密码和相关限制设置：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/shadow
root:<span class="token variable">$6</span><span class="token variable">$A7YdIFXQJ47yq0</span>::0:99999:7:::
bin:*:17632:0:99999:7:::<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>以第一条记录为例，总共有九个字段，说明如下：</p>
<table>
<thead>
<tr>
<th>编号</th>
<th>内容</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>root</td>
<td>账户名。</td>
</tr>
<tr>
<td>2</td>
<td>7YdIFXQJ47yq0</td>
<td>编码过的密码，使用不同编码方式产生的长度不同。</td>
</tr>
<tr>
<td>3</td>
<td>13400</td>
<td>最近改动密码的日期，以 1970/01/01 作为基准计算经过时间。</td>
</tr>
<tr>
<td>4</td>
<td>0</td>
<td>密码不可被改动的天数，0 无限制，11 表示每次修改密码的等待间隔为 11 天。</td>
</tr>
<tr>
<td>5</td>
<td>99999</td>
<td>密码过期的期限天数，如果超过这个限制天数没改密码，密码会变为已过期。</td>
</tr>
<tr>
<td>6</td>
<td>7</td>
<td>密码过期前发出警告的提前天数。</td>
</tr>
<tr>
<td>7</td>
<td>14</td>
<td>密码过期后的账号宽限时间。</td>
</tr>
<tr>
<td>8</td>
<td>14800</td>
<td>账号失效日期，过了限制日期后账号无法再使用。</td>
</tr>
<tr>
<td>9</td>
<td>-</td>
<td>保留字段。</td>
</tr>
</tbody>
</table>
<h1 id="用户组"><a class="markdownIt-Anchor" href="#用户组"></a> 用户组</h1>
<p>用户组可以将账户集中在一起组成一个逻辑排列，从而简化特权管理。和用户组有关的文件记录在 <code>/etc/group</code> 与 <code>/etc/gshadow</code> 中。</p>
<h2 id="etcgroup-文件结构"><a class="markdownIt-Anchor" href="#etcgroup-文件结构"></a> /etc/group 文件结构</h2>
<p>group 文件记录 GID 与组名的对应：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/group
root:x:0:
bin:x:1:
daemon:x:2:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>以第一条记录为例，总共有四个字段，说明如下：</p>
<table>
<thead>
<tr>
<th>编号</th>
<th>内容</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>root</td>
<td>用户组名。</td>
</tr>
<tr>
<td>2</td>
<td>x</td>
<td>用户组密码，不再使用。</td>
</tr>
<tr>
<td>3</td>
<td>0</td>
<td>用户组 ID。</td>
</tr>
<tr>
<td>4</td>
<td>-</td>
<td>此用户组支持的账号名称。</td>
</tr>
</tbody>
</table>
<p>初始用户组（initial group）与有效用户组（effective group）：</p>
<ul>
<li>保存在 <code>/etc/passwd</code> 中的用户对应 GID 就是初始用户组；</li>
<li>保存在 <code>/etc/group</code> 中的用户名说明用户在此组中，该组是组内用户的有效用户组。</li>
</ul>
<h2 id="etcgshadow-文件结构"><a class="markdownIt-Anchor" href="#etcgshadow-文件结构"></a> /etc/gshadow 文件结构</h2>
<p>gshadow 用来设定组密码：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/gshadow
root:::
bin:::<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>文件内容和 <code>/etc/group</code> 差不多，除了第二列用来记录组密码。</p>
<h2 id="两种群组机制"><a class="markdownIt-Anchor" href="#两种群组机制"></a> 两种群组机制</h2>
<p>针对创建用户时会不会创建私有组的策略有两种机制：</p>
<ul>
<li>
<p><strong>私有群组机制</strong></p>
<p>系统会创建一个与账号同名的群组给使用者作为初始群组，且主文件夹权限设置为 700，这样对用户来说保密性较好。使用这一机制的代表有 RHEL、Fedora、CentOS 等。</p>
</li>
<li>
<p><strong>公共群组机制</strong></p>
<p>新建账户时若没指定组，自动把 GID=100 分配给使用者作为初始群组。此组为 users 公共组，主文件夹权限是 755，同一组内的用户可以共享主文件夹内数据。代表有 SuSE 等。</p>
</li>
</ul>
<h1 id="新增用户"><a class="markdownIt-Anchor" href="#新增用户"></a> 新增用户</h1>
<p>使用默认设置新建用户时，系统所作的工作：</p>
<ol>
<li>在 <code>/etc/passwd</code> 中创建一行与账号相关的数据，包括创建 UID/GID/主文件夹等；</li>
<li>在 <code>/etc/shadow</code> 中将账号密码相关参数填入，默认无密码；</li>
<li>在 <code>/etc/group</code> 中加入一个与账户名一样的组名；</li>
<li>在 <code>/home</code> 下面创建与账户同名的目录作为用户主文件夹，权限为 700。</li>
</ol>
<p>可以通过<code>useradd -D</code>查看创建用户时使用的默认值：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">useradd</span> <span class="token parameter variable">-D</span>
<span class="token assign-left variable">GROUP</span><span class="token operator">=</span><span class="token number">100</span>
<span class="token assign-left variable"><span class="token environment constant">HOME</span></span><span class="token operator">=</span>/home
<span class="token assign-left variable">INACTIVE</span><span class="token operator">=</span>-1
<span class="token assign-left variable">EXPIRE</span><span class="token operator">=</span>
<span class="token assign-left variable"><span class="token environment constant">SHELL</span></span><span class="token operator">=</span>/bin/bash
<span class="token assign-left variable">SKEL</span><span class="token operator">=</span>/etc/skel
<span class="token assign-left variable">CREATE_MAIL_SPOOL</span><span class="token operator">=</span>yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其实调用的就是 <code>/etc/default/useradd</code> 文件内容。变量说明如下：</p>
<table>
<thead>
<tr>
<th>行</th>
<th>设置</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>GROUP=100</td>
<td>设置新用户初始组为 users，在 CentOS 中不适用</td>
</tr>
<tr>
<td>2</td>
<td>HOME=/home</td>
<td>用户主文件夹的基准目录（basedir）</td>
</tr>
<tr>
<td>3</td>
<td>INACTIVE=-1</td>
<td>密码过期后是否会失效的设置值</td>
</tr>
<tr>
<td>4</td>
<td>EXPIRE=</td>
<td>账号失效的日期，YYYY-MM-DD 格式</td>
</tr>
<tr>
<td>5</td>
<td>SHELL=/bin/bash</td>
<td>新用户默认 shell 的路径</td>
</tr>
<tr>
<td>6</td>
<td>SKEL=/etc/skel</td>
<td>新用户主目录里默认的内容参考来源</td>
</tr>
<tr>
<td>7</td>
<td>CREATE_MAIL_SPOOL=yes</td>
<td>创建用户邮件信箱</td>
</tr>
</tbody>
</table>
<p>其他一些设置，如密码策略、邮箱目录等，存放在 <code>/etc/login.defs</code> 文件下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/login.defs <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">-E</span> <span class="token string">"^$|^#"</span>
MAIL_DIR        /var/spool/mail
PASS_MAX_DAYS   <span class="token number">99999</span>
PASS_MIN_DAYS   <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 <code>/etc/login.defs</code> 文件内一些重要参数说明：</p>
<table>
<thead>
<tr>
<th>行</th>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>MAIL_DIR</td>
<td>用户邮箱所在位置</td>
</tr>
<tr>
<td>2-6</td>
<td>PASS_, WARN_AGE</td>
<td>密码设置相关</td>
</tr>
<tr>
<td>7-14</td>
<td>UID, SYS_UID, GID, SYS_GID</td>
<td>设置 UID/GID 号相关参数</td>
</tr>
<tr>
<td>15</td>
<td>CREATE_HOME</td>
<td>建立用户主文件夹</td>
</tr>
<tr>
<td>16</td>
<td>UMASK</td>
<td>用户主文件的权限设置</td>
</tr>
<tr>
<td>17</td>
<td>USERGROUPS_ENAB</td>
<td>删掉用户时，如果同名组是空组，也一并删除</td>
</tr>
<tr>
<td>18</td>
<td>ENCRYPT_METHOD</td>
<td>密码加密方式</td>
</tr>
</tbody>
</table>
<h1 id="修改密码"><a class="markdownIt-Anchor" href="#修改密码"></a> 修改密码</h1>
<p>root 修改密码时不需要旧密码，可以忽略密码规则。一般账号改密码需要输入旧密码，密码需要符合复杂性要求。</p>
<p>密码管理机制由 <code>/etc/pam.d/passwd</code> 控制，密码测试模块使用 pam_cracklib.so。</p>
<p>可以通过 <code>authconfig</code> 命令来查看密码哈希使用算法:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ authconfig <span class="token parameter variable">--test</span> <span class="token operator">|</span> <span class="token function">grep</span> hashing
password hashing algorithm is sha512<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>假设作为一般用户，原始密码为 A2345678b，则修改密码时的错误示例如下：</p>
<table>
<thead>
<tr>
<th><strong>密码规则</strong></th>
<th><strong>错误示例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>长度&gt;8</td>
<td>b2345C</td>
</tr>
<tr>
<td>不是回文(即上次密码的倒置)</td>
<td>b8765432A</td>
</tr>
<tr>
<td>不能和上次密码只有大小写区别</td>
<td>a2345678B</td>
</tr>
<tr>
<td>至少有字母+数字</td>
<td>abababab</td>
</tr>
<tr>
<td>简单的轮询检查</td>
<td>2345678bA</td>
</tr>
</tbody>
</table>
<h1 id="pam-模块"><a class="markdownIt-Anchor" href="#pam-模块"></a> PAM 模块</h1>
<p>PAM（可插拔身份验证模块）是一套应用程序编程接口（API）, 它提供一系列验证机制。只要用户将验证阶段的需求告诉 PAM，PAM 就能够回报用户验证的结果（成功或失败）。</p>
<p>由于 PAM 仅是一套验证机制，又可以提供给其他程序调用，因此无论使用什么程序都可以使用 PAM 进行身份验证。</p>
<p>例如，<code>passwd</code> 命令调用 PAM 的流程如下：</p>
<ol>
<li>用户执行 <code>/usr/bin/passwd</code> 程序，并输入密码;</li>
<li>passwd 调用 PAM 模块进行验证;</li>
<li>PAM 模块会到 <code>/etc/pam.d/</code> 中查找与程序 passwd 同名的配置文件;</li>
<li>根据 <code>/etc/pam.d/passwd</code> 内的设置，引用相关的 PAM 模块逐步进行验证分析;</li>
<li>将验证结果回传给 passwd 程序;</li>
<li>passwd 根据 PAM 回传结果决定下一个操作（通过或要求重试）。</li>
</ol>
<p>查看 <code>/etc/pam.d/passwd</code> 文件内容如下:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/pam.d/passwd
<span class="token comment">#%PAM-1.0</span>
auth       include      system-auth
account    include      system-auth
password   substack     system-auth
<span class="token parameter variable">-password</span>   optional    pam_gnome_keyring.so use_authtok
password   substack     postlogin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>每一行分为三个字段，分别是：验证类别（type）、控制标志（flag）、PAM 模块与该模块的参数。</p>
<h2 id="验证类型"><a class="markdownIt-Anchor" href="#验证类型"></a> 验证类型</h2>
<p>验证类型(Type)有四种，分别为：</p>
<ul>
<li>
<p><strong>auth</strong></p>
<p>authentication（认证）的缩写，主要用来检验用户的身份信息，通常需要密码来检验，因此后续接的模块是用来验证使用者的身份。</p>
</li>
<li>
<p><strong>account</strong></p>
<p>account（账号）则大部分用于进行授权，主要在检验用户是否具有正确的授权。例如使用一个过期的密码登录时，无法正确登录。</p>
</li>
<li>
<p><strong>session</strong></p>
<p>session（会话）管理的是用户在这次登录（或使用这个命令）期间 PAM 所给予的环境设置。这个类型通常用于记录用户登录和注销时的信息。例如使用 <code>sudo</code> 命令，会在安全日志里出现很多关于 PAM 的行，记录 session open、session close 等信息。</p>
</li>
<li>
<p><strong>password</strong></p>
<p>password 就是密码，所以这种类别主要用于提供验证的修订工作，例如修改密码。</p>
</li>
</ul>
<p>这四个验证的类型通常有顺序。先进行身份验证（auth），系统给予授权（account），登记登录信息（session），最后是需要更改密码（password）时才给予的 password 类型。</p>
<h2 id="控制标志"><a class="markdownIt-Anchor" href="#控制标志"></a> 控制标志</h2>
<p>控制标志(Control Flag)是验证通过的标准，这个字段在控制该验证的放行方式，也分为四种控制方式：</p>
<ul>
<li>
<p><strong>required</strong></p>
<p>此验证若成功带有 success 的标志，失败带有 failure 的标志，无论成功与失败都会继续后续的验证流程。由于后续的验证流程可以继续进行，因此相当有利于记录日志(log)，这是 PAM 最常使用的标志。</p>
</li>
<li>
<p><strong>requisite</strong></p>
<p>验证失败立刻回报原程序 failure 的标志，并终止后续的验证流程。成功则带有 success 的标志并继续后续的验证流程。与 required 最大的区别是遇到失败立马终止，因此失败所产生的 PAM 信息无法记录。</p>
</li>
<li>
<p><strong>sufficient</strong></p>
<p>若验证成功则立刻回传 success 给原程序，并终止后续的验证流程，失败则带有 failure 标志并继续后续的验证流程，与 requisite 刚好相反。</p>
</li>
<li>
<p><strong>optional</strong></p>
<p>这个模块控制目的大多是在显示信息，并不是用在验证方面。</p>
</li>
</ul>
<p>如果控制标志出现的是 include，代表的是调用后面的文件作为这个类别的验证。</p>
<h2 id="模块"><a class="markdownIt-Anchor" href="#模块"></a> 模块</h2>
<p>模块存放路径：</p>
<table>
<thead>
<tr>
<th>路径</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/etc/pam.d/*</code></td>
<td>每个程序单独的 PAM 配置文件。</td>
</tr>
<tr>
<td><code>/lib/security/*</code></td>
<td>PAM 模块文件实际放置位置。</td>
</tr>
<tr>
<td><code>/etc/security/*</code></td>
<td>其他 PAM 环境配置文件。</td>
</tr>
<tr>
<td><code>/usr/share/doc/pam-*/</code></td>
<td>详细的 PAM 说明文件。</td>
</tr>
</tbody>
</table>
<p>一些比较常用的模块：</p>
<table>
<thead>
<tr>
<th>模块名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>pam_securetty.so</td>
<td>限制系统管理员 root 只能从安全的终端机登录，例如 tty1-7(由 <code>/etc/securetty</code> 设定)。</td>
</tr>
<tr>
<td>pam_nologin.so</td>
<td>限制一般用户能否登录主机。当 <code>/etc/nologin</code> 文件存在时，所有一般用户均无法登录。</td>
</tr>
<tr>
<td>pam_selinux.so</td>
<td>SELinux 是针对程序来进行详细管理权限的功能。</td>
</tr>
<tr>
<td>pam_console.so</td>
<td>需要使用特殊的终端接口登录主机时，这个模块帮助处理一些文件权限的问题。</td>
</tr>
<tr>
<td>pam_loginuid.so</td>
<td>验证用户的 UID 数值，可以使用这个模块来规范。</td>
</tr>
<tr>
<td>pam_env.so</td>
<td>用来设置环境变量的一个模块。</td>
</tr>
<tr>
<td>pam_unix.so</td>
<td>用于验证阶段的认证功能，可以用于授权阶段的账号许可证管理、日志记录等。</td>
</tr>
<tr>
<td>pam_pwquality.so</td>
<td>用来验证密码的强度，包括密码是否在字典中、密码最大重试次数等。</td>
</tr>
<tr>
<td>pam_cracklib.so</td>
<td>用来检验密码强度，已被 pam_pwquality.so 取代。</td>
</tr>
<tr>
<td>pam_limits.so</td>
<td>ulimit 命令用到了这个模块。</td>
</tr>
</tbody>
</table>
<p>另外一个比较常用的是 <code>/etc/security/limits.conf</code> 这个配置文件，可以直接修改这个文件来对用户的系统使用配额做一些设置。</p>
<p>例如修改用户 user1 只能新建小于 100MB 的文件（hard），且大于 80MB 会警告（soft）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">vim</span> /etc/security/limits.conf 
<span class="token comment">#&lt;domain>      &lt;type>  &lt;item>         &lt;value></span>
<span class="token comment">#</span>
<span class="token comment">#*               soft    core            0</span>
<span class="token comment">#*               hard    rss             10000</span>
<span class="token comment">#@student        hard    nproc           20</span>
<span class="token comment">#@faculty        soft    nproc           20</span>
<span class="token comment">#@faculty        hard    nproc           50</span>
<span class="token comment">#ftp             hard    nproc           0</span>
<span class="token comment">#@student        -       maxlogins       4</span>
user1            soft    fsize           <span class="token number">80000</span>
user1            hard    fsize           <span class="token number">100000</span>
<span class="token string">"/etc/security/limits.conf"</span> 64L, 2499C written<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用 <code>ulimit</code> 查询，并使用 <code>dd</code> 命令测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>user1@101c7 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">ulimit</span> <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'file size'</span>
core <span class="token function">file</span> size          <span class="token punctuation">(</span>blocks, -c<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token function">file</span> size               <span class="token punctuation">(</span>blocks, -f<span class="token punctuation">)</span> <span class="token number">80000</span>
<span class="token punctuation">[</span>user1@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>filetest <span class="token assign-left variable">bs</span><span class="token operator">=</span>1M <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">200</span>
File size limit exceeded
<span class="token punctuation">[</span>user1@101c7 ~<span class="token punctuation">]</span>$ ll <span class="token parameter variable">-k</span> filetest
-rw-rw-r--. <span class="token number">1</span> user1 user1 <span class="token number">81920000</span> Sep <span class="token number">13</span> <span class="token number">11</span>:23 filetest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例如限制用户组 group1 每次只能有一个用户登录系统（maxlogins）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">vim</span> /etc/security/limits.conf 
<span class="token comment">#&lt;domain>      &lt;type>  &lt;item>         &lt;value></span>
@group1          hard    maxlogins       <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>登录相关日志文件存放目录有 <code>/var/log/secure</code> 和 <code>/var/log/messages</code>。如果发生任何无法登录或是产生意外错误，由 PAM 模块将数据记录在 <code>/var/log/secure</code> 中。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 目录配置标准与结构</title>
    <url>/4087499240/</url>
    <content><![CDATA[<h1 id="目录配置标准"><a class="markdownIt-Anchor" href="#目录配置标准"></a> 目录配置标准</h1>
<p>Linux 采用将文件储存在单个目录结构中，这种目录被称为虚拟目录（Virtual Directory）。虚拟目录将安装在主机上的所有储存设备的文件路径纳入单个目录结构中。</p>
<p>各种发行版遵循同一套文件系统层次结构标准（FHS，Filesystem Hierarchy Standard），目的在于规范每个特定目录应该放什么数据。FHS 依据文件系统使用的频繁与否，以及是否允许使用者随意变更，将目录定义为四种交互形态：</p>
<ul>
<li>
<p><strong>可分享的</strong>（Shareable）</p>
<p>可以分享给其他系统挂载使用的目录，包括可执行文件与使用者的邮件等数据。</p>
</li>
<li>
<p><strong>不可分享的</strong>（Unshareable）</p>
<p>自己机器上面运行的设备文件或者是与程序有关的 socket 文件等，仅能自己使用，所以不适合分享。</p>
</li>
<li>
<p><strong>不变的</strong>（Static）</p>
<p>有些数据是不会经常变动的，例如函数库、文件说明文档、系统管理员所管理的主机服务配置文件等。</p>
</li>
<li>
<p><strong>可变动的</strong>（Variable）</p>
<p>经常改变的数据，例如日志文件等。</p>
</li>
</ul>
<h1 id="顶级目录"><a class="markdownIt-Anchor" href="#顶级目录"></a> 顶级目录</h1>
<p>所有目录都由根目录/衍生而来，因此 FHS 标准建议根目录所在分区应该越小越好，最好不要将应用程序所安装的软件与根目录放在同一个分区。这样可以提高性能，根目录所在的文件系统也较不容易发生问题。</p>
<p>开机过程中仅有根目录会被挂载，其他分区则是在开机完成后陆续进行挂载。</p>
<p>必须存在的顶级目录：</p>
<table>
<thead>
<tr>
<th><strong>目录</strong></th>
<th><strong>目录说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/bin</code></td>
<td>二进制目录，存放可以被 root 和一般账户所用的命令，以及在单用户维护模式下仍能被操作的常用命令，如 <code>cat</code>、<code>mv</code>、<code>chown</code> 等。</td>
</tr>
<tr>
<td><code>/boot</code></td>
<td>启动目录，存放开机会使用到的文件，包括内核文件及开机所需配置文件。</td>
</tr>
<tr>
<td><code>/dev</code></td>
<td>设备目录，Linux 上任何设备与接口设备都是以文件的形式存在于这个目录下，访问目录下的某个文件就等于访问某个设备。主要分为三类硬件，例如硬盘（sda）和打印机（lp0），终端如控制台（tty），伪设备如 <code>/dev/null</code> 和 <code>/dev/zero</code>。</td>
</tr>
<tr>
<td><code>/etc</code></td>
<td>系统配置文件目录，系统配置文件几乎都放在这里，如账号密码，服务起始文件等。一般不要放可执行文件到这个目录下。<br /><code>/etc/X11</code>：与 X Window 有关的配置文件放在这里，尤其是 xorg.conf 这个 XServer 的配置文件。<br /><code>/etc/opt</code>：放置第三方软件配置文件。<br /><code>/etc/sgml</code>：与 SGML 格式有关的各项配置文件。<br /><code>/etc/xml</code>：与 XML 格式有关的配置文件。</td>
</tr>
<tr>
<td><code>/home</code></td>
<td>主目录，系统默认用户主文件夹，一般子文件夹以用户账号命名。</td>
</tr>
<tr>
<td><code>/lib</code>、<code>/lib64</code></td>
<td>库目录，存放开机时会用到的函数库，以及在 <code>/bin</code> 或 <code>/sbin</code> 中命令会调用的函数库。<br /><code>/lib/modules/</code>：存放内核相关的模块（驱动程序）。</td>
</tr>
<tr>
<td><code>/media</code></td>
<td>媒体目录，存放可删除设备，包括 CD、DVD、U 盘等设备都暂时挂载于此。</td>
</tr>
<tr>
<td><code>/mnt</code></td>
<td>挂载目录，如果想要暂时挂载某些额外的设备，一般放置到这个目录中。</td>
</tr>
<tr>
<td><code>/opt</code></td>
<td>可选目录，给第三方软件放置的目录，包括发行版附加的一些软件包。</td>
</tr>
<tr>
<td><code>/root</code></td>
<td>系统管理员的主文件夹。</td>
</tr>
<tr>
<td><code>/sbin</code></td>
<td>系统二进制目录，只有 root 可用，包括开机，修复，还原系统所需要的系统命令，如 <code>fdisk</code>、<code>ifconfig</code>、<code>init</code> 等。</td>
</tr>
<tr>
<td><code>/srv</code></td>
<td>服务目录，一些网络服务启动后，这些服务所需要取用的数据目录，如将 www 服务需要的网页文件放置到 <code>/srv/www</code> 里。</td>
</tr>
<tr>
<td><code>/tmp</code></td>
<td>临时目录，重要数据不可放置到此目录，会被一些系统进程定期清空。</td>
</tr>
<tr>
<td><code>/run</code></td>
<td>运行目录，存放系统运作时的运行时数据。</td>
</tr>
</tbody>
</table>
<p>其他重要目录：</p>
<table>
<thead>
<tr>
<th><strong>目录</strong></th>
<th><strong>目录说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/lost+found</code></td>
<td>只有 ext 文件系统格式才会产生的目录，用来放置丢失的文件片段。</td>
</tr>
<tr>
<td><code>/proc</code></td>
<td>进程目录。这个目录本身是一个虚拟文件系统（Virtual Filesystem），它放置的数据都在内存中，如系统内核、进程、外部设备的状态及网络状态等，所以实际不占任何硬盘空间。</td>
</tr>
<tr>
<td><code>/sys</code></td>
<td>系统目录。和 <code>/proc</code> 类似的虚拟文件系统，记录与内核相关信息，包括目前已加载的内核模块与硬件设备信息。</td>
</tr>
</tbody>
</table>
<h1 id="usr-目录"><a class="markdownIt-Anchor" href="#usr-目录"></a> /usr 目录</h1>
<p><code>/usr</code> 目录存放静态数据,即不会随时间改变的文件,原则上放置独立安装的软件数据。系统默认软件也放在 <code>/usr</code> 目录下。</p>
<p><code>/usr</code> 目录下的子目录说明：</p>
<table>
<thead>
<tr>
<th><strong>目录</strong></th>
<th><strong>目录说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/usr/bin/</code></td>
<td>存放所有的用户命令。</td>
</tr>
<tr>
<td><code>/usr/include/</code></td>
<td>存放 C/C++ 等编程语言的头文件（header）和包含文件（include）。</td>
</tr>
<tr>
<td><code>/usr/lib/</code></td>
<td>存放各种应用软件的函数库、目标文件，以及一般用户不使用的执行文件或脚本。</td>
</tr>
<tr>
<td><code>/usr/local/</code></td>
<td>推荐系统管理员自行下载安装的软件存放目录。</td>
</tr>
<tr>
<td><code>/usr/sbin/</code></td>
<td>存放非正常运行所需的系统命令，例如网络服务器软件的服务命令。</td>
</tr>
<tr>
<td><code>/usr/share/</code></td>
<td>存放共享文件，如 man 手册和 doc 帮助文档。</td>
</tr>
<tr>
<td><code>/usr/src/</code></td>
<td>一般建议将源码放在该目录下。内核源码建议放在 <code>/usr/src/linux/</code> 下。</td>
</tr>
<tr>
<td><code>/usr/libexec/</code></td>
<td>存放某些不被一般使用者惯用的可执行文件或脚本。</td>
</tr>
</tbody>
</table>
<h1 id="var-目录"><a class="markdownIt-Anchor" href="#var-目录"></a> /var 目录</h1>
<p><code>/var</code> 目录是用来存放会经常变动的文件的，包括缓存（cache）、日志文件（log file）以及某些软件运行时所产生的文件（lock file、run file）或 MySQL 数据库的文件等等。最好可以将它独立出来挂在单独的一个分区中。</p>
<p><code>/var</code> 目录下的子目录说明：</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>目录说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/var/cache/</code></td>
<td>应用程序本身运行过程中会产生一些暂存文件。</td>
</tr>
<tr>
<td><code>/var/lib/</code></td>
<td>程序执行的过程中需要使用到的数据文件的放置目录。在此目录下各自的软件应该要有自己的目录，例如 MySQL 数据库放置到 <code>/var/lib/mysql/</code> 下。</td>
</tr>
<tr>
<td><code>/var/lock/</code></td>
<td>某些设备或文件资源一次只能被一个应用程序所使用，为了避免使用冲突就得给该设备上锁。例如刻录机设备在刻录中时会被锁上。目前此目录已被挪到 <code>/run/lock/</code> 中。</td>
</tr>
<tr>
<td><code>/var/log/</code></td>
<td>日志文件放置的目录，例如记录登录者信息的文件 <code>/var/log/messages</code>、<code>/var/log/wtmp</code>。</td>
</tr>
<tr>
<td><code>/var/mail/</code></td>
<td>放置个人电子邮件信箱的目录，等同于 <code>/var/spool/mail/</code>。</td>
</tr>
<tr>
<td><code>/var/run/</code></td>
<td>某些程序或服务启动后，会将它们的 PID 放置在这个目录下。</td>
</tr>
<tr>
<td><code>/var/spool/</code></td>
<td>放置一些队列数据，通常在使用后会被删除。</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
  <entry>
    <title>计算机软件基础</title>
    <url>/2759544459/</url>
    <content><![CDATA[<h1 id="数字系统"><a class="markdownIt-Anchor" href="#数字系统"></a> 数字系统</h1>
<p>计算机使用电信号的开和关来代表二进制的 1 和 0，这种逢 2 进 1 位的表示法称为二进制。除了二进制，常用的进制还有八进制和十六进制。然而，现实生活中使用的数字系统是十进制。</p>
<p>在编程语言中，表示二进制数的前缀是&quot;0b&quot;，表示八进制数的前缀是&quot;0o&quot;，表示十六进制数的前缀是&quot;0x&quot;。</p>
<h2 id="二进制转十进制"><a class="markdownIt-Anchor" href="#二进制转十进制"></a> 二进制转十进制</h2>
<p>例如，要将二进制数 1101101 转换为十进制数，手动计算方法如下：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1101101</mn><mo>=</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>6</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>5</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>4</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mn>1</mn><mo>=</mo><mn>64</mn><mo>+</mo><mn>32</mn><mo>+</mo><mn>0</mn><mo>+</mo><mn>8</mn><mo>+</mo><mn>4</mn><mo>+</mo><mn>0</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>109</mn></mrow><annotation encoding="application/x-tex">1101101=1*2^6+1*2^5+0*2^4+1*2^3+1*2^2+0*2^1+1=64+32+0+8+4+0+1=109
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">9</span></span></span></span></span></p>
<p>在 Bash 中，可以使用<code>echo $(())</code>来直接将二进制数转换为十进制数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server2 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span><span class="token number">2</span>#<span class="token number">1101101</span><span class="token variable">))</span></span>
<span class="token number">109</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="十进制转二进制"><a class="markdownIt-Anchor" href="#十进制转二进制"></a> 十进制转二进制</h2>
<p>例如，将十进制数 109 转换为二进制数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">109</span>/2<span class="token operator">=</span><span class="token number">54</span><span class="token punctuation">..</span>.1
054/2<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">..</span>.0
027/2<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">..</span>.1
013/2<span class="token operator">=</span>06<span class="token punctuation">..</span>.1
007/2<span class="token operator">=</span>03<span class="token punctuation">..</span>.0
003/2<span class="token operator">=</span>01<span class="token punctuation">..</span>.1
001/2<span class="token operator">=</span>00<span class="token punctuation">..</span>.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将商除到 0 为止，把所有的余数从下往上读，得到的就是二进制结果 1101101。</p>
<p>在 Bash 中，可以通过调用<code>bc</code>来进行计算：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server2 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"obase=2;ibase=10;109"</span><span class="token operator">|</span><span class="token function">bc</span> <span class="token parameter variable">-l</span>
<span class="token number">1101101</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="二进制转十六进制"><a class="markdownIt-Anchor" href="#二进制转十六进制"></a> 二进制转十六进制</h2>
<p>例如，将二进制数 1101101 转换为十六进制数。</p>
<p>因为四位二进制恰好等于一位十六进制，所以先将二进制数从低位到高位分为四位一组，高位不足四位在前面补 0：</p>
<p>0110 1101</p>
<p>然后将每一组转为对应的十六进制数：</p>
<p>6 D</p>
<p>得到转换结果 0x6D。</p>
<h2 id="十六进制转二进制"><a class="markdownIt-Anchor" href="#十六进制转二进制"></a> 十六进制转二进制</h2>
<p>例如，将十六进制数 0x6D 转换为二进制数。</p>
<p>原理同二进制转十六进制，将每位十六进制单独拿出来：</p>
<p>6 D</p>
<p>将每位转为对应的二进制：</p>
<p>0110 1101</p>
<p>得到转换结果 1101101。</p>
<h2 id="计量单位"><a class="markdownIt-Anchor" href="#计量单位"></a> 计量单位</h2>
<p>计算机中常用的计量单位有下面一些：</p>
<ul>
<li>存储容量单位
<ul>
<li><strong>比特</strong>（bit）：二进制单位，只记录 0 或 1。</li>
<li><strong>字节</strong>（Byte）：储存记录用的单位，1Byte = 8bit。1KB = 1024Byte，再往上有 GB、TB、PB、EB、ZB 等单位。</li>
</ul>
</li>
<li>速度单位
<ul>
<li><strong>运算速度</strong>：Hz 代表秒分之一，CPU 运算速度常使用 MHz 或 GHz。1MHz = 1000*1000Hz。</li>
<li><strong>网络传输</strong>：bps 意思是 bit per second 每秒多少比特，常见的网卡速度 100Mbps 意即每秒传输 100Mb，转为实际文件传输速度等于 12.5MB/s。</li>
</ul>
</li>
</ul>
<h1 id="编码系统"><a class="markdownIt-Anchor" href="#编码系统"></a> 编码系统</h1>
<p>计算机只能识别数字，因此需要使用编码系统将文字转换为数字进行储存。</p>
<h2 id="编码过程"><a class="markdownIt-Anchor" href="#编码过程"></a> 编码过程</h2>
<p>编码的过程是根据一个编码对照表将文字转换为对应编码表中的编号，并将编号存入文件中。</p>
<p>在读取文件时，再根据编码对照表将编号还原成文字进行显示。</p>
<p>如果选择的编码表与实际不符，则会出现所谓的“乱码”。</p>
<p>常用的编码表包括 ASCII、GB2312 和 Unicode 等。</p>
<h2 id="ascii-编码"><a class="markdownIt-Anchor" href="#ascii-编码"></a> ASCII 编码</h2>
<p>美国信息交换标准码（ASCII，American Standard Code for Information Interchange）为每个字符指定 7 位（最左边的位被忽略掉），占用 1Byte 的记录，因此总共可以表示 128 个字符，即从二进制 0000000 到 1111111。</p>
<p>ASII 码中包含 33 个控制字符、52 个字母（65 ~ 90，97 ~ 122）、10 个数字（48 ~ 57）、32 个标点符号以及空白符。</p>
<h2 id="gb2312-编码"><a class="markdownIt-Anchor" href="#gb2312-编码"></a> GB2312 编码</h2>
<p>简体中文最常用的是 GB2312 编码，每个中文字会占用 2Bytes。</p>
<p>理论上有 2<sup>16</sup>=65536 个记录位置，实际只收录了一万三千多个中文字。</p>
<h2 id="unicode-编码"><a class="markdownIt-Anchor" href="#unicode-编码"></a> Unicode 编码</h2>
<p>Unicode 编码也叫 UTF-8 或统一码。基本上包含了所有语言的文字。</p>
<h1 id="逻辑门"><a class="markdownIt-Anchor" href="#逻辑门"></a> 逻辑门</h1>
<p>计算机中的逻辑电路基本单元有以下几种：</p>
<h2 id="非门not-gate"><a class="markdownIt-Anchor" href="#非门not-gate"></a> 非门（NOT Gate）</h2>
<p>也称为反相器、倒相器、逻辑否定电路，它的输出是输入的反相。当输入端为高电平(1)时，输出端为低电平(0)，当输入端为低电平(0)时，输出端为高电平(1)。</p>
<p>非门的真值表：</p>
<table>
<thead>
<tr>
<th>输入 A</th>
<th>输出 Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下：</p>
<p><img data-src="../../../images/%E9%9D%9E%E9%97%A8.png" alt="非门" /></p>
<h2 id="与门and-gate"><a class="markdownIt-Anchor" href="#与门and-gate"></a> 与门（AND Gate）</h2>
<p>与门又称与电路、逻辑积、逻辑与电路。当所有的输入同时为高电平(1)时，输出才为高电平(1)，否则输出为低电平(0)。</p>
<p>与门的真值表：</p>
<table>
<thead>
<tr>
<th>输入 A</th>
<th>输入 B</th>
<th>输出 Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下：</p>
<p><img data-src="../../../images/%E4%B8%8E%E9%97%A8.png" alt="与门" /></p>
<h2 id="或门or-gate"><a class="markdownIt-Anchor" href="#或门or-gate"></a> 或门（OR Gate）</h2>
<p>又称或电路、逻辑和电路。只要输入中有一个为高电平(1)时，输出就为高电平(1)；只有当所有的输入全为低电平(0)时，输出才为低电平(0)。</p>
<p>或门的真值表：</p>
<table>
<thead>
<tr>
<th>输入 A</th>
<th>输入 B</th>
<th>输出 Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下：</p>
<p><img data-src="../../../images/%E6%88%96%E9%97%A8.jpg" alt="或门" /></p>
<h2 id="与非门nand-gate"><a class="markdownIt-Anchor" href="#与非门nand-gate"></a> 与非门（NAND Gate）</h2>
<p>与非门是与门和非门的叠加。当输入均为高电平(1)时，输出为低电平(0)；当输入中至少有一个为低电平(0)时，输出为高电平(1)。与非门可以看作是与门和非门的叠加。</p>
<p>与非门真值表：</p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下：</p>
<p><img data-src="../../../images/%E4%B8%8E%E9%9D%9E%E9%97%A8.png" alt="与非门" /></p>
<h2 id="或非门nor-gate"><a class="markdownIt-Anchor" href="#或非门nor-gate"></a> 或非门（NOR Gate）</h2>
<p>或非门实现逻辑或非功能。它有多个输入端，1 个输出端。多输入或非门可由 2 输入或非门和反相器构成。只有当两个输入 A 和 B 为低电平(0)时，输出为高电平(1)。也可以理解为任意输入为高电平(1)，输出为低电平(0)。</p>
<p>或非门真值表:</p>
<table>
<thead>
<tr>
<th>输入 A</th>
<th>输入 B</th>
<th>输出 Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下：</p>
<p><img data-src="../../../images/%E6%88%96%E9%9D%9E%E9%97%A8.png" alt="或非门" /></p>
<h2 id="异或门xor-gate"><a class="markdownIt-Anchor" href="#异或门xor-gate"></a> 异或门（XOR Gate）</h2>
<p>异或门是数字逻辑中实现逻辑异或的逻辑门。多输入异或门可由两输入异或门构成。若两个输入的电平相异，则输出为高电平(1)；若两个输入的电平相同，则输出为低电平(0)。即如果两个输入不同，则异或门输出高电平(1)。</p>
<p>异或门真值表:</p>
<table>
<thead>
<tr>
<th>输入 A</th>
<th>输入 B</th>
<th>输出 Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下：</p>
<p><img data-src="../../../images/%E5%BC%82%E6%88%96%E9%97%A8.png" alt="异或门" /></p>
<h2 id="同或门xnor-gate"><a class="markdownIt-Anchor" href="#同或门xnor-gate"></a> 同或门（XNOR Gate）</h2>
<p>同或门也称为异或非门，在异或门的输出端再加上一个非门就构成了异或非门。当 2 个输入端中有且只有一个是低电平(0)时，输出为低电平(0)。即当输入电平相同时，输出为高电平(1)。</p>
<p>同或门真值表:</p>
<table>
<thead>
<tr>
<th>输入 A</th>
<th>输入 B</th>
<th>输出 Y</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>逻辑符号表示如下：</p>
<p><img data-src="../../../images/%E5%90%8C%E6%88%96%E9%97%A8.png" alt="同或门" /></p>
<h2 id="二进制加法器"><a class="markdownIt-Anchor" href="#二进制加法器"></a> 二进制加法器</h2>
<p>可以使用两种基本逻辑门来计算两个二进制数相加的结果：</p>
<ul>
<li>
<p><strong>位相加</strong></p>
<p>位相加的计算结果由 XOR 异或门实现。</p>
<table>
<thead>
<tr>
<th>位和</th>
<th>0</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>0</strong></td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td><strong>1</strong></td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><strong>进位位</strong></p>
<p>进位位的计算结果由 AND 与门实现。</p>
<table>
<thead>
<tr>
<th>进位</th>
<th>0</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>0</strong></td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td><strong>1</strong></td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>将它们连起来就成为半加器（Half Adder）：</p>
<p><img data-src="../../../images/%E5%8D%8A%E5%8A%A0%E5%99%A8.png" alt="半加器" /></p>
<p>为了将可能产生的进位位纳入下一次运算，需要对三个二进制数进行加法运算，最终将两个半加器和一个或门连接起来成为一个全加器（Full Adder）：</p>
<p><img data-src="../../../images/%E5%85%A8%E5%8A%A0%E5%99%A8.png" alt="全加器" /></p>
<p>首先这一次计算两个二进制数 A 和 B 的和得到进位和位和输出。然后将位和输出与上一次计算结果的进位输出相加得到另外一个进位和位和输出，最后将两次的进位输出做或运算，与上一步得出的位和输出在一起传递给下一环节。</p>
<h1 id="软件程序"><a class="markdownIt-Anchor" href="#软件程序"></a> 软件程序</h1>
<p>通常软件程序可以分为两类：操作系统和应用程序。</p>
<h2 id="操作系统"><a class="markdownIt-Anchor" href="#操作系统"></a> 操作系统</h2>
<p>操作系统（OS，Operating System）是一组程序，用于管理计算机的所有活动以及驱动系统中的所有硬件。</p>
<p>操作系统内核直接参考硬件规格编写，用于管理硬件，因此同一个操作系统内核不能在不同的硬件构架下运行。</p>
<p>操作系统的功能主要包括：</p>
<ul>
<li>
<p><strong>系统调用接口</strong>（System call interface）</p>
<p>方便程序员通过接口与内核通信，利用硬件资源。</p>
</li>
<li>
<p><strong>程序管理</strong>（Process Control）</p>
<p>一部计算机可以同时运行很多软件，一般管运行中的程序叫进程。进程可以在前台也可以在后台运行，内核控制着系统管理运行在系统上的所有进程。</p>
</li>
<li>
<p><strong>内存管理</strong>（Memory Management）</p>
<p>因为程序代码和数据都必须载入到内存中运行，所以内存控制非常重要。</p>
<p>交换空间（虚拟内存）用于物理内存不足时提供内存交换（swap）功能，调用虚拟内存的过程称为页面调度（Paging）。</p>
<p>内存储存单元按组划分成很多块，这些块称为页面（Page）。内核将每个内存页面放在物理内存或交换空间中，然后维护一个内存页面表，自动把一段时间未访问的内存页面复制到交换空间（Swapping Out）。当程序要访问一个已被换出的内存页面时，内核必须从物理内存换出另外一个内存页面给它让出空间，然后从交换空间换入请求的内存页面。</p>
</li>
<li>
<p><strong>文件系统管理</strong>（Filesystem Management）</p>
<p>负责对多种文件系统的支持，管理数据输入输出工作，文件格式支持等。</p>
</li>
<li>
<p><strong>设备驱动</strong>（Device Driver）</p>
<p>管理硬件的驱动。驱动程序相当于应用程序和硬件设备的中间人，允许内核与设备之间交换数据。</p>
</li>
</ul>
<h2 id="应用程序"><a class="markdownIt-Anchor" href="#应用程序"></a> 应用程序</h2>
<p>应用程序是利用操作系统提供的开发接口开发出来的软件，这些软件通常针对特定功能而开发。</p>
<h2 id="源代码"><a class="markdownIt-Anchor" href="#源代码"></a> 源代码</h2>
<p>源代码是创建软件的原始数据。可以使用诸如 C++之类的编程语言编写源代码，在使用这些代码之前需要进行编译。使用 Perl 或 Python 这样的脚本语言编写源代码，则无需编译即可运行。</p>
<h2 id="开源许可"><a class="markdownIt-Anchor" href="#开源许可"></a> 开源许可</h2>
<p>以源代码形式提供的软件称为开源软件，通常可以自由地查看、共享、使用和修改它。</p>
<p>开源软件许可证声明对源代码拥有版权，并确定代码的使用和发布以及派生代码的使用和发布的自由范围和限制。常见的开源许可证有 BSD 和 GPL。</p>
<ul>
<li>
<p><strong>BSD 许可证</strong></p>
<p>持有 BSD 许可证的源代码可以自由地进行修改，而且不需要重新发布这些修改。常用于私有或商业软件中。</p>
</li>
<li>
<p><strong>GPL 许可证</strong></p>
<p>GNU 通用公共许可证（GPL）规定任何已发布的软件所做的任何修改都必须以相同的许可证发布。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 中引导与启动流程</title>
    <url>/4291230975/</url>
    <content><![CDATA[<h1 id="bios-启动流程"><a class="markdownIt-Anchor" href="#bios-启动流程"></a> BIOS 启动流程</h1>
<p>目前，主机系统在载入硬件驱动方面的程序有两种：使用 BIOS 和 UEFI。简单的开机流程分为以下步骤：</p>
<ol>
<li>载入 BIOS 或 UEFI 的硬件信息与自测（POST，Power-On Self-Test），并根据设置取得第一个可开机的设备；</li>
<li>对于 BIOS，通过硬件的 INT 13 中断功能，读取并执行第一个可开机设备内 MBR 的引导加载程序（Boot Loader）；对于 UEFI，读取并执行第一个可开机设备内 EFI 分区的引导加载程序；</li>
<li>依据引导加载程序的设置，识别文件系统格式，加载核心文件。由内核开始检测硬件与驱动；</li>
<li>启动初始进程管理程序（systemd 或 System V），最终目的都是启动基础服务和用户设置的开机启动程序。</li>
</ol>
<p>在使用 BIOS 时，通常搭配 MBR（Master Boot Record）分区表。而在使用 UEFI 时，通常搭配 GPT（GUID Partition Table）分区表。GPT 格式启动过程与 MBR 类似，差异在于开机管理程序是否支持 GPT。</p>
<p>在引导加载程序读取到内核文件后，Linux 会将内核解压到内存中，由内核开始测试与驱动硬件。此时 Linux 内核会以自己检测结果为准，而不理会 BIOS 的硬件检测结果。也就是说内核此时开始接管 BIOS 后的工作了。</p>
<h1 id="多系统引导"><a class="markdownIt-Anchor" href="#多系统引导"></a> 多系统引导</h1>
<p>引导加载程序除了可以安装在 MBR 外，还可以安装到每个文件系统的引导扇区（Boot Sector）。</p>
<p>例如，硬盘第一和第二分区分别安装了 Windows 和 Linux。开机装载第一个分区引导加载程序，此时会出现分支选项：</p>
<ul>
<li>选择启动 Windows 直接加载第一个分区中的 Windows 核心文件。</li>
<li>选择启动 Linux 则转到第二个分区的引导扇区，由第二个分区的引导加载程序完成 Linux 系统启动工作。</li>
</ul>
<p>如果要安装多重开机，一般先安装 Windows 再安装 Linux，因为 Windows 安装时会直接覆盖掉 MBR 以及自己所在分区的引导扇区，并且 Windows 的引导程序默认没有转移引导功能。而 Linux 安装时可以选择引导加载程序不安装到 MBR，只装在指定分区的引导扇区。之后修改引导程序加入 Windows 开机选项，完成双系统引导功能。</p>
<h1 id="引导目录说明"><a class="markdownIt-Anchor" href="#引导目录说明"></a> 引导目录说明</h1>
<p>如果使用 GRUB 引导，需给 <code>/boot</code> 分区来放置开机过程所需的文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ ll /boot
total <span class="token number">149232</span>
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">153596</span> Aug <span class="token number">31</span> <span class="token number">10</span>:57 config-3.10.0-1160.41.1.el7.x86_64
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">147819</span> Apr <span class="token number">20</span>  <span class="token number">2018</span> config-3.10.0-862.el7.x86_64
drwxr-xr-x. <span class="token number">3</span> root root       <span class="token number">17</span> Sep  <span class="token number">7</span> <span class="token number">13</span>:34 efi
drwxr-xr-x. <span class="token number">2</span> root root       <span class="token number">27</span> Sep  <span class="token number">7</span> <span class="token number">13</span>:35 grub
drwx------. <span class="token number">5</span> root root      <span class="token number">132</span> Sep  <span class="token number">7</span> 05:55 grub2
-rw-------. <span class="token number">1</span> root root <span class="token number">55385253</span> Sep  <span class="token number">7</span> <span class="token number">13</span>:37 initramfs-0-rescue-77a36143eb014dd5a0d6e738b1d84778.img
-rw-------. <span class="token number">1</span> root root <span class="token number">21322754</span> Sep  <span class="token number">7</span> 05:55 initramfs-3.10.0-1160.41.1.el7.x86_64.img
-rw-------. <span class="token number">1</span> root root <span class="token number">13851614</span> Sep <span class="token number">18</span> <span class="token number">23</span>:13 initramfs-3.10.0-1160.41.1.el7.x86_64kdump.img
-rw-------. <span class="token number">1</span> root root <span class="token number">21288233</span> Sep  <span class="token number">7</span> 05:56 initramfs-3.10.0-862.el7.x86_64.img
-rw-------. <span class="token number">1</span> root root <span class="token number">13761710</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:00 initramfs-3.10.0-862.el7.x86_64kdump.img
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">320757</span> Aug <span class="token number">31</span> <span class="token number">10</span>:57 symvers-3.10.0-1160.41.1.el7.x86_64.gz
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">304926</span> Apr <span class="token number">20</span>  <span class="token number">2018</span> symvers-3.10.0-862.el7.x86_64.gz
-rw-------. <span class="token number">1</span> root root  <span class="token number">3620596</span> Aug <span class="token number">31</span> <span class="token number">10</span>:57 System.map-3.10.0-1160.41.1.el7.x86_64
-rw-------. <span class="token number">1</span> root root  <span class="token number">3409143</span> Apr <span class="token number">20</span>  <span class="token number">2018</span> System.map-3.10.0-862.el7.x86_64
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">6224704</span> Sep  <span class="token number">7</span> <span class="token number">13</span>:37 vmlinuz-0-rescue-77a36143eb014dd5a0d6e738b1d84778
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">6773352</span> Aug <span class="token number">31</span> <span class="token number">10</span>:57 vmlinuz-3.10.0-1160.41.1.el7.x86_64
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">6224704</span> Apr <span class="token number">20</span>  <span class="token number">2018</span> vmlinuz-3.10.0-862.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>/boot</code> 内文件与目录说明如下所示：</p>
<table>
<thead>
<tr>
<th>文件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>config-*</td>
<td>此版本内核被编译时选择的功能与模块配置文件</td>
</tr>
<tr>
<td>grub、grub2</td>
<td>开机管理程序 grub 相关数据目录</td>
</tr>
<tr>
<td>initramfs-0-rescue-*</td>
<td>救援模式的虚拟文件系统</td>
</tr>
<tr>
<td>initramfs-*.img</td>
<td>正常模式的虚拟文件系统</td>
</tr>
<tr>
<td>initramfs-*kdump.img</td>
<td>内核出问题时用到的虚拟文件系统</td>
</tr>
<tr>
<td>System.map-*</td>
<td>内核功能放置到内存位址的对应表</td>
</tr>
<tr>
<td>vmlinuz-0-rescue-*</td>
<td>救援模式的内核文件</td>
</tr>
<tr>
<td>vmlinuz-*</td>
<td>正常模式的内核文件</td>
</tr>
</tbody>
</table>
<h1 id="虚拟文件系统"><a class="markdownIt-Anchor" href="#虚拟文件系统"></a> 虚拟文件系统</h1>
<p>Linux 内核可以动态载入内核模块（驱动），这些内核模块放置在 <code>/lib/modules/</code> 目录内。由于模块放置到根目录内，因此开机过程中内核必须要以只读方式挂载根目录，才可以读取到驱动程序。</p>
<p>但是在挂载根目录时，很大可能 Linux 内核并不认识 SATA 设备。为了让内核顺利执行下去，引用了一个虚拟文件系统（Initial RAM Disk 或 Initial RAM Filesystem）来处理，就是在 <code>/boot</code> 目录内以 initramfs 开头命名的 img 文件。</p>
<p>虚拟文件系统的 img 文件也能被引导加载程序载入到内存中，解压后在内存中仿真成一个根目录。内核会读取虚拟文件系统内的驱动，通常是与磁盘接口和文件系统格式支持有关的驱动程序。</p>
<p>等驱动载入完毕，根目录所在分区信息被正确识别后，此虚拟文件系统被卸载，并挂载实际的根目录文件系统，继续后续开机流程。</p>
<p>可以用 <code>lsinitrd</code> 命令查看 initramfs 镜像的内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ lsinitrd /boot/initramfs-3.10.0-1160.41.1.el7.x86_64.img 
Image: /boot/initramfs-3.10.0-1160.41.1.el7.x86_64.img: 21M
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
Early CPIO image
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
drwxr-xr-x   <span class="token number">3</span> root     root            <span class="token number">0</span> Sep  <span class="token number">7</span> 05:55 <span class="token builtin class-name">.</span>
-rw-r--r--   <span class="token number">1</span> root     root            <span class="token number">2</span> Sep  <span class="token number">7</span> 05:55 early_cpio
drwxr-xr-x   <span class="token number">3</span> root     root            <span class="token number">0</span> Sep  <span class="token number">7</span> 05:55 kernel
drwxr-xr-x   <span class="token number">3</span> root     root            <span class="token number">0</span> Sep  <span class="token number">7</span> 05:55 kernel/x86
drwxr-xr-x   <span class="token number">2</span> root     root            <span class="token number">0</span> Sep  <span class="token number">7</span> 05:55 kernel/x86/microcode
-rw-r--r--   <span class="token number">1</span> root     root         <span class="token number">6476</span> Sep  <span class="token number">7</span> 05:55 kernel/x86/microcode/AuthenticAMD.bin
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
Version: dracut-033-572.el7

Arguments: <span class="token parameter variable">-f</span>

dracut modules:
<span class="token function">bash</span>
nss-softokn
i18n
microcode_ctl-fw_dir_override
<span class="token function">shutdown</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
drwxr-xr-x  <span class="token number">12</span> root     root            <span class="token number">0</span> Sep  <span class="token number">7</span> 05:55 <span class="token builtin class-name">.</span>
crw-r--r--   <span class="token number">1</span> root     root       <span class="token number">5</span>,   <span class="token number">1</span> Sep  <span class="token number">7</span> 05:55 dev/console
crw-r--r--   <span class="token number">1</span> root     root       <span class="token number">1</span>,  <span class="token number">11</span> Sep  <span class="token number">7</span> 05:55 dev/kmsg
crw-r--r--   <span class="token number">1</span> root     root       <span class="token number">1</span>,   <span class="token number">3</span> Sep  <span class="token number">7</span> 05:55 dev/null
lrwxrwxrwx   <span class="token number">1</span> root     root            <span class="token number">7</span> Sep  <span class="token number">7</span> 05:55 bin -<span class="token operator">></span> usr/bin
drwxr-xr-x   <span class="token number">2</span> root     root            <span class="token number">0</span> Sep  <span class="token number">7</span> 05:55 dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，这个 img 文件可以分为两部分。前半部分包括一些预先声明的数据，其中包括一个可执行的 bin 文件；而后半部分才是内核会去读取的重要文件。</p>
<p>进一步解压整个 img 文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span>$ <span class="token function">cp</span> /boot/initramfs-3.10.0-1160.41.1.el7.x86_64.img init.img
<span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span>$ <span class="token function">file</span> init.img 
init.img: ASCII cpio archive <span class="token punctuation">(</span>SVR4 with no CRC<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span>$ /usr/lib/dracut/skipcpio init.img <span class="token operator">|</span> zcat <span class="token operator">|</span> cpio <span class="token parameter variable">-div</span>
init
<span class="token function">shutdown</span>
<span class="token number">88189</span> blocks
<span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span>$ ll
total <span class="token number">8</span>
lrwxrwxrwx.  <span class="token number">1</span> root root    <span class="token number">7</span> Sep <span class="token number">19</span> 09:10 bin -<span class="token operator">></span> usr/bin
drwxr-xr-x.  <span class="token number">2</span> root root   <span class="token number">45</span> Sep <span class="token number">19</span> 09:10 dev
drwxr-xr-x. <span class="token number">12</span> root root <span class="token number">4096</span> Sep <span class="token number">19</span> 09:10 etc
lrwxrwxrwx.  <span class="token number">1</span> root root   <span class="token number">23</span> Sep <span class="token number">19</span> 09:10 init -<span class="token operator">></span> usr/lib/systemd/systemd
lrwxrwxrwx.  <span class="token number">1</span> root root    <span class="token number">7</span> Sep <span class="token number">19</span> 09:10 lib -<span class="token operator">></span> usr/lib
lrwxrwxrwx.  <span class="token number">1</span> root root    <span class="token number">9</span> Sep <span class="token number">19</span> 09:10 lib64 -<span class="token operator">></span> usr/lib64
drwxr-xr-x.  <span class="token number">2</span> root root    <span class="token number">6</span> Sep <span class="token number">19</span> 09:10 proc
drwxr-xr-x.  <span class="token number">2</span> root root    <span class="token number">6</span> Sep <span class="token number">19</span> 09:10 root
drwxr-xr-x.  <span class="token number">2</span> root root    <span class="token number">6</span> Sep <span class="token number">19</span> 09:10 run
lrwxrwxrwx.  <span class="token number">1</span> root root    <span class="token number">8</span> Sep <span class="token number">19</span> 09:10 sbin -<span class="token operator">></span> usr/sbin
-rwxr-xr-x.  <span class="token number">1</span> root root <span class="token number">3117</span> Sep <span class="token number">19</span> 09:10 <span class="token function">shutdown</span>
drwxr-xr-x.  <span class="token number">2</span> root root    <span class="token number">6</span> Sep <span class="token number">19</span> 09:10 sys
drwxr-xr-x.  <span class="token number">2</span> root root    <span class="token number">6</span> Sep <span class="token number">19</span> 09:10 sysroot
drwxr-xr-x.  <span class="token number">2</span> root root    <span class="token number">6</span> Sep <span class="token number">19</span> 09:10 tmp
drwxr-xr-x.  <span class="token number">7</span> root root   <span class="token number">66</span> Sep <span class="token number">19</span> 09:10 usr
drwxr-xr-x.  <span class="token number">2</span> root root   <span class="token number">29</span> Sep <span class="token number">19</span> 09:10 var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解压后查询下这个文件系统中 systemd 调用的运行模式：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span>$ ll usr/lib/systemd/system/default.target
lrwxrwxrwx. <span class="token number">1</span> root root <span class="token number">13</span> Sep <span class="token number">19</span> 09:10 usr/lib/systemd/system/default.target -<span class="token operator">></span> initrd.target
<span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span>$ systemctl list-dependencies initrd.target
initrd.target
● ├─dracut-cmdline.service
● ├─dracut-initqueue.service
● ├─dracut-mount.service
● ├─dracut-pre-mount.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过查询 initrd.target 可以知道内核先是用载入虚拟文件系统中的 basic.target、sysinit.target 等功能启用的流程，让系统顺利运行，再卸载虚拟文件系统，挂载实际系统根目录。</p>
<p>如果想要创建一个自定义的 initramfs 镜像，可以使用 dracut 或 mkinitrd 来处理。例如，新建一个添加了 x200 网卡驱动和 nfs 文件系统驱动的 initramfs 镜像：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ dracut <span class="token parameter variable">-v</span> -add-drivers <span class="token string">"x200"</span> <span class="token parameter variable">--filesystems</span> <span class="token string">"nfs"</span> <span class="token operator">></span> initramfs-new.img <span class="token operator">&amp;</span> <span class="token punctuation">(</span>uname -r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="systemd-启动流程"><a class="markdownIt-Anchor" href="#systemd-启动流程"></a> Systemd 启动流程</h1>
<p>Systemd 是一种系统和服务管理器，是 Linux 系统中的一项关键技术。它可以用于启动、停止和管理系统进程、网络、文件系统和其他系统资源。Systemd 最初是为 Red Hat Linux 发行版设计的，但现在已被广泛采用，并被大多数 Linux 发行版所使用。</p>
<p>Systemd 的主要优势是速度和可靠性。它的启动速度远远快于传统的 init 系统，因为它能够并行启动多个服务。此外，Systemd 还提供了强大的日志功能和灵活的单元文件格式，可用于管理各种类型的服务和资源。</p>
<p>Systemd 还引入了一些新的概念，例如单元和片段。单元是 Systemd 中的基本单位，用于描述系统资源（例如服务、套接字、挂载点等）。片段是一种单元文件的组成部分，它可以被其他单元文件重用。这种灵活性使得 Systemd 能够更容易地管理和组织系统资源，使其更加模块化和可重用。</p>
<h2 id="启动流程"><a class="markdownIt-Anchor" href="#启动流程"></a> 启动流程</h2>
<p>在内核载入完毕硬件驱动后，采用 systemd 管理服务的启动流程如下：</p>
<ol>
<li>内核会主动调用第一个程序 <code>systemd</code> 执行 sysinit.target 初始化系统及 basic.target 准备系统；</li>
<li>接下来到<code>/usr/lib/systemd/system/</code>目录下去调用 multi-user.target(default.target)；</li>
<li>然后系统会到<code>/etc/systemd/system/multi-user.target.wants/</code>目录去找用户设置开机启动服务(unit)；</li>
<li>最后到<code>/usr/lib/systemd/system/multi-user.target.wants/</code>目录去找系统默认的开机启动服务(unit)；</li>
<li>（非必须）执行 graphical 需要的服务。</li>
</ol>
<p>至于最终启动的服务有哪些，可以用<code>systemctl list-dependencies</code>命令查询：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span>$ systemctl list-dependencies multi-user.target <span class="token operator">|</span> <span class="token function">grep</span> target
multi-user.target
● ├─basic.target
● │ ├─selinux-policy-migrate-local-changes@targeted.service
● │ ├─paths.target
● │ ├─slices.target
● │ ├─sockets.target
● │ ├─sysinit.target
● │ │ ├─cryptsetup.target
● │ │ ├─local-fs.target
● │ │ └─swap.target
● │ └─timers.target
● ├─getty.target
● └─remote-fs.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另外，为了兼容旧有的通过 <code>/etc/rc.d/rc.local</code> 配置自启动脚本的方式，CentOS 7 保留了一个 rc-local.service 来执行这些脚本。</p>
<h2 id="启动相关目录"><a class="markdownIt-Anchor" href="#启动相关目录"></a> 启动相关目录</h2>
<p>开机会读取的文件目录如下：</p>
<ul>
<li><code>/etc/modules-load.d/*.conf</code>：配置内核需要加载的模块。</li>
<li><code>/etc/modprobe.d/*.conf</code>：可以设置模块参数的配置。</li>
<li><code>/etc/sysconfig/</code>：系统配置目录下有许多环境配置文件，其中一些重要的是：
<ul>
<li>authconfig：用于规范用户身份认证机制，包括是否使用本地 <code>/etc/passwd</code>，<code>/etc/shadow</code> 等文件以及密码记录使用的加密算法，是否使用外部密码服务器提供的账号验证（NIS、LDAP）等。</li>
<li>cpupower：如果启动了 cpupower.service 服务，会读取此配置文件。</li>
<li>firewalld、iptables-config、iptables-config、ebtables-config：与防火墙服务相关的配置。</li>
<li>network-scripts：网卡设置。</li>
</ul>
</li>
</ul>
<h1 id="system-v-启动流程"><a class="markdownIt-Anchor" href="#system-v-启动流程"></a> System V 启动流程</h1>
<p>System V (System 5) 是 Unix 操作系统中的一个初始化系统。它是早期 Unix 系统的标准初始化系统，常见于许多 Linux 发行版中。System V 通过运行一个脚本，逐个启动和停止系统服务来初始化系统。这些脚本通常存储在 <code>/etc/rc.d/init.d/</code> 目录下，每个脚本对应着一个系统服务。在系统启动或关闭时，System V 会根据 <code>/etc/inittab</code> 文件的配置来执行这些脚本。</p>
<p>System V 的缺点在于启动过程比较慢，因为它需要逐个启动和停止每个系统服务，这使得启动时间较长。此外，System V 在处理系统服务时需要手动编写脚本，并且难以处理服务之间的依赖关系，这可能导致系统启动失败或服务无法正常运行。由于这些缺点，现代 Linux 发行版逐渐转向使用 Systemd 作为默认初始化系统。</p>
<h2 id="启动流程-2"><a class="markdownIt-Anchor" href="#启动流程-2"></a> 启动流程</h2>
<p>在内核加载完硬件驱动后，内核会主动调用第一个进程 <code>/sbin/init</code>。它最主要的功能是准备软件执行环境：</p>
<ol>
<li>init 取得默认执行等级，执行 <code>/etc/rc.d/rc.sysinit</code> 文件来准备软件执行的操作环境（网络、时区等）；</li>
<li>init 执行 run level 的各个服务的启动（脚本方式）。例如执行等级是 5，则只执行 <code>5:5:wait:/etc/rc.d/rc5</code> 这行：
<ul>
<li>和 rc5 相关的脚本存放在 <code>/etc/rc5.d/</code> 下面，以 Kxx 开头的文件代表执行 stop，以 Sxx 开头代表执行 start 操作。</li>
<li>这些脚本全部是连接文件，连接到 stand alone 服务启动的目录 <code>/etc/init.d/</code>内。</li>
<li>S 或 K 后面两位数字代表执行顺序，数字越小执行越早。</li>
</ul>
</li>
<li>设置好组合键功能和不断电系统 pf、pr 机制。</li>
<li>init 用户自定义脚本 <code>/etc/rc.d/rc.local</code> 配置文件内的程序；</li>
<li>init 执行终端模拟程序 mingetty 来启动 login 进程。</li>
<li>（非必须）以 <code>/etc/X11/perfdm -nodaemon</code> 启动图形界面。</li>
</ol>
<h2 id="启动相关目录-2"><a class="markdownIt-Anchor" href="#启动相关目录-2"></a> 启动相关目录</h2>
<p>开机用到的配置文件：</p>
<ul>
<li>
<p><code>/etc/modprobe.conf</code></p>
<p>定义开机要加载的模块，模块存放于 <code>/etc/sysconfig/modules/</code> 目录下。</p>
</li>
<li>
<p><code>/etc/sysconfig/*</code></p>
<p>服务相关配置，重要的有：</p>
<ul>
<li>authconfig：设置用户身份认证机制。</li>
<li>clock：设置 Linux 主机的时区。</li>
<li>i18n：设置语系。</li>
<li>keyboard &amp; mouse：设置键盘与鼠标样式。</li>
<li>network：设置网络启用、主机名和网关。</li>
<li>network-scripts：设置网卡。</li>
</ul>
</li>
</ul>
<h2 id="init-配置文件"><a class="markdownIt-Anchor" href="#init-配置文件"></a> init 配置文件</h2>
<p>init 通过配置文件 <code>/etc/inittab</code> 规划行动。配置文件每行内容由冒号<code>:</code>分隔四个字段：</p>
<ul>
<li>
<p><strong>设置选项</strong></p>
<p>最多四个字符，代表 init 的主要工作选项，只是一个说明。</p>
</li>
<li>
<p><strong>执行等级</strong></p>
<p>代表该选项在哪些执行等级下面运行，如果是 35 表示在执行等级 3 和 5 都会运行。</p>
</li>
<li>
<p><strong>init 的操作行为</strong></p>
<p>可设置的值有：</p>
<ul>
<li>initdefault：默认执行等级设置值。</li>
<li>sysinit：系统初始化的操作选项。</li>
<li>ctrlaltdel：代表组合快捷键[Ctrl]+[Alt]+[Del]是否可以重新启动的设置。</li>
<li>wait：代表后面设置的命令必须要执行完毕才能继续下面其他操作。</li>
<li>respawn：代表后面的命令可以无限重启，例如 tty1。</li>
</ul>
</li>
<li>
<p><strong>命令选项</strong></p>
<p>执行的命令，通常是一些脚本。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 内核编译</title>
    <url>/3262096821/</url>
    <content><![CDATA[<h1 id="内核编译介绍"><a class="markdownIt-Anchor" href="#内核编译介绍"></a> 内核编译介绍</h1>
<p>通常只有在以下情况下才需要重新编译内核：</p>
<ul>
<li>新功能需求：需要的新功能只有在新内核中才能使用，为了获得这些功能，必须重新编译内核；</li>
<li>内核过于臃肿：如果内核中包含很多不需要的功能，可以重新编译内核并去除这些功能；</li>
<li>更换硬件驱动：如果当前内核编译的驱动导致系统不稳定，可以替换为稳定版的驱动；</li>
<li>其他需求：对于特殊硬件系统，可能需要自行设计内核。</li>
</ul>
<p>内核及内核模块的路径如下：</p>
<ul>
<li>内核：/boot/vmlinuz</li>
<li>虚拟文件系统（RAM Disk）：/boot/initramfs</li>
<li>内核模块：/lib/modules/version/kernel</li>
<li>内核源代码：/usr/src/linux</li>
</ul>
<p>在 CentOS 上，可以在以下网站下载原始 SRPM：<a href="http://vault.centos.org/">http://vault.centos.org/</a></p>
<p>Linux 官方内核源码可以在以下网站下载：<a href="https://www.kernel.org/">https://www.kernel.org/</a></p>
<h1 id="保持源码干净"><a class="markdownIt-Anchor" href="#保持源码干净"></a> 保持源码干净</h1>
<p>下载内核并解压：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">wget</span> ftp://ftp.twaren.net/pub/Unix/Kernel/linux/kernel/v3.x/linux-3.10.89.tar.xz
<span class="token punctuation">[</span>root@234c8 ~<span class="token punctuation">]</span>$ <span class="token function">tar</span> <span class="token parameter variable">-Jxvf</span> linux-3.10.89.tar.xz <span class="token parameter variable">-C</span> /usr/src/kernels/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>为了确保内核源代码干净，没有保留目标文件(<code>*.o</code>)及相关配置，可以使用<code>make mrproper</code>来处理：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 linux-3.10.89<span class="token punctuation">]</span>$ <span class="token function">make</span> mrproper<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>一般只有第一次执行内核编译前采用这一命令，其他时候用<code>make clean</code>就可以。</p>
<h1 id="挑选内核功能"><a class="markdownIt-Anchor" href="#挑选内核功能"></a> 挑选内核功能</h1>
<p>在<code>/boot</code>目录下存在<code>config-*</code>的内核功能列表文件，可以通过多个方法创建：</p>
<ul>
<li><code>make menuconfig</code>：最常用的方法，在命令行模式下进行配置。</li>
<li><code>make oldconfig</code>：通过已存在的<code>./.config</code>文件内容设置默认值，只将新版内核内功能列出来供选择。</li>
<li><code>make xconfig</code>：通过 KDE 图形界面来设置。</li>
<li><code>make gconfig</code>：通过 GNOME 图形界面来设置。</li>
<li><code>make config</code>：过去的设置方式。</li>
</ul>
<p>下面以<code>make menuconfig</code>为例进行操作：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 linux-3.10.89<span class="token punctuation">]</span>$ <span class="token function">cp</span> /boot/config-3.10.0-1160.41.1.el7.x86_64 .config
<span class="token punctuation">[</span>root@234c8 linux-3.10.89<span class="token punctuation">]</span>$ <span class="token function">make</span> menuconfig
 .config - Linux/x86 <span class="token number">3.10</span>.89 Kernel Configuration
 ----------------------------------------------------------------------------------------
  +--------------------- Linux/x86 <span class="token number">3.10</span>.89 Kernel Configuration -----------------------+
  <span class="token operator">|</span>  Arrow keys navigate the menu.  <span class="token operator">&lt;</span>Enter<span class="token operator">></span> selects submenus -- letters are hotkeys.   <span class="token operator">|</span>
  <span class="token operator">|</span>  Pressing <span class="token operator">&lt;</span>Y<span class="token operator">></span> includes, <span class="token operator">&lt;</span>N<span class="token operator">></span> excludes, <span class="token operator">&lt;</span>M<span class="token operator">></span> modu.  Press <span class="token operator">&lt;</span>Esc<span class="token operator">></span><span class="token operator">&lt;</span>Esc<span class="token operator">></span> to exit, <span class="token operator">&lt;</span>?<span class="token operator">></span> <span class="token keyword">for</span> <span class="token operator">|</span>
  <span class="token operator">|</span>  Help, <span class="token operator">&lt;</span>/<span class="token operator">></span> <span class="token keyword">for</span> Search.  Legend: <span class="token punctuation">[</span>*<span class="token punctuation">]</span> built-in  <span class="token punctuation">[</span> <span class="token punctuation">]</span> excluded  <span class="token operator">&lt;</span>M<span class="token operator">></span> module  <span class="token operator">&lt;</span> <span class="token operator">></span> mod    <span class="token operator">|</span>
  <span class="token operator">|</span>                                                                                    <span class="token operator">|</span>
  <span class="token operator">|</span> +--------------------------------------------------------------------------------+ <span class="token operator">|</span>
  <span class="token operator">|</span> <span class="token operator">|</span>             <span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token number">64</span>-bit kernel                                                  <span class="token operator">|</span> <span class="token operator">|</span>
  <span class="token operator">|</span> <span class="token operator">|</span>                 General setup  ---<span class="token operator">></span>                                            <span class="token operator">|</span> <span class="token operator">|</span>
  <span class="token operator">|</span> <span class="token operator">|</span>             <span class="token punctuation">[</span>*<span class="token punctuation">]</span> Enable loadable module support  ---<span class="token operator">></span>                           <span class="token operator">|</span> <span class="token operator">|</span>
  <span class="token operator">|</span> <span class="token operator">|</span>             -*- Enable the block layer  ---<span class="token operator">></span>                                   <span class="token operator">|</span> <span class="token operator">|</span>
  <span class="token operator">|</span> <span class="token operator">|</span>                 Processor <span class="token builtin class-name">type</span> and features  ---<span class="token operator">></span>                              <span class="token operator">|</span> <span class="token operator">|</span>
  <span class="token operator">|</span> <span class="token operator">|</span>                 Power management and ACPI options  ---<span class="token operator">></span>                        <span class="token operator">|</span> <span class="token operator">|</span>
  <span class="token operator">|</span> <span class="token operator">|</span>                 Bus options <span class="token punctuation">(</span>PCI etc.<span class="token punctuation">)</span>  ---<span class="token operator">></span>                                   <span class="token operator">|</span> <span class="token operator">|</span>
  <span class="token operator">|</span> <span class="token operator">|</span>                 Executable <span class="token function">file</span> formats / Emulations  ---<span class="token operator">></span>                     <span class="token operator">|</span> <span class="token operator">|</span>
  <span class="token operator">|</span> <span class="token operator">|</span>             -*- Networking support  ---<span class="token operator">></span>                                       <span class="token operator">|</span> <span class="token operator">|</span>
  <span class="token operator">|</span> <span class="token operator">|</span>                 Device Drivers  ---<span class="token operator">></span>                                           <span class="token operator">|</span> <span class="token operator">|</span>
  <span class="token operator">|</span> <span class="token operator">|</span>                 Firmware Drivers  ---<span class="token operator">></span>                                         <span class="token operator">|</span> <span class="token operator">|</span>
  <span class="token operator">|</span> <span class="token operator">|</span>                 File systems  ---<span class="token operator">></span>                                             <span class="token operator">|</span> <span class="token operator">|</span>
  <span class="token operator">|</span> <span class="token operator">|</span>                 Kernel hacking  ---<span class="token operator">></span>                                           <span class="token operator">|</span> <span class="token operator">|</span>
  <span class="token operator">|</span> +-------------↓<span class="token punctuation">(</span>+<span class="token punctuation">)</span>---------------------------------------------------------------+ <span class="token operator">|</span>
  +------------------------------------------------------------------------------------+
  <span class="token operator">|</span>               <span class="token operator">&lt;</span>Select<span class="token operator">></span>    <span class="token operator">&lt;</span> Exit <span class="token operator">></span>    <span class="token operator">&lt;</span> Help <span class="token operator">></span>    <span class="token operator">&lt;</span> Save <span class="token operator">></span>    <span class="token operator">&lt;</span> Load <span class="token operator">></span>             <span class="token operator">|</span>
  +------------------------------------------------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>关于整个内核功能选择，一般来说，要选择必需的功能编译进内核，可能需要的功能编译成模块，不清楚的功能则保持默认。功能选择好后，选择<code>Save</code>退出。</p>
<h1 id="内核编译"><a class="markdownIt-Anchor" href="#内核编译"></a> 内核编译</h1>
<p>在编译内核之前，需要清除无用文件，然后分别编译内核和模块。使用 <code>-j</code> 参数指定编译时使用的线程数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 linux-3.10.89<span class="token punctuation">]</span>$ <span class="token function">make</span> clean
<span class="token punctuation">[</span>root@234c8 linux-3.10.89<span class="token punctuation">]</span>$ <span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token number">16</span> bzImage
  BUILD   arch/x86/boot/bzImage
Setup is <span class="token number">16704</span> bytes <span class="token punctuation">(</span>padded to <span class="token number">16896</span> bytes<span class="token punctuation">)</span>.
System is <span class="token number">4674</span> kB
CRC e48489cb
Kernel: arch/x86/boot/bzImage is ready  <span class="token punctuation">(</span><span class="token comment">#1)</span>
<span class="token punctuation">[</span>root@234c8 linux-3.10.89<span class="token punctuation">]</span>$ <span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token number">16</span> modules
  IHEX2FW firmware/whiteheat_loader.fw
  IHEX2FW firmware/keyspan_pda/keyspan_pda.fw
  IHEX2FW firmware/keyspan_pda/xircom_pgs.fw
<span class="token punctuation">[</span>root@234c8 linux-3.10.89<span class="token punctuation">]</span>$ <span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token number">16</span> clean bzImage modules
  LD      drivers/scsi/scsi_mod.o
  LD <span class="token punctuation">[</span>M<span class="token punctuation">]</span>  drivers/scsi/scsi_tgt.o
  LD      drivers/scsi/built-in.o
  LD      drivers/built-in.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译完成后，文件应该存放在当前目录下。</p>
<h1 id="安装模块"><a class="markdownIt-Anchor" href="#安装模块"></a> 安装模块</h1>
<p>如果模块有修改，可以在内核功能选择的 General setup 中的 Local version 中修改成新的名称。安装模块：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 linux-3.10.89<span class="token punctuation">]</span>$ <span class="token function">make</span> modules_install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="安装内核"><a class="markdownIt-Anchor" href="#安装内核"></a> 安装内核</h1>
<p>在无法确认新内核是否工作情况下，保留旧内核:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 linux-3.10.89<span class="token punctuation">]</span>$ <span class="token function">cp</span> arch/x86/boot/bzImage /boot/vmliunz-3.10.89m
<span class="token punctuation">[</span>root@234c8 linux-3.10.89<span class="token punctuation">]</span>$ <span class="token function">cp</span> .config /boot/config-3.10.89m
<span class="token punctuation">[</span>root@234c8 linux-3.10.89<span class="token punctuation">]</span>$ <span class="token function">chmod</span> a+x /boot/vmlinuz-3.10.89m
<span class="token punctuation">[</span>root@234c8 linux-3.10.89<span class="token punctuation">]</span>$ <span class="token function">cp</span> System.map /boot/System.map-3.10.89m
<span class="token punctuation">[</span>root@234c8 linux-3.10.89<span class="token punctuation">]</span>$ <span class="token function">gzip</span> <span class="token parameter variable">-c</span> Module.symvers <span class="token operator">></span> /boot/symvers-3.10.89m.gz
<span class="token punctuation">[</span>root@234c8 linux-3.10.89<span class="token punctuation">]</span>$ restorecon <span class="token parameter variable">-Rv</span> /boot
<span class="token punctuation">[</span>root@234c8 linux-3.10.89<span class="token punctuation">]</span>$ dracut <span class="token parameter variable">-v</span> /oot/initramfs-3.10.89m.img <span class="token number">3.10</span>.89m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接着使用<code>grub2-mkconfig</code>来处理<code>grub2</code>开机菜单:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@234c8 linux-3.10.89<span class="token punctuation">]</span>$ grub2-mkconfig <span class="token parameter variable">-o</span> /boot/grub2/grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>之后就可以重启测试新内核了。</p>
<h1 id="内核模块依赖"><a class="markdownIt-Anchor" href="#内核模块依赖"></a> 内核模块依赖</h1>
<p>在内核模块目录中通常分为以下几个子目录：</p>
<ul>
<li>arch：与硬件平台有关的项目，如 CPU 的等级。</li>
<li>crypto：内核所支持的加密技术，例如 MD5、DES 等。</li>
<li>drivers：一些硬件的驱动程序，如网卡、显卡驱动等。</li>
<li>fs：内核支持的文件系统，如 VFAT、NFS 等。</li>
<li>lib：一些函数库。</li>
<li>net：与网络有关的各项协定数据，包括防火墙。</li>
<li>sound：与声音有关的模块。</li>
</ul>
<p>内核模块之间的依赖性检查通过 <code>/lib/modules/version/modules.dep</code> 来记录，可以使用 <code>depmod</code> 命令来加入已编译好的模块。例如要加入名为 <code>tp-413.ko</code> 网卡驱动到内核模块：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cp</span> tp-413.ko /lib/modules/3.10.0-1160.41.1.el7.x86_64/kernel/drivers/net/
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ depmod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>执行 <code>depmod</code> 命令后，程序会跑到内核模块目录，将全部模块分析一遍，将结果写入到 <code>modules.dep</code> 文件中。</p>
<h1 id="内核模块查询"><a class="markdownIt-Anchor" href="#内核模块查询"></a> 内核模块查询</h1>
<p>要查询内核以及加载的模块列表，可以使用 <code>lsmod</code> 命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ lsmod
Module                  Size  Used by
nf_conntrack_ftp       <span class="token number">18478</span>  <span class="token number">0</span> 
nf_conntrack          <span class="token number">139264</span>  <span class="token number">1</span> nf_conntrack_ftp
snd_seq_midi           <span class="token number">13565</span>  <span class="token number">0</span> 
snd_seq_midi_event     <span class="token number">14597</span>  <span class="token number">1</span> snd_seq_midi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果会分别显示出模块名称，模块大小和模块被其他模块使用（Used by）的信息。</p>
<p>如果想要查询模块具体信息，可以使用 <code>modinfo</code> 命令。例如查询 <code>nf_conntrack_ftp</code> 模块：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ modinfo nf_conntrack_ftp
filename:       /lib/modules/3.10.0-1160.41.1.el7.x86_64/kernel/net/netfilter/nf_conntrack_ftp.ko.xz
alias:          nfct-helper-ftp
alias:          ip_conntrack_ftp
description:    <span class="token function">ftp</span> connection tracking helper
author:         Rusty Russell <span class="token operator">&lt;</span>rusty@rustcorp.com.au<span class="token operator">></span>
license:        GPL
retpoline:      Y
rhelversion:    <span class="token number">7.9</span>
srcversion:     F21861D5AD43080B93CC4DD
depends:        nf_conntrack
intree:         Y
vermagic:       <span class="token number">3.10</span>.0-1160.41.1.el7.x86_64 SMP mod_unload modversions 
signer:         CentOS Linux kernel signing key
sig_key:        4B:E3:B8:E9:52:F4:81:B2:62:51:AC:E4:66:9B:A7:99:71:D1:F1:AF
sig_hashalgo:   sha256
parm:           ports:array of ushort
parm:           loose:bool<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面查询可以得到模块的文件位置、依赖的模块，还有模块的参数（<code>parm</code>）。</p>
<h1 id="内核模块加载与删除"><a class="markdownIt-Anchor" href="#内核模块加载与删除"></a> 内核模块加载与删除</h1>
<p>除了上面使用到的<code>modprobe</code>命令，还可以使用<code>insmod</code>来安装模块。例如载入<code>fat</code>模块：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ insmod /lib/modules/3.10.0-1160.41.1.el7.x86_64/kernel/fs/fat/fat.ko.xz 
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ lsmod <span class="token operator">|</span> <span class="token function">grep</span> fat
fat                    <span class="token number">65950</span>  <span class="token number">0</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>使用<code>insmod</code>命令必须接模块完整路径来安装，并且不会去分析模块的依赖性。</p>
<p>想要移除模块使用<code>rmmod</code>命令，例如移除<code>fat</code>模块：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ rmmod fat
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ insmod /lib/modules/3.10.0-1160.41.1.el7.x86_64/kernel/fs/fat/vfat.ko.xz 
insmod: ERROR: could not insert module /lib/modules/3.10.0-1160.41.1.el7.x86_64/kernel/fs/fat/vfat.ko.xz: Unknown symbol <span class="token keyword">in</span> module<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>不过这样有个坏处就是需要手动处理依赖问题，比如上面<code>fat</code>模块被移除后，无法用<code>insmod</code>命令来载入<code>vfat</code>模块。</p>
<p>最稳妥的方式还是使用<code>modprobe</code>来处理。<code>-f</code>参数可以强制载入模块，<code>-r</code>参数用来移除模块：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ modprobe vfat
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ lsmod <span class="token operator">|</span> <span class="token function">grep</span> vfat
vfat                   <span class="token number">17461</span>  <span class="token number">0</span> 
fat                    <span class="token number">65950</span>  <span class="token number">1</span> vfat
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ modprobe <span class="token parameter variable">-r</span> vfat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果想让模块开机自动载入，例如要加入启动一个<code>nf_conntrack_frp</code>模块，可以在目录下新建一个 conf 文件：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span>$ <span class="token function">vi</span> /etc/modules-load.d/ftp.conf
nf_conntrack_ftp
<span class="token string">"/etc/modules-load.d/ftp.conf"</span> <span class="token punctuation">[</span>New<span class="token punctuation">]</span> 1L, 17C written<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>一个模块（驱动）写一行，上面模块是针对默认 FTP 端口设置。如果要调整到 558 端口，可以在<code>modprobe.d</code>目录下面新建配置：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span>$ <span class="token function">vi</span> /etc/modprobe.d/ftp.conf
options nf_conntrack_ftp <span class="token assign-left variable">ports</span><span class="token operator">=</span><span class="token number">558</span>
<span class="token string">"/etc/modprobe.d/ftp.conf"</span> <span class="token punctuation">[</span>New<span class="token punctuation">]</span> 1L, 35C written<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>系统重启后就能顺利载入模块了。也可以通过重启<code>systemd-modules-load</code>服务来即刻生效：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span>$ systemctl restart systemd-modules-load
<span class="token punctuation">[</span>root@101c7 initrams<span class="token punctuation">]</span>$ lsmod <span class="token operator">|</span> <span class="token function">grep</span> nf_conntrack_ftp
nf_conntrack_ftp       <span class="token number">18478</span>  <span class="token number">0</span> 
nf_conntrack          <span class="token number">139264</span>  <span class="token number">1</span> nf_conntrack_ftp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux</category>
        <category>2.系统管理</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 基本系统设置</title>
    <url>/3511703514/</url>
    <content><![CDATA[<h1 id="网络设置"><a class="markdownIt-Anchor" href="#网络设置"></a> 网络设置</h1>
<p>可以通过 <code>nmcli connection show</code> 命令来查询网卡信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ nmcli connection show
NAME   UUID                                  TYPE      DEVICE 
ens33  ebab2aaf-84f5-45b6-a431-7ec3c63891b0  ethernet  ens33
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ nmcli connection show ens33
connection.id:                          ens33
connection.uuid:                        ebab2aaf-84f5-45b6-a431-7ec3c63891b0
connection.stable-id:                   --
connection.type:                        <span class="token number">802</span>-3-ethernet
connection.interface-name:              ens33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如上，网卡信息列得非常详细，也可以通过 <code>nmcli connection modify</code> 来修改网卡参数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ nmcli connection modify ens33 <span class="token punctuation">\</span>
<span class="token operator">></span> connection.autoconnect <span class="token function">yes</span> <span class="token punctuation">\</span>
<span class="token operator">></span> ipv4.method manual <span class="token punctuation">\</span>
<span class="token operator">></span> ipv4.addresses <span class="token number">192.168</span>.2.234/16 <span class="token punctuation">\</span>
<span class="token operator">></span> ipv4.gateway <span class="token number">192.168</span>.2.1 <span class="token punctuation">\</span>
<span class="token operator">></span> ipv4.dns <span class="token number">222.246</span>.129.80
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ nmcli connection up ens33
Connection successfully activated <span class="token punctuation">(</span>D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果设置成 DHCP 获取 IP，只用把 <code>ipv4.method</code> 设置为 <code>auto</code> 即可，或者使用 <code>dhclient</code> 命令来发送 DHCP 请求获取 IP 地址参数。</p>
<p>和网络参数有关的配置文件有下面一些：</p>
<ul>
<li>
<p><code>/etc/sysconfig/network-scripts/ifcfg-*</code></p>
<p>配置网卡 IP 地址、子网掩码、网关等参数。</p>
</li>
<li>
<p><code>/etc/sysconfig/network</code></p>
<p>配置网络主机名。</p>
</li>
<li>
<p><code>/etc/resolv.conf</code></p>
<p>配置 DNS 服务器地址。</p>
</li>
<li>
<p><code>/etc/hosts</code></p>
<p>自定义域名解析列表。</p>
</li>
<li>
<p><code>/etc/services</code></p>
<p>记录协议和对应端口号。</p>
</li>
<li>
<p><code>/etc/protocols</code></p>
<p>定义 IP 数据包协议的相关数据，包括 ICMP/TCP/UDP 的数据包协议。</p>
</li>
</ul>
<h1 id="修改主机名"><a class="markdownIt-Anchor" href="#修改主机名"></a> 修改主机名</h1>
<p>修改主机名使用 <code>hostnamectl</code> 命令。例如修改主机名为 234c8：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ hostnamectl set-hostname 234c8
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ hostnamectl
   Static hostname: 234c8
         Icon name: computer-vm
           Chassis: vm
        Machine ID: 77a36143eb014dd5a0d6e738b1d84778
           Boot ID: d9ef90ff0bbe4cc184d4b0599cbcb747
    Virtualization: vmware
  Operating System: CentOS Linux <span class="token number">7</span> <span class="token punctuation">(</span>Core<span class="token punctuation">)</span>
       CPE OS Name: cpe:/o:centos:centos:7
            Kernel: Linux <span class="token number">3.10</span>.0-1160.41.1.el7.x86_64
      Architecture: x86-64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="修改系统时区"><a class="markdownIt-Anchor" href="#修改系统时区"></a> 修改系统时区</h1>
<p>修改系统时区使用 <code>timedatectl</code> 命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ timedatectl
      Local time: Tue <span class="token number">2021</span>-09-21 04:42:53 EDT
  Universal time: Tue <span class="token number">2021</span>-09-21 08:42:53 UTC
        RTC time: Tue <span class="token number">2021</span>-09-21 08:42:52
       Time zone: America/New_York <span class="token punctuation">(</span>EDT, -0400<span class="token punctuation">)</span>
     NTP enabled: <span class="token function">yes</span>
NTP synchronized: <span class="token function">yes</span>
 RTC <span class="token keyword">in</span> <span class="token builtin class-name">local</span> TZ: no
      DST active: <span class="token function">yes</span>
 Last DST change: DST began at
                  Sun <span class="token number">2021</span>-03-14 01:59:59 EST
                  Sun <span class="token number">2021</span>-03-14 03:00:00 EDT
 Next DST change: DST ends <span class="token punctuation">(</span>the clock jumps one hour backwards<span class="token punctuation">)</span> at
                  Sun <span class="token number">2021</span>-11-07 01:59:59 EDT
                  Sun <span class="token number">2021</span>-11-07 01:00:00 EST<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>目前使用的是纽约时间，改成东八区上海：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ timedatectl list-timezones <span class="token operator">|</span> <span class="token function">grep</span> Shang
Asia/Shanghai
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ timedatectl set-timezone <span class="token string">"Asia/Shanghai"</span>
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">date</span>
Tue Sep <span class="token number">21</span> <span class="token number">16</span>:46:20 CST <span class="token number">2021</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以使用 <code>timedatectl</code> 命令手动调整时间或使用网络校时：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ timedatectl set-time <span class="token string">"2021-09-21 16:50"</span>
Failed to <span class="token builtin class-name">set</span> time: Automatic <span class="token function">time</span> synchronization is enabled
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ ntpdate cn.pool.ntp.org
<span class="token number">21</span> Sep <span class="token number">16</span>:49:08 ntpdate<span class="token punctuation">[</span><span class="token number">13077</span><span class="token punctuation">]</span>: adjust <span class="token function">time</span> server <span class="token number">84.16</span>.67.12 offset <span class="token parameter variable">-0.002613</span> sec
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ hwclock <span class="token parameter variable">-w</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="系统编码设置"><a class="markdownIt-Anchor" href="#系统编码设置"></a> 系统编码设置</h1>
<p>有时候，系统语言和软件使用的语言不一致。使用 <code>localectl</code> 命令可以查询系统语言设置：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ localectl
   System Locale: <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8
       VC Keymap: us
      X11 Layout: us<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>locale</code> 命令可以查询系统的语言设置：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ locale
<span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8
<span class="token assign-left variable">LC_CTYPE</span><span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span>
<span class="token assign-left variable"><span class="token environment constant">LC_NUMERIC</span></span><span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span>
<span class="token assign-left variable"><span class="token environment constant">LC_TIME</span></span><span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以使用 <code>localectl set-locale</code> 命令来修改系统语言设置：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ localectl set-locale <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.utf8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux</category>
        <category>1.基本操作</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 日志分析与管理</title>
    <url>/808925609/</url>
    <content><![CDATA[<h1 id="日志系统"><a class="markdownIt-Anchor" href="#日志系统"></a> 日志系统</h1>
<p>日志记录简单来说就是记录系统何时由哪个程序做了什么行为，发生了什么事件等等。</p>
<p>常见日志文件有下面一些：</p>
<ul>
<li><code>/var/log/boot.log</code>：开机硬件检测产生的记录信息，在 CentOS 合并到了 <code>dmesg</code> 中。</li>
<li><code>/var/log/cron</code>：记录 <code>crontab</code> 调度工作运行情况。</li>
<li><code>/var/log/dmesg</code>：记录开机检测信息。</li>
<li><code>/var/log/lastlog</code>：记录系统上所有账号最近一次登录的信息。</li>
<li><code>/var/log/maillog</code>：记录邮件的往来信息。</li>
<li><code>/var/log/messages</code>：记录所有错误与重要信息。</li>
<li><code>/var/log/secure</code>：记录账号登录验证信息。</li>
<li><code>/var/log/wtmp</code>，<code>/var/log/faillog</code>：记录正确登录与错误登录时的账号信息。</li>
<li><code>/var/log/服务名</code>：不同服务会使用各自的目录记录日志。</li>
</ul>
<p>系统提供日志记录相关的服务有：</p>
<ul>
<li><code>systemd-journald.service</code>：由 <code>systemd</code> 提供的日志系统；</li>
<li><code>rsyslog.service</code>：主要登录系统与网络等服务的信息；</li>
<li><code>logrotate</code>：对日志文件进行轮替处理。</li>
</ul>
<p>日志文件记录内容由四段组成：</p>
<ul>
<li>事件发生的时间与日期；</li>
<li>发生此事件的主机名称；</li>
<li>启动此事件的服务名称或命令与函数名；</li>
<li>信息的实际内容。</li>
</ul>
<h1 id="日志规范"><a class="markdownIt-Anchor" href="#日志规范"></a> 日志规范</h1>
<p>rsyslog 的配置文件位于 <code>/etc/rsyslog.conf</code>，可以配置服务、日志等级和日志存放位置：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/rsyslog.conf 
<span class="token variable">$ModLoad</span> imuxsock <span class="token comment"># provides support for local system logging (e.g. via logger command)</span>
<span class="token variable">$ModLoad</span> imjournal <span class="token comment"># provides access to the systemd journal</span>
<span class="token variable">$WorkDirectory</span> /var/lib/rsyslog
<span class="token variable">$IncludeConfig</span> /etc/rsyslog.d/*.conf
mail.*                                                  -/var/log/maillog
uucp,news.crit                                          /var/log/spooler<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Linux 的 syslog 有规范服务类型如下：</p>
<table>
<thead>
<tr>
<th>编号</th>
<th>类别</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>kernel</td>
<td>内核产生日志，比如硬件检测和内核功能启用</td>
</tr>
<tr>
<td>1</td>
<td>user</td>
<td>使用者层级产生的日志</td>
</tr>
<tr>
<td>2</td>
<td>mail</td>
<td>与邮件收发者有关的日志</td>
</tr>
<tr>
<td>3</td>
<td>daemon</td>
<td>系统服务产生的日志</td>
</tr>
<tr>
<td>4</td>
<td>auth</td>
<td>与认证/授权有关的日志</td>
</tr>
<tr>
<td>5</td>
<td>syslog</td>
<td>rsyslogd 程序产生的日志</td>
</tr>
<tr>
<td>6</td>
<td>lpr</td>
<td>与打印相关的日志</td>
</tr>
<tr>
<td>7</td>
<td>news</td>
<td>与新闻组服务有关日志</td>
</tr>
<tr>
<td>8</td>
<td>uucp</td>
<td>Unix to Unix Copy Protocol，早期 Unix 系统间程序数据交换日志</td>
</tr>
<tr>
<td>9</td>
<td>cron</td>
<td>与工作调度有关日志</td>
</tr>
<tr>
<td>10</td>
<td>authpriv</td>
<td>与 auth 类似，但记录较多私人信息，包括 pam 模块的运行等</td>
</tr>
<tr>
<td>11</td>
<td>ftp</td>
<td>与 FTP 通讯协议有关的日志</td>
</tr>
<tr>
<td>16~23</td>
<td>local0~7</td>
<td>保留给本机用户使用的一些日志文件信息，较常与终端机互动</td>
</tr>
</tbody>
</table>
<p>日志等级有八级，根据 syslog.h 的定义如下：</p>
<table>
<thead>
<tr>
<th>等级数值</th>
<th>等级名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>7</td>
<td>debug</td>
<td>Debug 时产生的日志</td>
</tr>
<tr>
<td>6</td>
<td>info</td>
<td>一些基本运行记录</td>
</tr>
<tr>
<td>5</td>
<td>notice</td>
<td>正常提示信息</td>
</tr>
<tr>
<td>4</td>
<td>warning (warn)</td>
<td>警示信息，可能有问题，但还不至于影响服务运行</td>
</tr>
<tr>
<td>3</td>
<td>err (error)</td>
<td>重大错误信息，例如配置文件错误导致的服务不能启动</td>
</tr>
<tr>
<td>2</td>
<td>crit</td>
<td>致命错误信息</td>
</tr>
<tr>
<td>1</td>
<td>alert</td>
<td>告警信息</td>
</tr>
<tr>
<td>0</td>
<td>emerg (panic)</td>
<td>紧急级别，意味着出现了硬件问题导致系统无法运行</td>
</tr>
</tbody>
</table>
<p>在服务名和日志等级之间使用符号进行设置：</p>
<ul>
<li>. ：代表比后面等级更严重的日志都会被记录下来；</li>
<li>.= ：代表只记录后面等级的日志；</li>
<li>.! ：代表除该等级以外的其他等级日志都被记录。</li>
</ul>
<p>如果是 <code>*.emerg</code> 的写法，则代表所有程序的 <code>emerg</code> 等级的日志。</p>
<p>在日志文件记录位置前的减号 <code>-</code> 代表日志会先放到内存中缓存，直到达到一定大小才会写入到硬盘。</p>
<p>例如，要在 <code>/var/log/messages</code> 中排除掉 <code>news</code> 和 <code>mail</code> 的日志，可以设置为：</p>
<p><code>*,*;news,mail.none   /var/log/messages</code></p>
<p>或者：</p>
<p><code>*.*;news.none;mail.none  /var/log/messages</code></p>
<p>设置好记录规则后，需要重启 rsyslog 服务才能生效。</p>
<p>注意，如果在记录中的日志文件被其他程序打开并修改，rsyslog 将不会再向这个日志文件中写入新内容，此时也需要重启 rsyslog 服务才能恢复。</p>
<p>如果实在要向日志文件中插入数据，可以使用 <code>logger</code> 命令，用法为：<code>logger [-p 服务名称.日志等级] &quot;内容&quot;</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ logger <span class="token parameter variable">-p</span> user.info <span class="token string">"msg from logger"</span>
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ journalctl <span class="token parameter variable">-f</span>
Sep <span class="token number">19</span> 06:34:57 101c7 root<span class="token punctuation">[</span><span class="token number">10003</span><span class="token punctuation">]</span>: msg from logger<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这通常写在脚本中用来记录时间戳。</p>
<h1 id="日志收集"><a class="markdownIt-Anchor" href="#日志收集"></a> 日志收集</h1>
<p>rsyslogd 具有日志收集功能，也就是用一台主机做服务端，收集客户端发送的日志。</p>
<p>日志收集功能需要手动启用，可以在 <code>/etc/rsyslog.conf</code> 中修改相关配置。例如，在服务端：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">vi</span> /etc/rsyslog.conf
<span class="token comment"># Provides UDP syslog reception</span>
<span class="token comment">#$ModLoad imudp</span>
<span class="token comment">#$UDPServerRun 514</span>

<span class="token comment"># Provides TCP syslog reception</span>
<span class="token variable">$ModLoad</span> imtcp
<span class="token variable">$InputTCPServerRun</span> <span class="token number">514</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如上所示，开启了通过 TCP 传输日志，监听端口 514。重启服务以使设置生效。</p>
<p>对于客户端，只需在 <code>/etc/rsyslog.conf</code> 文件中设置一条记录，将日志文件发送到服务端。例如，如果服务端 IP 地址为 192.168.2.234，则可以这样设置：<code>*.* @@192.168.2.234</code>。</p>
<p>重启后生效，服务端接收的日志内容中的第二段会标明日志发送的来源主机。</p>
<h1 id="日志轮替"><a class="markdownIt-Anchor" href="#日志轮替"></a> 日志轮替</h1>
<p>执行日志轮替操作的程序 <code>logrotate</code> 会定期将旧有日志文件重命名，再建立一个空的新文件来写入新日志。</p>
<p>由于是定期执行，所以可以到 <code>/etc/cron.daily</code> 中查看定时任务内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/cron.daily/logrotate 
<span class="token comment">#!/bin/sh</span>

/usr/sbin/logrotate <span class="token parameter variable">-s</span> /var/lib/logrotate/logrotate.status /etc/logrotate.conf
<span class="token assign-left variable">EXITVALUE</span><span class="token operator">=</span><span class="token variable">$?</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$EXITVALUE</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    /usr/bin/logger <span class="token parameter variable">-t</span> <span class="token function">logrotate</span> <span class="token string">"ALERT exited abnormally with [<span class="token variable">$EXITVALUE</span>]"</span>
<span class="token keyword">fi</span>
<span class="token builtin class-name">exit</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在执行脚本中调用了配置文件 <code>/etc/logrotate.conf</code>，它用来在没有指定参数的情况下作为默认值使用：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/logrotate.conf 
<span class="token comment"># see "man logrotate" for details</span>
<span class="token comment"># rotate log files weekly</span>
weekly

<span class="token comment"># keep 4 weeks worth of backlogs</span>
rotate <span class="token number">4</span>

<span class="token comment"># create new (empty) log files after rotating old ones</span>
create

<span class="token comment"># use date as a suffix of the rotated file</span>
dateext

<span class="token comment"># uncomment this if you want your log files compressed</span>
<span class="token comment">#compress</span>

<span class="token comment"># RPM packages drop log rotation information into this directory</span>
include /etc/logrotate.d

<span class="token comment"># no packages own wtmp and btmp -- we'll rotate them here</span>
/var/log/wtmp <span class="token punctuation">&#123;</span>
    monthly
    create 0664 root utmp
        minsize 1M
    rotate <span class="token number">1</span>
<span class="token punctuation">&#125;</span>

/var/log/btmp <span class="token punctuation">&#123;</span>
    missingok
    monthly
    create 0600 root utmp
    rotate <span class="token number">1</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由配置文件注释可以得知目前的设置为：每周进行一次轮替工作，保留最多四个记录，轮替后创建新的空文件作日志记录，被轮替文件名上加日期，不压缩日志，读取 <code>/etc/logrotate.d</code> 目录内的配置文件。</p>
<p>下面以 <code>&#123;&#125;</code> 括起来的段落是针对不同文件的单独配置，例如针对 <code>wtmp</code>，轮替周期为月而不是周，指定新建文件的权限与所属，文件大小超过 1M 才进行轮替（比时间条件优先），最后是只保留一个记录。</p>
<p>再看看保存在 <code>/etc/logrotate.d</code> 中针对个别程序的独立设置：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/logrotate.d/syslog 
/var/log/cron
/var/log/maillog
/var/log/messages
/var/log/secure
/var/log/spooler
<span class="token punctuation">&#123;</span>
    missingok
    sharedscripts
    postrotate
        /bin/kill <span class="token parameter variable">-HUP</span> <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /var/run/syslogd.pid <span class="token operator"><span class="token file-descriptor important">2</span>></span> /dev/null<span class="token variable">`</span></span> <span class="token operator"><span class="token file-descriptor important">2</span>></span> /dev/null <span class="token operator">||</span> <span class="token boolean">true</span>
    endscript
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>logrotate 配置文件基本写法如下：</p>
<ul>
<li>文件名：以绝对路径写在最前面，可以每行一个表示处理多个日志文件。</li>
<li>参数：用 <code>&#123;&#125;</code> 括起来。</li>
<li>执行脚本：可调用外部命令，需要写入 <code>sharedscripts...endscript</code> 里面。可以用 <code>prerotate/postrotate</code> 表示执行命令的时机在启动 logrotate 之前/之后。这个特性可以用于处理加上特殊属性的文件。例如处理 messages 文件上的追加属性。</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">vi</span> /etc/logrotate.d/syslog 
/var/log/cron
/var/log/maillog
/var/log/messages
/var/log/secure
/var/log/spooler
<span class="token punctuation">&#123;</span>
    missingok
    sharedscripts
    prerotate
        /usr/bin/chattr <span class="token parameter variable">-a</span> /var/log/messages
    endscript
    sharedscripts
    postrotate
        /bin/kill <span class="token parameter variable">-HUP</span> <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /var/run/syslogd.pid <span class="token operator"><span class="token file-descriptor important">2</span>></span> /dev/null<span class="token variable">`</span></span> <span class="token operator"><span class="token file-descriptor important">2</span>></span> /dev/null <span class="token operator">||</span> <span class="token boolean">true</span>
        /usr/bin/chattr +a /var/log/messages
    endscript
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>配置修改完毕后可以使用 <code>systemctl reload</code> 来让配置生效，或者手动强制执行一次：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">logrotate</span> <span class="token parameter variable">-vf</span> /etc/logrotate.conf
reading config <span class="token function">file</span> /etc/logrotate.conf
including /etc/logrotate.d
reading config <span class="token function">file</span> bootlog
reading config <span class="token function">file</span> chrony<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="日志查询"><a class="markdownIt-Anchor" href="#日志查询"></a> 日志查询</h1>
<p>systemd 使用 <code>systemd-journald.service</code> 服务来记录日志，会记录所有经由 systemd 所管理服务产生的日志。</p>
<p>由于 <code>systemd-journald</code> 把日志存在内存中，因此重启后上次登录时产生的日志文件都不存在了。可以搭配 <code>rsyslogd</code> 来记录需要的日志。</p>
<p><code>journalctl</code> 命令使用语法为：<code>journalctl [-nrpf] [--since TIME] [--until TIME] 选项</code></p>
<p>主要参数和选项为：</p>
<table>
<thead>
<tr>
<th>参数或选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-n</code></td>
<td>打印最近的 <code>n</code> 条日志</td>
</tr>
<tr>
<td><code>-r</code></td>
<td>反向输出，最新的记录在前</td>
</tr>
<tr>
<td><code>-p</code></td>
<td>只查询指定等级日志</td>
</tr>
<tr>
<td><code>-f</code></td>
<td>类似 <code>tail -f</code> 来持续输出</td>
</tr>
<tr>
<td><code>--since</code> <code>--until</code></td>
<td>设置开始与结束时间来筛选日志</td>
</tr>
<tr>
<td><code>_SYSTEMD_UNIT=unit.service</code></td>
<td>只输出 <code>unit.service</code> 的日志</td>
</tr>
<tr>
<td><code>_COMM=bash</code></td>
<td>只输出与 <code>bash</code> 有关的日志</td>
</tr>
<tr>
<td><code>_PID=pid</code></td>
<td>只输出指定 <code>pid</code> 进程的日志</td>
</tr>
<tr>
<td><code>_UID=uid</code></td>
<td>只输出指定 <code>uid</code> 用户的日志</td>
</tr>
<tr>
<td><code>SYSLOG_FACILITY=[0-23]</code></td>
<td>使用 <code>syslog.h</code> 规范的服务类型编号来调用数据</td>
</tr>
</tbody>
</table>
<p>如只查看 9.1 到 9.3 号之间的日志：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ journalctl <span class="token parameter variable">--since</span> <span class="token string">"2020-09-01 00:00:00"</span> <span class="token parameter variable">--until</span> <span class="token string">"2020-09-04 00:00:00"</span>
-- Logs begin at Sat <span class="token number">2021</span>-09-18 <span class="token number">23</span>:12:47 EDT, end at Sun <span class="token number">2021</span>-09-19 06:01:01 EDT. --<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>查询搜索错误 <code>err</code> 等级日志：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ journalctl <span class="token parameter variable">-p</span> err
-- Logs begin at Sat <span class="token number">2021</span>-09-18 <span class="token number">23</span>:12:47 EDT, end at Sun <span class="token number">2021</span>-09-19 06:01:01 EDT. --
Sep <span class="token number">18</span> <span class="token number">23</span>:12:47 101c7 kernel: Detected CPU family 17h model <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>只查询和 <code>sshd</code> 服务有关的最近 3 条普通日志：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ journalctl <span class="token assign-left variable">_SYSTEMD_UNIT</span><span class="token operator">=</span>sshd.service <span class="token parameter variable">-n</span> <span class="token number">3</span> <span class="token parameter variable">-p</span> info
-- Logs begin at Sat <span class="token number">2021</span>-09-18 <span class="token number">23</span>:12:47 EDT, end at Sun <span class="token number">2021</span>-09-19 06:01:01 EDT. --
Sep <span class="token number">18</span> <span class="token number">23</span>:12:54 101c7 sshd<span class="token punctuation">[</span><span class="token number">2610</span><span class="token punctuation">]</span>: Accepted password <span class="token keyword">for</span> root from <span class="token number">192.168</span>.2.101 port <span class="token number">62528</span> ssh2
Sep <span class="token number">18</span> <span class="token number">23</span>:12:55 101c7 sshd<span class="token punctuation">[</span><span class="token number">2923</span><span class="token punctuation">]</span>: Accepted password <span class="token keyword">for</span> root from <span class="token number">192.168</span>.2.101 port <span class="token number">59039</span> ssh2
Sep <span class="token number">18</span> <span class="token number">23</span>:12:55 101c7 sshd<span class="token punctuation">[</span><span class="token number">2956</span><span class="token punctuation">]</span>: Accepted password <span class="token keyword">for</span> root from <span class="token number">192.168</span>.2.101 port <span class="token number">59040</span> ssh2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果想要保存 <code>journalctl</code> 的日志文件，不需要修改 <code>/etc/systemd/journald.conf</code> 文件，只需要在 <code>/var/log/</code> 下面新建一个 <code>journal</code> 的目录并处理一下权限就可以了：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> /var/log/journal
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">chown</span> root:systemd-journal /var/log/journal
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">chmod</span> <span class="token number">2775</span> /var/log/journal
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl restart systemd-journald
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ ll /var/log/journal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样设置以后在 <code>/run/log</code> 下面就不会有相关 <code>journal</code> 日志存在了。</p>
<h1 id="日志分析"><a class="markdownIt-Anchor" href="#日志分析"></a> 日志分析</h1>
<p><code>logwatch</code>是 CentOS 7 默认提供的日志文件分析工具，功能为每天定时发送一份邮件给 root 报告昨天系统状态。</p>
<p>安装完毕后可以直接运行一下计划任务：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ /etc/cron.daily/0logwatch 
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ mail
Heirloom Mail version <span class="token number">12.5</span> <span class="token number">7</span>/5/10.  Type ? <span class="token keyword">for</span> help.
<span class="token string">"/var/spool/mail/root"</span><span class="token builtin class-name">:</span> <span class="token number">24</span> messages <span class="token number">15</span> unread
 U <span class="token number">24</span> logwatch@101c7.local  Sun Sep <span class="token number">19</span> 06:46 <span class="token number">183</span>/10954 <span class="token string">"Logwatch for 101c7 (Linux)"</span>
 <span class="token operator">&amp;</span> <span class="token number">24</span>
Message <span class="token number">24</span>:
From root@101c7.localdomain  Sun Sep <span class="token number">19</span> 06:46:51 <span class="token number">2021</span>
Return-Path: <span class="token operator">&lt;</span>root@101c7.localdomain<span class="token operator">></span>
X-Original-To: root
Delivered-To: root@101c7.localdomain
To: root@101c7.localdomain
From: logwatch@101c7.localdomain
Subject: Logwatch <span class="token keyword">for</span> 101c7 <span class="token punctuation">(</span>Linux<span class="token punctuation">)</span>
Auto-Submitted: auto-generated
Precedence: bulk
Content-Type: text/plain<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"iso-8859-1"</span>
Date: Sun, <span class="token number">19</span> Sep <span class="token number">2021</span> 06:46:50 <span class="token parameter variable">-0400</span> <span class="token punctuation">(</span>EDT<span class="token punctuation">)</span>
Status: RO

 
 <span class="token comment">################### Logwatch 7.4.0 (03/01/11) #################### </span>
        Processing Initiated: Sun Sep <span class="token number">19</span> 06:46:50 <span class="token number">2021</span>
        Date Range Processed: yesterday
                              <span class="token punctuation">(</span> <span class="token number">2021</span>-Sep-18 <span class="token punctuation">)</span>
                              Period is day.
        Detail Level of Output: <span class="token number">0</span>
        Type of Output/Format: mail / text
        Logfiles <span class="token keyword">for</span> Host: 101c7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到非常详细的系统报告。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>2.系统管理</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 服务管理</title>
    <url>/1224880312/</url>
    <content><![CDATA[<h1 id="服务定义"><a class="markdownIt-Anchor" href="#服务定义"></a> 服务定义</h1>
<p>可以将守护进程（Daemon）和服务（Service）视为同一个东西的不同称呼。</p>
<p>服务是常驻内存中的进程，通常负责提供系统功能以服务用户的各项任务。</p>
<p>一般来说，守护进程类型的程序会在文件名末尾加上“d”。</p>
<h1 id="init-脚本管理"><a class="markdownIt-Anchor" href="#init-脚本管理"></a> Init 脚本管理</h1>
<p>SysV（System V）的 init 脚本程序处理方式为：将第一个启动的程序称为 init，然后由 init 去启动其他系统所需服务。</p>
<h2 id="init-的管理机制特性"><a class="markdownIt-Anchor" href="#init-的管理机制特性"></a> init 的管理机制特性</h2>
<ul>
<li>
<p><strong>服务管理方式</strong></p>
<p>所有服务启动的 bash 脚本均放在 <code>/etc/init.d/</code> 下面，用统一方式进行处理：</p>
<ul>
<li><strong>启动</strong>：<code>/etc/init.d/daemon start</code></li>
<li><strong>关闭</strong>：<code>/etc/init.d/daemon stop</code></li>
<li><strong>重新启动</strong>：<code>/etc/init.d/daemon restart</code></li>
<li><strong>状态查询</strong>：<code>/etc/init.d/daemon status</code></li>
</ul>
</li>
<li>
<p><strong>服务启动分类</strong></p>
<p>依据服务是独立启动还是被总管程序管理，可分为两大类：</p>
<ul>
<li><strong>独立启动模式</strong>（Stand Alone）：服务独立启动，常驻于内存中，反应速度快。</li>
<li><strong>总管程序管理</strong>（Super Daemon）：由常驻于内存的 xinetd 或 inetd 程序来管理。当用户请求某些功能时，xinetd 才会去唤醒对应服务。当请求完毕服务也跟随停止。好处是统一管理，但启动服务有延时。</li>
</ul>
</li>
<li>
<p><strong>工作形态分类</strong></p>
<p>以 daemon 提供服务的工作状态来分又可以分为两大类：</p>
<ul>
<li><strong>signal-control</strong>：通过信号来管理，只要有请求进来就会立即处理</li>
<li><strong>interval-control</strong>：每隔一段时间主动去执行某项任务</li>
</ul>
</li>
<li>
<p><strong>服务依赖问题</strong></p>
<p>如果服务之间启动互相依赖，则 init 无法解决依赖问题。</p>
</li>
<li>
<p><strong>执行等级分类</strong></p>
<p>init 可以根据设定的运行等级（run level）来启动不同的服务。总共有 7 个执行等级，各执行等级启动脚本通过 <code>/etc/rc.d/rc[0-6]/SXXdaemon</code> 链接到 <code>/etc/init.d/daemon</code>。</p>
<p>链接文件名（SXXdaemon）的作用是指定启动顺序。通过 SXX 的设置，开机时可以按顺序启动服务，同时也解决了服务依赖问题。</p>
</li>
<li>
<p><strong>设定执行等级</strong></p>
<p>可以使用以下命令进行设置：</p>
<ul>
<li><strong>开机启动</strong>：<code>chkconfig daemon on</code></li>
<li><strong>取消开机启动</strong>：<code>chkconfig daemon off</code></li>
<li><strong>查询是否开机启动</strong>：<code>chkconfig --list daemon</code></li>
</ul>
</li>
<li>
<p><strong>执行等级切换</strong></p>
<p>例如，要从命令行（run level 3）切换到图形界面（run level 5），只需使用 <code>init 5</code> 命令即可切换。init 会自动分析 <code>/etc/rc.d/rc[3|5].d/</code> 这两个目录内的脚本，并启动相应的服务。</p>
</li>
</ul>
<h2 id="启动脚本目录配置"><a class="markdownIt-Anchor" href="#启动脚本目录配置"></a> 启动脚本目录配置</h2>
<p>启动脚本基本上固定放在以下位置：</p>
<ul>
<li><code>/etc/init.d/*</code>：所有脚本存放处，因此有大量连接文件。</li>
<li><code>/etc/sysconfig/*</code>：服务初始化环境配置文件，记录一些初始化的参数设置。</li>
<li><code>/etc/xinetd.conf</code>，<code>/etc/xinetd.d/*</code>：super daemon 配置文件及其管理的服务配置文件存放处。</li>
</ul>
<h2 id="stand-alone-启动方式"><a class="markdownIt-Anchor" href="#stand-alone-启动方式"></a> Stand Alone 启动方式</h2>
<p>可以查看一下 <code>netconsole</code> 这个命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ /etc/init.d/netconsole 
Usage: /etc/init.d/netconsole <span class="token punctuation">&#123;</span>start<span class="token operator">|</span>stop<span class="token operator">|</span>status<span class="token operator">|</span>restart<span class="token operator">|</span>condrestart<span class="token punctuation">&#125;</span>
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ /etc/init.d/netconsole status
netconsole module not loaded
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ /etc/init.d/netconsole start
Starting netconsole <span class="token punctuation">(</span>via systemctl<span class="token punctuation">)</span>:  Job <span class="token keyword">for</span> netconsole.service failed because the control process exited with error code. See <span class="token string">"systemctl status netconsole.service"</span> and <span class="token string">"journalctl -xe"</span> <span class="token keyword">for</span> details.
                                                           <span class="token punctuation">[</span>FAILED<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以直接使用 <code>service</code> 命令来执行查询和操作：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">service</span> --status-all
netconsole module not loaded
Configured devices:
lo ens33
Currently active devices:
lo ens33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例如查看 <code>crond</code> 服务的状态：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">service</span> crond status
Redirecting to /bin/systemctl status crond.service
● crond.service - Command Scheduler
   Loaded: loaded <span class="token punctuation">(</span>/usr/lib/systemd/system/crond.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>
   Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Sun <span class="token number">2021</span>-09-19 02:32:00 EDT<span class="token punctuation">;</span> 7s ago<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="super-daemon-启动方式"><a class="markdownIt-Anchor" href="#super-daemon-启动方式"></a> Super Daemon 启动方式</h2>
<p>编辑 <code>/etc/xinetd.d/</code> 下面的配置文件，如果 <code>disable=yes</code> 表示未启用，<code>disable=no</code> 才是开机启动。</p>
<p>修改了配置文件后，重启 <code>xinetd</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">service</span> xinetd restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>用 <code>xinetd</code> 启动的服务，显示名称统一是 <code>xinetd</code>。</p>
<p>位于 <code>/etc/xinetd.d</code> 下面的配置文件可设置的参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Disable</td>
<td>设置是否启动，可设为 <code>yes</code> 或 <code>no</code>。</td>
</tr>
<tr>
<td>id</td>
<td>服务的名称。</td>
</tr>
<tr>
<td>Server</td>
<td>程序完整路径，例如 <code>server=/usr/bin/rsync</code>。</td>
</tr>
<tr>
<td>server_args</td>
<td>程序参数，例如 <code>server_args=--daemon</code>。</td>
</tr>
<tr>
<td>User</td>
<td>服务所属 UID。</td>
</tr>
<tr>
<td>group</td>
<td>服务所属 GID。</td>
</tr>
<tr>
<td>socket_type</td>
<td>数据包类型，<code>stream</code> 代表 TCP，<code>dgram</code> 代表 UDP，<code>raw</code> 代表直接交互。</td>
</tr>
<tr>
<td>protocol</td>
<td>数据包类型，与 <code>socket_type</code> 重复。</td>
</tr>
<tr>
<td>Wait</td>
<td>连接机制，可设为 <code>wait=no</code> 代表多线程。</td>
</tr>
<tr>
<td>instances</td>
<td>最大连接数，如果不限制，可设为 <code>instances=unlimited</code>。</td>
</tr>
<tr>
<td>per_source</td>
<td>单用户最大同时连接数。</td>
</tr>
<tr>
<td>Cps</td>
<td>建立新连接限制，如 <code>[两个数字]</code>。</td>
</tr>
<tr>
<td>log_type</td>
<td>日志文件等级，默认为 <code>info</code>。</td>
</tr>
<tr>
<td>log_on_failure</td>
<td>登录失败后记录的信息，可设置为 <code>PID</code>、<code>HOST</code>、<code>USERID</code>、<code>EXIT</code>、<code>DURATION</code>。</td>
</tr>
<tr>
<td>env</td>
<td>额外变量设置，如 <code>[变量名称=变量内容]</code>。</td>
</tr>
<tr>
<td>Port</td>
<td>非正规端口号，如 <code>[小于 65535 的数字]</code>。</td>
</tr>
<tr>
<td>redirect</td>
<td>服务跳转，如 <code>[IP 端口]</code>。</td>
</tr>
<tr>
<td>includedir</td>
<td>调用外部设置，可导入某个目录内的配置文件，如 <code>[目录名称]</code>。</td>
</tr>
<tr>
<td>bind</td>
<td>服务 IP 绑定，如 <code>[IP]</code>。</td>
</tr>
<tr>
<td>interface</td>
<td>与 <code>bind</code> 相同。</td>
</tr>
<tr>
<td>only_from</td>
<td>防火墙机制，规定可以登录的 IP 地址。</td>
</tr>
<tr>
<td>no_access</td>
<td>与 <code>only_from</code> 差不多，规定不可登录的 IP 地址。</td>
</tr>
<tr>
<td>access_times</td>
<td>时间控制，设置服务启动的时间。</td>
</tr>
<tr>
<td>umask</td>
<td>设置 umask，如 <code>[000，777，022]</code>。</td>
</tr>
</tbody>
</table>
<h2 id="设置开机启动"><a class="markdownIt-Anchor" href="#设置开机启动"></a> 设置开机启动</h2>
<p>使用 <code>chkconfig</code> 命令设置服务的启动等级。例如查看目前被 <code>chkconfig</code> 管理的服务：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">chkconfig</span> <span class="token parameter variable">--list</span>

netconsole      <span class="token number">0</span>:off   <span class="token number">1</span>:off   <span class="token number">2</span>:off   <span class="token number">3</span>:off   <span class="token number">4</span>:off   <span class="token number">5</span>:off   <span class="token number">6</span>:off
network         <span class="token number">0</span>:off   <span class="token number">1</span>:off   <span class="token number">2</span>:on    <span class="token number">3</span>:on    <span class="token number">4</span>:on    <span class="token number">5</span>:on    <span class="token number">6</span>:off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果有 super daemon 管理的服务会分别显示在不同的运行级别下：0~6 代表不同运行级别下的启动状态。其中，3 代表命令行界面，5 代表图形界面。</p>
<p>例如要开启 <code>httpd</code> 在运行级别 3 下自动启动：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">chkconfig</span> httpd on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果要加入自定义的启动脚本（已经存在于 <code>/etc/init.d/</code> 目录下），可以使用 <code>--add</code> 参数。同样，使用 <code>--del</code> 参数可以删除服务的启动脚本：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">chkconfig</span> <span class="token parameter variable">--add</span> myservice<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>此外，也可以使用 <code>ntsysv</code> 命令来设置管理服务的开机启动。</p>
<h1 id="systemd-服务管理"><a class="markdownIt-Anchor" href="#systemd-服务管理"></a> Systemd 服务管理</h1>
<p>自从 CentOS 7 之后，服务管理机制由 init 脚本管理改为 systemd 启动服务管理。</p>
<h2 id="systemd-的特性"><a class="markdownIt-Anchor" href="#systemd-的特性"></a> Systemd 的特性</h2>
<ul>
<li>
<p><strong>平行处理模式</strong></p>
<p>旧的 init 启动脚本是线性模式，只能单任务处理。systemd 可以让所有服务同时启动，更好利用多核心架构。</p>
</li>
<li>
<p><strong>单命令控制</strong></p>
<p>只需要一个 <code>systemctl</code> 命令来处理事务。此外，由于 systemd 常驻内存，因此任何要求（On-Demand）都会立刻处理。</p>
</li>
<li>
<p><strong>自动处理服务依赖</strong></p>
<p>由于 systemd 可以设置服务依赖检查，因此启动服务时，能自动启用相依赖服务。</p>
</li>
<li>
<p><strong>依服务功能分类</strong></p>
<p>systemd 把服务定义为服务单元（Unit），并归类到不同的服务类型（Type）中。旧的 init 仅能分为 stand alone 和 super daemon 两种，而 systemd 可以分为 service、socket、target 等多种不同类型，方便记忆和管理。</p>
</li>
<li>
<p><strong>可设置群组</strong></p>
<p>systemd 可将许多功能合为一个 Target 项目，也就是集合有相同目标的服务到一个群组，通过群组统一执行。</p>
</li>
<li>
<p><strong>向下兼容 init 服务脚本</strong></p>
<p>systemd 可以兼容旧的 init 启动脚本，并通过 systemd 来管理。</p>
</li>
</ul>
<h2 id="systemd-与-init-的区别"><a class="markdownIt-Anchor" href="#systemd-与-init-的区别"></a> Systemd 与 Init 的区别</h2>
<p>Systemd 与 Init 的区别主要有下面这些：</p>
<ul>
<li>在 run level 对应上，只有 1、3、5 对应到 systemd 的某些 target 类型，没有全部对应；</li>
<li><code>systemctl</code> 支持的语法有限，没有 init 纯脚本自由；</li>
<li>没通过 <code>systemctl</code> 来启动的服务，systemd 管理不了；</li>
<li>systemd 启动过程中不接受 stdin 传参。也就是不能与用户互动。</li>
</ul>
<h2 id="systemd-的-unit-类型"><a class="markdownIt-Anchor" href="#systemd-的-unit-类型"></a> Systemd 的 Unit 类型</h2>
<p><code>/usr/lib/systemd/system/</code> 下的数据可根据扩展名来区分不同的 Unit 类型：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 home<span class="token punctuation">]</span>$ ll /usr/lib/systemd/system/ <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">'(vsftpd|multi|cron)'</span>
-rw-r--r--. <span class="token number">1</span> root root  <span class="token number">318</span> Aug  <span class="token number">8</span>  <span class="token number">2019</span> crond.service
-rw-r--r--. <span class="token number">1</span> root root  <span class="token number">492</span> Feb  <span class="token number">2</span>  <span class="token number">2021</span> multi-user.target
drwxr-xr-x. <span class="token number">2</span> root root  <span class="token number">258</span> Sep  <span class="token number">7</span> 05:54 multi-user.target.wants
lrwxrwxrwx. <span class="token number">1</span> root root   <span class="token number">17</span> Sep  <span class="token number">7</span> 05:53 runlevel2.target -<span class="token operator">></span> multi-user.target
lrwxrwxrwx. <span class="token number">1</span> root root   <span class="token number">17</span> Sep  <span class="token number">7</span> 05:53 runlevel3.target -<span class="token operator">></span> multi-user.target
lrwxrwxrwx. <span class="token number">1</span> root root   <span class="token number">17</span> Sep  <span class="token number">7</span> 05:53 runlevel4.target -<span class="token operator">></span> multi-user.target
-rw-r--r--. <span class="token number">1</span> root root  <span class="token number">171</span> Jun  <span class="token number">9</span> <span class="token number">12</span>:15 vsftpd.service
-rw-r--r--. <span class="token number">1</span> root root  <span class="token number">184</span> Jun  <span class="token number">9</span> <span class="token number">12</span>:15 vsftpd@.service
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">89</span> Jun  <span class="token number">9</span> <span class="token number">12</span>:15 vsftpd.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如上例，其中 vsftpd 和 crond 是服务（service），而 multi-user 是 target 类型。</p>
<p>常见的类型有下面这些：</p>
<ul>
<li>
<p><strong>一般服务类型</strong>（.service）</p>
<p>主要是系统服务及网络服务，最常见的类型。</p>
</li>
<li>
<p><strong>套接字服务</strong>（.socket）</p>
<p>主要是 IPC（Inter-process communication）的传输信息插槽档（socket file）功能。这种类型的服务通常用在监控信息传递，当有通过此 socket 请求时，将请求发送给对应服务。若服务未启动，则先启动后再传送请求。使用 socket 类型的服务一般不常用，因此开机时通常会稍微延迟启动。一般用于本机服务较多，例如图形界面很多软件都是通过 socket 来通信。</p>
</li>
<li>
<p><strong>执行环境类型</strong>（.target）</p>
<p>其实是一群 unit 的集合。例如图形模式、救援模式等。</p>
</li>
<li>
<p><strong>文件系统挂载服务</strong>（.mount/.automount）</p>
<p>例如网络 NFS 文件系统挂载等。</p>
</li>
<li>
<p><strong>文件监控类型或目录类型</strong>（.path）</p>
<p>某些服务需要监控特定目录来提供队列服务，例如最常见的打印服务。</p>
</li>
<li>
<p><strong>循环执行的服务</strong>（.timer）</p>
<p>有点类似 anacrontab，不过由 systemd 管理更具弹性。</p>
</li>
</ul>
<h1 id="systemctl-命令"><a class="markdownIt-Anchor" href="#systemctl-命令"></a> Systemctl 命令</h1>
<p>依据 Unit 类型的不同，systemctl 管理方式有点不同。</p>
<h2 id="查询-unit"><a class="markdownIt-Anchor" href="#查询-unit"></a> 查询 Unit</h2>
<p>可以使用 <code>systemctl list-units</code> 命令来查询 unit 或文件。</p>
<p>查询运行中的 unit，默认使用 <code>list-units</code>。如果要查询所有 unit，可以使用 <code>--all</code> 参数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 home<span class="token punctuation">]</span>$ systemctl <span class="token parameter variable">--all</span>
  UNIT                                     LOAD   ACTIVE SUB       DESCRIPTION
  ext333.mount                             loaded active mounted   /ext333
  NetworkManager.service                   loaded active running   Network Manager
  network.target                           loaded active active    Network
LOAD   <span class="token operator">=</span> Reflects whether the unit definition was properly loaded.
ACTIVE <span class="token operator">=</span> The high-level unit activation state, i.e. generalization of SUB.
SUB    <span class="token operator">=</span> The low-level unit activation state, values depend on unit type.

<span class="token number">135</span> loaded <span class="token function">units</span> listed. Pass <span class="token parameter variable">--all</span> to see loaded but inactive units, too.
To show all installed unit files use <span class="token string">'systemctl list-unit-files'</span><span class="token builtin class-name">.</span>
lines <span class="token number">118</span>-143/143 <span class="token punctuation">(</span>END<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中，UNIT 是项目名，LOAD 表示开机时是否会被载入，ACTIVE 和 SUB 是运行状态。</p>
<p>例如，查询所有 socket 服务：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl list-sockets
LISTEN                      UNIT                         ACTIVATES
/dev/log                    systemd-journald.socket      systemd-journald.service
/run/dbus/system_bus_socket dbus.socket                  dbus.service

<span class="token number">13</span> sockets listed.
Pass <span class="token parameter variable">--all</span> to see loaded but inactive sockets, too.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>列出所有已安装的 unit，使用 <code>list-unit-files</code> 查询：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 home<span class="token punctuation">]</span>$ systemctl list-unit-files
UNIT FILE                                     STATE   
proc-sys-fs-binfmt_misc.automount             static  
dev-hugepages.mount                           static  
dev-mqueue.mount                              static <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果要仅查询与 httpd 相关的启动服务，可以使用 <code>--type</code> 指定类型：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 home<span class="token punctuation">]</span>$ systemctl <span class="token parameter variable">--type</span><span class="token operator">=</span>service <span class="token parameter variable">--all</span> <span class="token operator">|</span> <span class="token function">grep</span> httpd
  httpd.service                       loaded    active   running The Apache HTTP Server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="管理-service-unit"><a class="markdownIt-Anchor" href="#管理-service-unit"></a> 管理 Service Unit</h2>
<p>systemctl 管理 service 时主要命令有：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>start</td>
<td>立即启动服务</td>
</tr>
<tr>
<td>stop</td>
<td>立即关闭服务</td>
</tr>
<tr>
<td>restart</td>
<td>立即重启服务</td>
</tr>
<tr>
<td>reload</td>
<td>不关闭服务情况下，重新载入配置文件，让配置生效</td>
</tr>
<tr>
<td>enable</td>
<td>设置开机启动</td>
</tr>
<tr>
<td>disable</td>
<td>取消开机启动</td>
</tr>
<tr>
<td>status</td>
<td>查看服务运行状态</td>
</tr>
<tr>
<td>is-active</td>
<td>服务有没有处于活动状态</td>
</tr>
<tr>
<td>is-enable</td>
<td>服务有没有开机启动</td>
</tr>
<tr>
<td>mask</td>
<td>注销服务</td>
</tr>
<tr>
<td>unmask</td>
<td>取消注销</td>
</tr>
</tbody>
</table>
<p>例如查看 atd 服务的状态：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 home<span class="token punctuation">]</span><span class="token comment"># systemctl status atd.service</span>
● atd.service - Job spooling tools
   Loaded: loaded <span class="token punctuation">(</span>/usr/lib/systemd/system/atd.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>
   Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Tue <span class="token number">2023</span>-05-02 02:06:10 UTC<span class="token punctuation">;</span> 21min ago
     Docs: man:atd<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
 Main PID: <span class="token number">1913</span> <span class="token punctuation">(</span>atd<span class="token punctuation">)</span>
    Tasks: <span class="token number">1</span> <span class="token punctuation">(</span>limit: <span class="token number">32768</span><span class="token punctuation">)</span>
   Memory: <span class="token number">824</span>.0K
   CGroup: /system.slice/atd.service
           └─1913 /usr/sbin/atd <span class="token parameter variable">-f</span>

May 02 02:06:10 101c7 systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Started Job spooling tools.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>关键信息有：</p>
<ul>
<li><strong>Loaded</strong>：<code>enabled</code> 代表开机启动，<code>disabled</code> 为不启动，<code>static</code> 为需要别的服务唤醒，<code>masked</code> 代表无法设置启动。</li>
<li><strong>Active</strong>：unit 的状态，正在运行（<code>running</code>）或是没有运行（<code>dead</code>）。</li>
<li><strong>日志</strong>：最下面是日志信息，格式为：<code>时间 信息发出的主机 信息发出的服务 信息内容</code>。</li>
</ul>
<p>使用 stop 正常关闭 atd 服务：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 home<span class="token punctuation">]</span>$ systemctl stop atd.service
<span class="token punctuation">[</span>root@101c7 home<span class="token punctuation">]</span>$ systemctl status atd.service
â— atd.service - Job spooling tools
   Loaded: loaded <span class="token punctuation">(</span>/usr/lib/systemd/system/atd.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>
   Active: inactive <span class="token punctuation">(</span>dead<span class="token punctuation">)</span> since Sat <span class="token number">2021</span>-09-18 <span class="token number">13</span>:06:56 EDT<span class="token punctuation">;</span> 1s ago
  Process: <span class="token number">27679</span> <span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/sbin/atd <span class="token parameter variable">-f</span> <span class="token variable">$OPTS</span> <span class="token punctuation">(</span>code<span class="token operator">=</span>exited, <span class="token assign-left variable">status</span><span class="token operator">=</span><span class="token number">0</span>/SUCCESS<span class="token punctuation">)</span>
 Main PID: <span class="token number">27679</span> <span class="token punctuation">(</span>code<span class="token operator">=</span>exited, <span class="token assign-left variable">status</span><span class="token operator">=</span><span class="token number">0</span>/SUCCESS<span class="token punctuation">)</span>

Sep <span class="token number">18</span> <span class="token number">13</span>:06:56 101c7 systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Stopping Job spooling tools<span class="token punctuation">..</span>.
Sep <span class="token number">18</span> <span class="token number">13</span>:06:56 101c7 systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Stopped Job spooling tools.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果使用 kill 来关闭服务，systemd 会无法继续监控服务。</p>
<p>常见运行状态：</p>
<ul>
<li><strong>active (running)</strong>：此时服务有一或多个进程正在运行。</li>
<li><strong>active (exited)</strong>：单次执行的服务，目前没有在运行。</li>
<li><strong>active (waiting)</strong>：等待队列执行中。</li>
<li><strong>inactive</strong>：服务没有运行。</li>
</ul>
<p>给 chronyd 设置开机启动：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 home<span class="token punctuation">]</span>$ systemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span> chronyd
Created symlink from /etc/systemd/system/multi-user.target.wants/chronyd.service to /usr/lib/systemd/system/chronyd.service.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>从返回信息看，其实就是在 <code>/etc/systemd/system/multi-user.target.wants/</code> 下面新建了一个链接。</p>
<h2 id="管理-target-unit"><a class="markdownIt-Anchor" href="#管理-target-unit"></a> 管理 Target Unit</h2>
<p>systemctl 管理 target 时主要命令有：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>get-default</td>
<td>取得目前的 target</td>
</tr>
<tr>
<td>set-default</td>
<td>设置默认 target</td>
</tr>
<tr>
<td>isolate</td>
<td>切换模式</td>
</tr>
<tr>
<td>poweroff/reboot</td>
<td>关机/重启</td>
</tr>
<tr>
<td>suspend/hibernate</td>
<td>进入暂停/休眠模式</td>
</tr>
<tr>
<td>rescue/emergency</td>
<td>进入救援/紧急模式</td>
</tr>
</tbody>
</table>
<p>首先查询系统中的所有 target：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 home<span class="token punctuation">]</span>$ systemctl <span class="token parameter variable">--type</span><span class="token operator">=</span>target <span class="token parameter variable">--all</span>
  UNIT                      LOAD      ACTIVE   SUB    DESCRIPTION
  basic.target              loaded    active   active Basic System
  bluetooth.target          loaded    active   active Bluetooth

LOAD   <span class="token operator">=</span> Reflects whether the unit definition was properly loaded.
ACTIVE <span class="token operator">=</span> The high-level unit activation state, i.e. generalization of SUB.
SUB    <span class="token operator">=</span> The low-level unit activation state, values depend on unit type.

<span class="token number">35</span> loaded <span class="token function">units</span> listed.
To show all installed unit files use <span class="token string">'systemctl list-unit-files'</span><span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果显示有 35 个 target，常见的 target 有以下几个：</p>
<ul>
<li>graphical.target：文本加图形界面，包含了 multi-user.target。</li>
<li>multi-user.target：纯文本模式。</li>
<li>rescue.target：救援模式。</li>
<li>emergency.target：无法使用救援模式时，可以进入紧急处理模式。</li>
<li>shutdown.target：关机流程。</li>
<li>getty.target：和 tty 有关。</li>
</ul>
<p>例如要切换到图形界面模式：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 home<span class="token punctuation">]</span>$ systemctl get-default
multi-user.target
<span class="token punctuation">[</span>root@101c7 home<span class="token punctuation">]</span>$ systemctl isolate graphical.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="查询服务依赖"><a class="markdownIt-Anchor" href="#查询服务依赖"></a> 查询服务依赖</h2>
<p>可以使用命令 <code>list-dependencies</code> 来查询：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl list-dependencies
default.target
● ├─atd.service
● ├─auditd.service
● ├─chronyd.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>反向查询服务被依赖情况可以用 <code>--reverse</code> 参数。例如查询 <code>sshd</code> 服务被依赖目标：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl list-dependencies sshd.service <span class="token parameter variable">--reverse</span>
sshd.service
● └─multi-user.target
●   └─graphical.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="systemctl-配置"><a class="markdownIt-Anchor" href="#systemctl-配置"></a> Systemctl 配置</h1>
<p>系统服务的开机启动配置位于<code>/etc/systemd/system</code>目录下。如果要修改服务的实际脚本，则应该将其放置在<code>/usr/lib/systemd/system/</code>目录下。</p>
<h2 id="systemd-配置目录"><a class="markdownIt-Anchor" href="#systemd-配置目录"></a> Systemd 配置目录</h2>
<p>systemd 将每种服务依据功能放置在不同目录:</p>
<ul>
<li>
<p><strong>/usr/lib/systemd/system/</strong>：包含每个服务的主要启动脚本设置，类似于<code>/etc/init.d</code>。</p>
</li>
<li>
<p><strong>/run/systemd/system/</strong>：包含系统在运行过程中所生成的服务脚本，优先级高于<code>/usr/lib/systemd/system</code>。</p>
</li>
<li>
<p><strong>/etc/systemd/system/</strong>：包含用户创建的服务执行脚本，类似于<code>/etc/rc.d/rc5.d/Sxx</code>，执行优先级最高。</p>
</li>
<li>
<p><strong>/etc/sysconfig/</strong>：包含服务初始化时的一些参数配置。</p>
</li>
<li>
<p><strong>/var/lib/</strong>：包含服务产生的数据默认存储目录。</p>
</li>
<li>
<p><strong>/run/</strong>：用于放置临时文件，包括锁文件、PID 文件等。</p>
</li>
</ul>
<h2 id="systemctl-配置文件"><a class="markdownIt-Anchor" href="#systemctl-配置文件"></a> Systemctl 配置文件</h2>
<p>以下是以 sshd 服务的配置文件为例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /usr/lib/systemd/system/sshd.service 
<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>OpenSSH server daemon
<span class="token assign-left variable">Documentation</span><span class="token operator">=</span>man:sshd<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> man:sshd_config<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target sshd-keygen.service
<span class="token assign-left variable">Wants</span><span class="token operator">=</span>sshd-keygen.service

<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
<span class="token assign-left variable">Type</span><span class="token operator">=</span>notify
<span class="token assign-left variable">EnvironmentFile</span><span class="token operator">=</span>/etc/sysconfig/sshd
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/sbin/sshd <span class="token parameter variable">-D</span> <span class="token variable">$OPTIONS</span>
<span class="token assign-left variable">ExecReload</span><span class="token operator">=</span>/bin/kill <span class="token parameter variable">-HUP</span> <span class="token variable">$MAINPID</span>
<span class="token assign-left variable">KillMode</span><span class="token operator">=</span>process
<span class="token assign-left variable">Restart</span><span class="token operator">=</span>on-failure
<span class="token assign-left variable">RestartSec</span><span class="token operator">=</span>42s

<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>配置文件分为三段:</p>
<ul>
<li>
<p><strong>[Unit]</strong>：Unit 定义描述文字，文档位置，服务依赖关系等设置。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Description</td>
<td>使用 <code>systemctl status</code> 查询时显示在第一行的描述</td>
</tr>
<tr>
<td>Documentation</td>
<td>提供的服务配套文档配置</td>
</tr>
<tr>
<td>After</td>
<td>说明此 Unit 的前导启动服务，没有强制约束</td>
</tr>
<tr>
<td>Before</td>
<td>说明此 Unit 的被依赖服务，同样没有强制约束力</td>
</tr>
<tr>
<td>Requires</td>
<td>定义此 Unit 的依赖服务，如果依赖服务没启动，此 Unit 也无法启动</td>
</tr>
<tr>
<td>Wants</td>
<td>定义在此 Unit 后启动的服务，没有明确规范</td>
</tr>
<tr>
<td>Conflicts</td>
<td>冲突性检查，代表和此 Unit 有冲突的服务</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><strong>[Service]</strong>：这段也有可能是 [Socket]、[Path]、[Timer] 等，根据 Unit 类型决定。规范了配置文件路径、启动参数等。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Type</td>
<td>说明服务启动方式，有下面几种类型<br />simple：默认值，服务由 ExecStart 启动，启动后常驻内存<br />forking：通过 spawns 衍生出其他子程序作为主要服务，父程序随后终止<br />oneshot：只用跑一次的程序，不会常驻内存<br />dbus：服务必须取一个 D-Bus 名称<br />idle：在系统空闲时才运行</td>
</tr>
<tr>
<td>EnvironmentFile</td>
<td>指定启动脚本的环境配置文件</td>
</tr>
<tr>
<td>ExecStart</td>
<td>启动服务运行的命令或脚本</td>
</tr>
<tr>
<td>ExecStop</td>
<td>关闭服务运行的命令</td>
</tr>
<tr>
<td>ExecReload</td>
<td>重载服务运行的命令</td>
</tr>
<tr>
<td>Restart</td>
<td>设置服务自动重启参数，假如设为 1 则表示总会重启，只能用 <code>systemctl</code> 来停止</td>
</tr>
<tr>
<td>RemainAfterExit</td>
<td>设为 1 时，当服务所属的所有程序都停止后再次尝试启动</td>
</tr>
<tr>
<td>TimeoutSec</td>
<td>服务启动或关闭时等待的超时时间，时间一到会强制结束进程</td>
</tr>
<tr>
<td>KillMode</td>
<td>process 表示终止服务时只结束主程序，control-group 则是一同结束关联进程</td>
</tr>
<tr>
<td>RestartSec</td>
<td>重启服务前等待的时间</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><strong>[Install]</strong>：指定此 unit 安装的 target</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>WantedBy</td>
<td>后面大多接 target unit，就是说此 unit 属于哪个 target 环境</td>
</tr>
<tr>
<td>Also</td>
<td>此 Unit 被设为开机启动时，其他一同要设为开机启动的 Unit</td>
</tr>
<tr>
<td>Alias</td>
<td>设置一个链接别名</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>如果要将备份脚本 <code>backup.sh</code> 设置为 service 用 <code>systemctl</code> 来管理，可以新建一个简单的配置文件，例如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">vi</span> /etc/systemd/system/backup.service
<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>backup my <span class="token function">dir</span>
<span class="token assign-left variable">Requires</span><span class="token operator">=</span>atd.service

<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
<span class="token assign-left variable">Type</span><span class="token operator">=</span>simple
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/bin/bash <span class="token parameter variable">-c</span> <span class="token string">"echo /root/backup.sh | at now"</span>

<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target
<span class="token string">"/etc/systemd/system/backup.service"</span> <span class="token punctuation">[</span>New<span class="token punctuation">]</span> 10L, 170C written
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl daemon-reload
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl start backup
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl status backup
● backup.service - backup my <span class="token function">dir</span>
   Loaded: loaded <span class="token punctuation">(</span>/etc/systemd/system/backup.service<span class="token punctuation">;</span> disabled<span class="token punctuation">;</span> vendor preset: disabled<span class="token punctuation">)</span>
   Active: inactive <span class="token punctuation">(</span>dead<span class="token punctuation">)</span>

Sep <span class="token number">19</span> 01:00:34 101c7 systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Started backup my dir.
Sep <span class="token number">19</span> 01:00:34 101c7 bash<span class="token punctuation">[</span><span class="token number">9147</span><span class="token punctuation">]</span>: job <span class="token number">10</span> at Sun Sep <span class="token number">19</span> 01:00:00 <span class="token number">2021</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="重复配置方式"><a class="markdownIt-Anchor" href="#重复配置方式"></a> 重复配置方式</h2>
<p>有一些服务名带有@符号代表启动多重的重复设置，目的是简化多个执行的启动设置。例如 <code>getty@.service</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /usr/lib/systemd/system/getty@.service
<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>Getty on %I
<span class="token assign-left variable">Documentation</span><span class="token operator">=</span>man:agetty<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> man:systemd-getty-generator<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
<span class="token assign-left variable">Documentation</span><span class="token operator">=</span>http://0pointer.de/blog/projects/serial-console.html
<span class="token assign-left variable">After</span><span class="token operator">=</span>systemd-user-sessions.service plymouth-quit-wait.service getty-pre.target
<span class="token assign-left variable">After</span><span class="token operator">=</span>rc-local.service
<span class="token assign-left variable">Before</span><span class="token operator">=</span>getty.target
<span class="token assign-left variable">IgnoreOnIsolate</span><span class="token operator">=</span>yes
<span class="token assign-left variable">ConditionPathExists</span><span class="token operator">=</span>/dev/tty0

<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>-/sbin/agetty <span class="token parameter variable">--noclear</span> %I <span class="token environment constant">$TERM</span>
<span class="token assign-left variable">Type</span><span class="token operator">=</span>idle
<span class="token assign-left variable">Restart</span><span class="token operator">=</span>always
<span class="token assign-left variable">RestartSec</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token assign-left variable">UtmpIdentifier</span><span class="token operator">=</span>%I
<span class="token assign-left variable">TTYPath</span><span class="token operator">=</span>/dev/%I
<span class="token assign-left variable">TTYReset</span><span class="token operator">=</span>yes
<span class="token assign-left variable">TTYVHangup</span><span class="token operator">=</span>yes
<span class="token assign-left variable">TTYVTDisallocate</span><span class="token operator">=</span>yes
<span class="token assign-left variable">KillMode</span><span class="token operator">=</span>process
<span class="token assign-left variable">IgnoreSIGPIPE</span><span class="token operator">=</span>no
<span class="token assign-left variable">SendSIGHUP</span><span class="token operator">=</span>yes
<span class="token assign-left variable">Environment</span><span class="token operator">=</span><span class="token environment constant">LANG</span><span class="token operator">=</span> <span class="token assign-left variable"><span class="token environment constant">LANGUAGE</span></span><span class="token operator">=</span> <span class="token assign-left variable">LC_CTYPE</span><span class="token operator">=</span> <span class="token assign-left variable"><span class="token environment constant">LC_NUMERIC</span></span><span class="token operator">=</span> <span class="token assign-left variable"><span class="token environment constant">LC_TIME</span></span><span class="token operator">=</span> <span class="token assign-left variable">LC_COLLATE</span><span class="token operator">=</span> <span class="token assign-left variable"><span class="token environment constant">LC_MONETARY</span></span><span class="token operator">=</span> <span class="token assign-left variable">LC_MESSAGES</span><span class="token operator">=</span> <span class="token assign-left variable"><span class="token environment constant">LC_PAPER</span></span><span class="token operator">=</span> <span class="token assign-left variable"><span class="token environment constant">LC_NAME</span></span><span class="token operator">=</span> <span class="token assign-left variable"><span class="token environment constant">LC_ADDRESS</span></span><span class="token operator">=</span> <span class="token assign-left variable"><span class="token environment constant">LC_TELEPHONE</span></span><span class="token operator">=</span> <span class="token assign-left variable"><span class="token environment constant">LC_MEASUREMENT</span></span><span class="token operator">=</span> <span class="token assign-left variable"><span class="token environment constant">LC_IDENTIFICATION</span></span><span class="token operator">=</span>

<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>getty.target
<span class="token assign-left variable">DefaultInstance</span><span class="token operator">=</span>tty1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>ExecStart</code> 指定的启动命令 <code>agetty --noclear %I</code> 中 <code>%I</code> 指代范例名称，这里等于 <code>tty1</code>。具体在 <code>getty.target</code> 里有定义：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl show getty.target
<span class="token assign-left variable">Id</span><span class="token operator">=</span>getty.target
<span class="token assign-left variable">Names</span><span class="token operator">=</span>getty.target
<span class="token assign-left variable">Wants</span><span class="token operator">=</span>getty@tty1.service
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target
<span class="token assign-left variable">Conflicts</span><span class="token operator">=</span>shutdown.target
<span class="token assign-left variable">Before</span><span class="token operator">=</span>multi-user.target
<span class="token assign-left variable">After</span><span class="token operator">=</span>getty@tty1.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当执行完 <code>getty.target</code> 后，会持续要求 <code>getty@tty1.service</code> 服务启动，由于 <code>/usr/lib/systemd/system</code> 和 <code>/etc/systemd/system</code> 中没有 <code>getty@tty1.service</code> 存在，systemd 则找到 <code>getty@.service</code> 设置，将 @ 后面的数据带入成 <code>%I</code> 的变量。</p>
<p>当然也可以手动指定 @ 后面的参数来启动服务：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl start getty@tty9.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="timer-类型配置文件"><a class="markdownIt-Anchor" href="#timer-类型配置文件"></a> timer 类型配置文件</h2>
<p>我们可以利用 <code>systemd</code> 来设置定时任务，比起用 <code>crond</code> 设置来说，多了日志记录功能，并且可以和其他服务相结合。</p>
<p>想要使用 <code>timer</code> 的功能必须：</p>
<ul>
<li>系统的 <code>timer.target</code> 一定要启动；</li>
<li>要有个自定义 <code>.service</code> 服务存在；</li>
<li>要有个自定义 <code>.timer</code> 的时间启动服务存在。</li>
</ul>
<p>一个 <code>timer</code> 类配置主要用到 <code>[Timer]</code> 段，可用的参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>OnActiveSec</code></td>
<td>当 <code>timers.target</code> 启动多久后执行此 <code>Unit</code></td>
</tr>
<tr>
<td><code>OnBootSec</code></td>
<td>当开机后多久执行</td>
</tr>
<tr>
<td><code>OnStartupSec</code></td>
<td>当 <code>systemd</code> 第一次启动后多久执行</td>
</tr>
<tr>
<td><code>OnUnitActiveSec</code></td>
<td><code>Unit</code> 服务最后一次启动后，隔多久再执行一次</td>
</tr>
<tr>
<td><code>OnUnitInactiveSec</code></td>
<td><code>Unit</code> 服务最后一次停止后，隔多久再执行一次</td>
</tr>
<tr>
<td><code>OnCalendar</code></td>
<td>使用实际时间的方式启动服务</td>
</tr>
<tr>
<td><code>Unit</code></td>
<td>一般不需要设置，只有在 <code>.timer</code> 文件和 <code>.service</code> 文件名不一致时用到</td>
</tr>
<tr>
<td><code>Persistent</code></td>
<td>当使用 <code>OnCalendar</code> 设置时，指定该功能要不要持续进行。通常为 <code>yes</code></td>
</tr>
</tbody>
</table>
<p>时间设置可以使用间隔时间，例如隔 3 小时（<code>3h</code>），隔 5 天又 300 分钟（<code>300m 5day</code>）。也可以使用实际时间格式：</p>
<table>
<thead>
<tr>
<th>英语口语</th>
<th>实际时间格式</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>now</code></td>
<td><code>Wed 2020-09-09 15:43:05</code></td>
</tr>
<tr>
<td><code>today</code></td>
<td><code>Wed 2020-09-09 00:00:00</code></td>
</tr>
<tr>
<td><code>tomorrow</code></td>
<td><code>Thu 2020-09-10 00:00:00</code></td>
</tr>
<tr>
<td><code>hourly</code></td>
<td><code>--:00:00</code></td>
</tr>
<tr>
<td><code>daily</code></td>
<td><code>--* 00:00:00</code></td>
</tr>
<tr>
<td><code>weekly</code></td>
<td><code>Mon --* 00:00:00</code></td>
</tr>
<tr>
<td><code>monthly</code></td>
<td><code>--01 00:00:00</code></td>
</tr>
<tr>
<td><code>+1h16m55s</code></td>
<td><code>Thu 2020-09-09 17:00:00</code></td>
</tr>
<tr>
<td><code>2020-09-11</code></td>
<td><code>Fri 2020-09-11 17:00:00</code></td>
</tr>
</tbody>
</table>
<p>例如设置一个<code>backup.timer</code>作用为开机后 1 小时执行，每 2 天执行一次：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">vi</span> /etc/systemd/system/backup.timer
<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>backup my <span class="token function">dir</span> timer

<span class="token punctuation">[</span>Timer<span class="token punctuation">]</span>
<span class="token assign-left variable">OnBootSec</span><span class="token operator">=</span>1h
<span class="token assign-left variable">OnUnitActivesec</span><span class="token operator">=</span>2d

<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target

<span class="token string">"/etc/systemd/system/backup.timer"</span> <span class="token punctuation">[</span>New<span class="token punctuation">]</span> 9L, 118C written<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将<code>.timer</code>设置为开机启动，对应的<code>.service</code>可以不需要开机启动：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl daemon-reload
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span> backup.timer
Created symlink from /etc/systemd/system/multi-user.target.wants/backup.timer to /etc/systemd/system/backup.timer.
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl restart backup.timer
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl list-unit-files <span class="token operator">|</span> <span class="token function">grep</span> backup
backup.service                                disabled
backup.timer                                  enabled <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看一下这个 timer unit 的启动时间、<code>backup.service</code>上次执行时间和下次执行间隔时间：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl show timers.target <span class="token operator">|</span> <span class="token function">grep</span> ConditionTimestamp
<span class="token assign-left variable">ConditionTimestamp</span><span class="token operator">=</span>Sat <span class="token number">2021</span>-09-18 <span class="token number">23</span>:12:52 EDT
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl show backup.service <span class="token operator">|</span> <span class="token function">grep</span> ExecMainExitTimestamp
<span class="token assign-left variable">ExecMainExitTimestamp</span><span class="token operator">=</span>Sun <span class="token number">2021</span>-09-19 01:34:00 EDT
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl show backup.timer <span class="token operator">|</span> <span class="token function">grep</span> Next
<span class="token assign-left variable">NextElapseUSecRealtime</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token assign-left variable">NextElapseUSecMonotonic</span><span class="token operator">=</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用<code>OnCalendar</code>实际时间设置为每周日 14:00 执行一次可以这样：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">vi</span> /etc/systemd/system/backup.timer
<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>backup my <span class="token function">dir</span> timer

<span class="token punctuation">[</span>Timer<span class="token punctuation">]</span>
<span class="token assign-left variable">OnCalendar</span><span class="token operator">=</span>Sun *-*-* <span class="token number">14</span>:00:00
<span class="token assign-left variable">Persistent</span><span class="token operator">=</span>true
<span class="token assign-left variable">Unit</span><span class="token operator">=</span>backup.service

<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target
~
<span class="token string">"/etc/systemd/system/backup.timer"</span> 10L, 152C written
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl daemon-reload
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl restart backup.timer
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl show backup.timer <span class="token operator">|</span> <span class="token function">grep</span> Next
<span class="token assign-left variable">NextElapseUSecRealtime</span><span class="token operator">=</span>51y 8month 2w 4d 12h
<span class="token assign-left variable">NextElapseUSecMonotonic</span><span class="token operator">=</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意，<code>NextElapseUSecRealtime</code>时间是以 Unix 标准时间显示。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>2.系统管理</category>
      </categories>
  </entry>
  <entry>
    <title>SELinux 安全访问控制</title>
    <url>/1359563972/</url>
    <content><![CDATA[<hr />
<h1 id="selinux-介绍"><a class="markdownIt-Anchor" href="#selinux-介绍"></a> SELinux 介绍</h1>
<p><code>SELinux</code>（Security Enhanced Linux）是在进行程序、文件等权限设置依据的一个内核模块。</p>
<p>传统的权限管理方式称为自主访问控制，<code>SELinux</code>使用的是委托访问控制：</p>
<ul>
<li>
<p><strong>自主访问控制:</strong></p>
<p>自主访问控制（<code>DAC</code>，Discretionary Access Control）是依据进程的所有者与文件资源的<code>rwx</code>权限来决定文件的访问能力。</p>
<p><code>DAC</code>访问控制的缺陷：</p>
<ul>
<li><code>root</code>具有最高权限；</li>
<li>用户可以取得进程来更改文件资源的访问权限。</li>
</ul>
</li>
<li>
<p><strong>强制访问控制:</strong></p>
<p><code>SELinux</code>导入了强制访问控制（<code>MAC</code>，Mandatory Access Control）的方法。<code>MAC</code>可以针对特定的进程与特定的文件资源来进行权限控制，控制的主体变成了进程而不是用户。</p>
<p>此外这个主体进程也不能任意使用系统文件资源，因为每个文件资源也有针对该主体进程设置可取用的权限。</p>
<p>这样，可以控制的项目和策略组合非常多，因此 <code>SELinux</code> 也提供一些默认的策略，并在该策略内提供多个规则，以便用户可以选择是否启用该控制规则。</p>
</li>
</ul>
<h1 id="selinux-名词"><a class="markdownIt-Anchor" href="#selinux-名词"></a> SELinux 名词</h1>
<ul>
<li>
<p><strong>主体（Subject）</strong></p>
<p>SELinux 主要管理的就是进程。</p>
</li>
<li>
<p><strong>目标（Object）</strong></p>
<p>主体进程能否访问的目标资源一般就是文件系统。</p>
</li>
<li>
<p><strong>策略（Policy）</strong></p>
<p>由于进程与文件数量庞大，因此 SELinux 会依据某些服务来制订基本的访问安全性策略。目前提供三个主要的策略，分别是：</p>
<ul>
<li>targeted：针对网络服务限制较多，针对本机限制较少，是默认的策略。</li>
<li>minimum：由 targeted 修订而来，仅针对选择的程序来保护。</li>
<li>mls(strict)：完整的 SELinux 限制，限制方面较为严格。</li>
</ul>
</li>
<li>
<p><strong>安全上下文（Security Context）</strong></p>
<p>主体能不能访问目标除了策略指定之外，主体与目标的安全上下文必须一致才能够顺利访问。安全上下文有点类似文件系统的 rwx。安全上下文的内容与设置非常重要，如果设置错误某些服务就无法访问文件系统，出现权限不符的错误信息。</p>
<p>文件的安全上下文记录放置到文件的 inode 内。</p>
<p>使用 <code>ls -Z</code> 命令可以查看安全上下文：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ ll <span class="token parameter variable">-Z</span>
-rw-r--r--. root root unconfined_u:object_r:admin_home_t:s0 error.log
-rw-r--r--. root root unconfined_u:object_r:admin_home_t:s0 nomarl.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>安全上下文主要用冒号分为四个字段：身份识别，角色，类型，灵敏度。</p>
</li>
<li>
<p><strong>身份标识（Identify）</strong></p>
<p>相当于账号方面的身份标识，常见的有：</p>
<ul>
<li>unconfined_u：表示不受 SELinux 限制的用户，也就是说该文件来自不受限的程序产生。</li>
<li>system_u：表示系统程序方面的标识，通常是系统自己产生的文件。</li>
</ul>
<p>系统或网络服务产生的大部分数据是 system_u，用户通过 bash 创建的文件，大多是不受限的 unconfined_u 身份。</p>
</li>
<li>
<p><strong>角色（Role）</strong></p>
<p>通过角色字段，我们可以知道这个数据是属于程序，文件资源还是代表用户，常见的有：</p>
<ul>
<li>object_r：代表文件或目录；</li>
<li>system_r：代表进程，一般用户也会被指定为 system_r。</li>
</ul>
<p>角色字段最后面使用 _r 来结尾。</p>
</li>
<li>
<p><strong>类型（Type）</strong></p>
<p>在默认 targeted 策略中最重要的是类型字段，一个主体进程能不能读取到这个文件资源与类型字段有关。类型字段与文件与进程的定义不太相同，分别是：</p>
<ul>
<li>
<p>type：在文件资源（Object）上面称为类型（Type）；</p>
</li>
<li>
<p>domain：在主体程序（Subject）中则称为域（domain）；</p>
</li>
</ul>
<p>domain 需要与 type 搭配，程序才能够顺利读取文件资源。</p>
</li>
</ul>
<h1 id="类型-domain-与-type"><a class="markdownIt-Anchor" href="#类型-domain-与-type"></a> 类型 domain 与 type</h1>
<p>以 cron 程序举例看程序的域和文件的类型之间的关系.</p>
<p>先查询 cron 进程的安全上下文内容:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ <span class="token function">ps</span> <span class="token parameter variable">-eZ</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">cron</span>
system_u:system_r:crond_t:s0-s0:c0.c1023 <span class="token number">885</span> ?  00:00:02 crond
system_u:system_r:crond_t:s0-s0:c0.c1023 <span class="token number">27679</span> ? 00:00:00 atd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>cron 关联进程有两个,但它们的安全上下文一样:</p>
<ul>
<li>
<p>身份标识:角色为 system_u:system_r,说明 crond 和 atd 为系统进程.</p>
</li>
<li>
<p>最重要的安全上下文类型为 crond_t 域.</p>
</li>
</ul>
<p>再查询可执行文件 crond,crontab 和配置文件目录/etc/cron.d 的安全上下文:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ ll <span class="token parameter variable">-Zd</span> /usr/sbin/crond /etc/crontab /etc/cron.d
-rwxr-xr-x. root root system_u:object_r:crond_exec_t:s0 /usr/sbin/crond
-rw-r--r--. root root system_u:object_r:system_cron_spool_t:s0 /etc/crontab
drwxr-xr-x. root root system_u:object_r:system_cron_spool_t:s0 /etc/cron.d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>安全上下文详情如下:</p>
<ul>
<li>
<p>身份标识都是系统进程</p>
</li>
<li>
<p>配置目录/etc/cron.d 的类型为 system_cron_spool_t,</p>
</li>
<li>
<p>可执行文件 crond 的类型为 crond_exec_t,</p>
</li>
<li>
<p>可执行文件 crontab 的类型为 system_cron_spool_t.</p>
</li>
</ul>
<p>分析可得以下结论:</p>
<ul>
<li>
<p>当执行类型为 crond_exec_t 的二进制文件/usr/sbin/crond 后,这个程序产生类型为 crond_t 域的进程 crond.</p>
</li>
<li>
<p>而 crond_t 域类型进程能读取 system_cron_spool_t 类型的资源文件.</p>
</li>
<li>
<p>域与类型对应关系已经被定义好,所以如果类型设置错误,即使文件 rwx 权限全开程序也读不了目标资源.</p>
</li>
<li>
<p>最终能不能读取到正确数据,还要看 rwx 是否符合 Linux 权限的规范.</p>
</li>
</ul>
<h1 id="selinux-启动管理"><a class="markdownIt-Anchor" href="#selinux-启动管理"></a> SELinux 启动管理</h1>
<p>目前 SELinux 支持三种模式，分别是：</p>
<ul>
<li>enforcing：强制模式，代表 SELinux 正在运行中，且已经正确开始限制 domain/type 了。</li>
<li>permissive：宽容模式，代表 SELinux 正在运行中，不过仅有警告日志记录，并没有实际限制。这种模式可作调试用。</li>
<li>disabled：关闭。</li>
</ul>
<p>查询 SELinux 模式通过命令 <code>getenforce</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ getenforce
Enforcing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>查询 SELinux 的策略使用 <code>sestatus</code> 来查看，支持参数为：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-v</td>
<td>检查列于 <code>/etc/sestatus.conf</code> 内的文件与程序的安全上下文内容</td>
</tr>
<tr>
<td>-b</td>
<td>将目前策略的规则布尔值列出，即某些规则是否启动</td>
</tr>
</tbody>
</table>
<p>列出目前的 SELinux 使用策略：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ sestatus
SELinux status:                 enabled
SELinuxfs mount:                /sys/fs/selinux
SELinux root directory:         /etc/selinux
Loaded policy name:             targeted
Current mode:                   enforcing
Mode from config file:          enforcing
Policy MLS status:              enabled
Policy deny_unknown status:     allowed
Max kernel policy version:      <span class="token number">31</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>SELinux 的配置文件是 <code>/etc/selinux/config</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/selinux/config 
<span class="token comment"># This file controls the state of SELinux on the system.</span>
<span class="token comment"># SELINUX= can take one of these three values:</span>
<span class="token comment">#     enforcing - SELinux security policy is enforced.</span>
<span class="token comment">#     permissive - SELinux prints warnings instead of enforcing.</span>
<span class="token comment">#     disabled - No SELinux policy is loaded.</span>
<span class="token assign-left variable">SELINUX</span><span class="token operator">=</span>enforcing
<span class="token comment"># SELINUXTYPE= can take one of three two values:</span>
<span class="token comment">#     targeted - Targeted processes are protected,</span>
<span class="token comment">#     minimum - Modification of targeted policy. Only selected processes are protected. </span>
<span class="token comment">#     mls - Multi Level Security protection.</span>
<span class="token assign-left variable">SELINUXTYPE</span><span class="token operator">=</span>targeted <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>里面设置了 SELinux 的模式与策略。如果改变策略或模式开关需要重启系统。</p>
<p>由 enforcing 变为 permissive 模式可以在系统运行时切换。</p>
<p>切换 SELinux 模式使用 <code>setenforce</code> 命令，0 为宽容模式，1 为强制模式：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ setenforce <span class="token number">0</span>
<span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ getenforce
Permissive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>有时从 disabled 切换成 enforcing 模式后，系统必须针对文件写入安全标签（SELinux Label），会有一堆服务无法启动，提示权限错误。可以在 Permissive 状态下使用 <code>restorecon -Rv /</code> 来重新还原 SELinux 的类型。</p>
<h1 id="selinux-规则统计"><a class="markdownIt-Anchor" href="#selinux-规则统计"></a> SELinux 规则统计</h1>
<p>查询规则启动状态可以使用 <code>sestatus -b</code> 或 <code>getsebool -a</code> 命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ sestatus <span class="token parameter variable">-b</span>
SELinux status:                 enabled
SELinuxfs mount:                /sys/fs/selinux
SELinux root directory:         /etc/selinux
Loaded policy name:             targeted
Current mode:                   enforcing
Mode from config file:          enforcing
Policy MLS status:              enabled
Policy deny_unknown status:     allowed
Max kernel policy version:      <span class="token number">31</span>

Policy booleans:
abrt_anon_write                             off
abrt_handle_event                           off
abrt_upload_watch_anon_write                on
antivirus_can_scan_system                   off
<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ getsebool <span class="token parameter variable">-a</span>
abrt_anon_write --<span class="token operator">></span> off
abrt_handle_event --<span class="token operator">></span> off
abrt_upload_watch_anon_write --<span class="token operator">></span> on
antivirus_can_scan_system --<span class="token operator">></span> off
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>要查询规则具体内容，需要安装 <code>setools</code> 工具套件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ yum <span class="token function">install</span> <span class="token parameter variable">-y</span> setools-console-*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用 <code>seinfo</code> 工具查询规则统计信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ seinfo

Statistics <span class="token keyword">for</span> policy file: /sys/fs/selinux/policy
Policy Version <span class="token operator">&amp;</span> Type: v.31 <span class="token punctuation">(</span>binary, mls<span class="token punctuation">)</span>

   Classes:           <span class="token number">130</span>    Permissions:       <span class="token number">272</span>
   Sensitivities:       <span class="token number">1</span>    Categories:       <span class="token number">1024</span>
   Types:            <span class="token number">4793</span>    Attributes:        <span class="token number">253</span>
   Users:               <span class="token number">8</span>    Roles:              <span class="token number">14</span>
   Booleans:          <span class="token number">316</span>    Cond. Expr.:       <span class="token number">362</span>
   Allow:          <span class="token number">107834</span>    Neverallow:          <span class="token number">0</span>
   Auditallow:        <span class="token number">158</span>    Dontaudit:       <span class="token number">10022</span>
   Type_trans:      <span class="token number">18153</span>    Type_change:        <span class="token number">74</span>
   Type_member:        <span class="token number">35</span>    Role allow:         <span class="token number">37</span>
   Role_trans:        <span class="token number">414</span>    Range_trans:      <span class="token number">5899</span>
   Constraints:       <span class="token number">143</span>    Validatetrans:       <span class="token number">0</span>
   Initial SIDs:       <span class="token number">27</span>    Fs_use:             <span class="token number">32</span>
   Genfscon:          <span class="token number">103</span>    Portcon:           <span class="token number">614</span>
   Netifcon:            <span class="token number">0</span>    Nodecon:             <span class="token number">0</span>
   Permissives:         <span class="token number">0</span>    Polcap:              <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到当前 v31 版本的规则（Booleans）总共有 316 条。此外 <code>seinfo</code> 加参数还可以查询其他种类信息：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>–all</td>
<td>列出所有信息</td>
</tr>
<tr>
<td>-u</td>
<td>列出所有身份标识种类</td>
</tr>
<tr>
<td>-r</td>
<td>列出所有角色种类</td>
</tr>
<tr>
<td>-t</td>
<td>列出所有类别种类</td>
</tr>
<tr>
<td>-b</td>
<td>列出所有规则种类</td>
</tr>
</tbody>
</table>
<h1 id="selinux-规则查询"><a class="markdownIt-Anchor" href="#selinux-规则查询"></a> SELinux 规则查询</h1>
<p>使用 <code>sesearch</code> 命令可以用来搜索规则。命令语法：<code>sesearch [-A] [-s 主体程序类型] [-t 目标类别] [-b 规则]</code></p>
<p>主要参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-A</td>
<td>列出后面的数据中，允许&quot;读取或放行&quot;的相关数据</td>
</tr>
<tr>
<td>-s</td>
<td>后面接域类型，例如 -s httpd_t</td>
</tr>
<tr>
<td>-t</td>
<td>后面接类别，例如 -t user_home_dir_t</td>
</tr>
<tr>
<td>-b</td>
<td>后面接 SELinux 规则，如 -b httpd_enable_ftp_server</td>
</tr>
</tbody>
</table>
<p>例如找出 <code>crond_t</code> 这个域类型的进程能够读取的文件类型：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ sesearch <span class="token parameter variable">-A</span> <span class="token parameter variable">-s</span> crond_t <span class="token operator">|</span> <span class="token function">grep</span> spool
   allow crond_t system_cron_spool_t <span class="token builtin class-name">:</span> <span class="token function">dir</span> <span class="token punctuation">&#123;</span> ioctl <span class="token builtin class-name">read</span> getattr lock search <span class="token function">open</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">;</span> 
   allow crond_t var_spool_t <span class="token builtin class-name">:</span> <span class="token function">file</span> <span class="token punctuation">&#123;</span> ioctl <span class="token builtin class-name">read</span> getattr lock <span class="token function">open</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">;</span> 
   allow daemon user_cron_spool_t <span class="token builtin class-name">:</span> <span class="token function">file</span> <span class="token punctuation">&#123;</span> ioctl <span class="token builtin class-name">read</span> <span class="token function">write</span> getattr lock append <span class="token punctuation">&#125;</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>allow</code> 后面接进程域类型和文件类型，冒号后表明资源类型，大括号 {} 内为允许的动作。</p>
<p>例如第一条表示允许 <code>crond_t</code> 域类型进程对 <code>system_cron_spool_t</code> 类型的文件夹读取，打开，查看属性等操作。</p>
<p>再使用 <code>semanage</code> 查一下 <code>httpd_enable_homedirs</code> 这条规则的含义：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ semanage boolean <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">grep</span> httpd_enable_homedirs
SELinux boolean                State  Default Description
httpd_enable_homedirs          <span class="token punctuation">(</span>off  ,  off<span class="token punctuation">)</span>  Allow httpd to <span class="token builtin class-name">enable</span> homedirs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在 description 一列介绍了规则内容是允许 httpd 程序去读取使用者主文件夹。</p>
<p>再使用 <code>sesearch</code> 来搜索 <code>httpd_enable_homedirs</code> 规则里面具体规定：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ sesearch <span class="token parameter variable">-A</span> <span class="token parameter variable">-b</span> httpd_enable_homedirs
Found <span class="token number">77</span> semantic av rules:
   allow httpd_t user_home_dir_t <span class="token builtin class-name">:</span> lnk_file <span class="token punctuation">&#123;</span> <span class="token builtin class-name">read</span> getattr <span class="token punctuation">&#125;</span> <span class="token punctuation">;</span> 
   allow httpd_suexec_t user_home_dir_t <span class="token builtin class-name">:</span> <span class="token function">dir</span> <span class="token punctuation">&#123;</span> getattr search <span class="token function">open</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">;</span> 
   allow httpd_t nfs_t <span class="token builtin class-name">:</span> lnk_file <span class="token punctuation">&#123;</span> <span class="token builtin class-name">read</span> getattr <span class="token punctuation">&#125;</span> <span class="token punctuation">;</span> 
   allow httpd_sys_script_t nfs_t <span class="token builtin class-name">:</span> <span class="token function">file</span> <span class="token punctuation">&#123;</span> ioctl <span class="token builtin class-name">read</span> geta<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>共有 77 条相关规定，如果规则没有启用，<code>httpd_t</code> 域类型进程就无法读取使用者主文件夹。这是由 <code>sestatus</code> 查到的 Policy deny_unknown status 设置规定默认抵挡未知的主题程序。</p>
<h1 id="selinux-规则开闭"><a class="markdownIt-Anchor" href="#selinux-规则开闭"></a> SELinux 规则开闭</h1>
<p>当确认要关闭或开启某条规则可以使用 <code>setsebool</code> 来管理。例如启动 <code>httpd_enable_homedirs</code> 规则：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ getsebool httpd_enable_homedirs
httpd_enable_homedirs --<span class="token operator">></span> off
<span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ setsebool <span class="token parameter variable">-P</span> httpd_enable_homedirs <span class="token number">1</span>
<span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ getsebool httpd_enable_homedirs
httpd_enable_homedirs --<span class="token operator">></span> on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="安全上下文修改"><a class="markdownIt-Anchor" href="#安全上下文修改"></a> 安全上下文修改</h1>
<p>修改文件的安全上下文可以使用 <code>chcon</code> 命令。命令格式：<code>chcon [-R] [-t type] [-u user] [-r role] 文件</code></p>
<p>参数说明如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-R</td>
<td>递归修改目录</td>
</tr>
<tr>
<td>-t</td>
<td>接安全上下文的类型字段，如 <code>thhpd_sys_content_t</code></td>
</tr>
<tr>
<td>-u</td>
<td>接身份识别</td>
</tr>
<tr>
<td>-r</td>
<td>接角色</td>
</tr>
<tr>
<td>-v</td>
<td>显示详细结果</td>
</tr>
<tr>
<td>–reference=参考文件</td>
<td>用参考文件作为范例修改目标文件的安全上下文</td>
</tr>
</tbody>
</table>
<p>例如修改 <code>1.txt</code> 文件的安全上下文类型为 <code>net_conf_t</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ chcon <span class="token parameter variable">-v</span> <span class="token parameter variable">-t</span> net_conf_t <span class="token number">1</span>.txt
changing security context of â€˜1.txtâ€™
<span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ ll <span class="token parameter variable">-Z</span> <span class="token number">1</span>.txt 
-rw-r--r--. root root unconfined_u:object_r:net_conf_t:s0 <span class="token number">1</span>.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>另一种修改方式，例如将 <code>/etc/shadow</code> 的安全上下文套用到 <code>1.txt</code> 文件上：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ chcon <span class="token parameter variable">-v</span> <span class="token parameter variable">--reference</span><span class="token operator">=</span>/etc/shadow <span class="token number">1</span>.txt
changing security context of â€˜1.txtâ€™
<span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ ll <span class="token parameter variable">-Z</span> /etc/shadow <span class="token number">1</span>.txt 
-rw-r--r--. root root system_u:object_r:shadow_t:s0    <span class="token number">1</span>.txt
----------. root root system_u:object_r:shadow_t:s0    /etc/shadow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="安全上下文恢复"><a class="markdownIt-Anchor" href="#安全上下文恢复"></a> 安全上下文恢复</h1>
<p>如果想要将目录的安全上下文类型错误恢复到默认值，可以使用 <code>restorecon</code> 命令。</p>
<p><code>restorecon</code> 命令可用 <code>-R</code> 来递归修改目录，例如恢复 <code>/etc/cron.d/</code> 下面的文件安全上下文类型为默认值：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ <span class="token function">mv</span> <span class="token number">1</span>.txt /etc/cron.d/ <span class="token punctuation">;</span> ll <span class="token parameter variable">-Z</span> /etc/cron.d/
-rw-r--r--. root root system_u:object_r:system_cron_spool_t:s0 0hourly
-rw-r--r--. root root system_u:object_r:shadow_t:s0    <span class="token number">1</span>.txt
-rw-r--r--. root root system_u:object_r:system_cron_spool_t:s0 raid-check
<span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ restorecon <span class="token parameter variable">-Rv</span> /etc/cron.d <span class="token punctuation">;</span> ll <span class="token parameter variable">-Z</span> /etc/cron.d/
restorecon reset /etc/cron.d/1.txt context system_u:object_r:shadow_t:s0-<span class="token operator">></span>system_u:object_r:system_cron_spool_t:s0
-rw-r--r--. root root system_u:object_r:system_cron_spool_t:s0 0hourly
-rw-r--r--. root root system_u:object_r:system_cron_spool_t:s0 <span class="token number">1</span>.txt
-rw-r--r--. root root system_u:object_r:system_cron_spool_t:s0 raid-check<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到移动到<code>/etc/cron.d/</code> 的文件 <code>1.txt</code> 安全上下文类型从 <code>shadow_t</code> 恢复成了 <code>system_cron_spool_t</code>。</p>
<h1 id="安全上下文默认值修改"><a class="markdownIt-Anchor" href="#安全上下文默认值修改"></a> 安全上下文默认值修改</h1>
<p>之所以用 <code>restorecon</code> 命令可以恢复目录内的文件安全上下文类型，是因为目录和文件有个安全上下文默认值设定。</p>
<p>可以通过 <code>semanage</code> 命令来查询与修改安全上下文类型默认值。</p>
<p>常用参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>fcontext</td>
<td>用在安全性上下文标签（默认值）方面的用途，-l 查询</td>
</tr>
<tr>
<td>-a</td>
<td>增加，可以增加一些目录的默认安全上下文类型设置</td>
</tr>
<tr>
<td>-m</td>
<td>修改</td>
</tr>
<tr>
<td>-d</td>
<td>删除</td>
</tr>
</tbody>
</table>
<p>例如查询 <code>/etc/cron.d</code> 目录的默认值：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ semanage fcontext <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">"/etc/cron<span class="token entity" title="\\">\\</span>\.d\("</span>
/etc/cron<span class="token punctuation">\</span>.d<span class="token punctuation">(</span>/.*<span class="token punctuation">)</span>?                                 all files          system_u:object_r:system_cron_spool_t:s0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>修改 <code>ftp_port_t</code> 端口策略，增加一个端口 <code>955</code> 作为 FTP 端口：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 home<span class="token punctuation">]</span>$ semanage port <span class="token parameter variable">-a</span> <span class="token parameter variable">-t</span> ftp_port_t <span class="token parameter variable">-p</span> tcp <span class="token number">955</span><span class="token punctuation">;</span> semanage port <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">955</span>
ftp_port_t                     tcp      <span class="token number">955</span>, <span class="token number">21</span>, <span class="token number">989</span>, <span class="token number">990</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>修改目录 <code>/root/myps</code> 的安全上下文类型为 <code>system_cron_spool_t</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ ll <span class="token parameter variable">-dZ</span> /root/myps/* /root/myps /root 
dr-xr-x---. root root system_u:object_r:admin_home_t:s0 /root
drwxr-xr-x. root root unconfined_u:object_r:admin_home_t:s0 /root/myps
-rw-r--r--. root root unconfined_u:object_r:admin_home_t:s0 /root/myps/ip.txt
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ semanage fcontext <span class="token parameter variable">-a</span> <span class="token parameter variable">-t</span> system_cron_spool_t <span class="token string">"/root/myps(/.*)?"</span>
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ ll <span class="token parameter variable">-dZ</span> /root/myps/* /root/myps /root 
dr-xr-x---. root root system_u:object_r:admin_home_t:s0 /root
drwxr-xr-x. root root unconfined_u:object_r:admin_home_t:s0 /root/myps
-rw-r--r--. root root unconfined_u:object_r:admin_home_t:s0 /root/myps/ip.txt
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ semanage fcontext <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">"/root/myps\("</span>
/root/myps<span class="token punctuation">(</span>/.*<span class="token punctuation">)</span>?                                   all files          system_u:object_r:system_cron_spool_t:s0 
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ restorecon <span class="token parameter variable">-Rv</span> /root/myps
restorecon reset /root/myps context unconfined_u:object_r:admin_home_t:s0-<span class="token operator">></span>unconfined_u:object_r:system_cron_spool_t:s0
restorecon reset /root/myps/ip.txt context unconfined_u:object_r:admin_home_t:s0-<span class="token operator">></span>unconfined_u:object_r:system_cron_spool_t:s0
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ ll <span class="token parameter variable">-dZ</span> /root/myps/* /root/myps
drwxr-xr-x. root root unconfined_u:object_r:system_cron_spool_t:s0 /root/myps
-rw-r--r--. root root unconfined_u:object_r:system_cron_spool_t:s0 /root/myps/ip.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改了以后再用 <code>restorecon</code> 命令还原默认值，所有其目录和文件的安全上下文类型变成了新设置的值。</p>
<h1 id="selinux-日志查询"><a class="markdownIt-Anchor" href="#selinux-日志查询"></a> SELinux 日志查询</h1>
<p>首先检查用于 SE 日志记录的服务 <code>auditd</code>（setroubleshoot）是否启动中：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl status auditd
â— auditd.service - Security Auditing Service
   Loaded: loaded <span class="token punctuation">(</span>/usr/lib/systemd/system/auditd.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>
   Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Thu <span class="token number">2021</span>-09-09 <span class="token number">15</span>:08:51 EDT<span class="token punctuation">;</span> <span class="token number">1</span> weeks <span class="token number">1</span> days ago<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>默认情况下系统会自动启动。这里使用 <code>httpd</code> 服务来测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">ps</span> aux <span class="token parameter variable">-Z</span> <span class="token operator">|</span> <span class="token function">grep</span> http
system_u:system_r:httpd_t:s0    root      <span class="token number">60730</span>  <span class="token number">0.0</span>  <span class="token number">0.1</span> <span class="token number">230444</span>  <span class="token number">5204</span> ?        Ss   <span class="token number">10</span>:30   <span class="token number">0</span>:00 /usr/sbin/httpd <span class="token parameter variable">-DFOREGROUND</span>
system_u:system_r:httpd_t:s0    apache    <span class="token number">60731</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span> <span class="token number">230576</span>  <span class="token number">3732</span> ?        S    <span class="token number">10</span>:30   <span class="token number">0</span>:00 /usr/sbin/httpd <span class="token parameter variable">-DFOREGROUND</span>
system_u:system_r:httpd_t:s0    apache    <span class="token number">60732</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span> <span class="token number">230576</span>  <span class="token number">3736</span> ?        S    <span class="token number">10</span>:30   <span class="token number">0</span>:00 /usr/sbin/httpd <span class="token parameter variable">-DFOREGROUND</span>
system_u:system_r:httpd_t:s0    apache    <span class="token number">60733</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span> <span class="token number">230576</span>  <span class="token number">3736</span> ?        S    <span class="token number">10</span>:30   <span class="token number">0</span>:00 /usr/sbin/httpd <span class="token parameter variable">-DFOREGROUND</span>
system_u:system_r:httpd_t:s0    apache    <span class="token number">60734</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span> <span class="token number">230576</span>  <span class="token number">3720</span> ?        S    <span class="token number">10</span>:30   <span class="token number">0</span>:00 /usr/sbin/httpd <span class="token parameter variable">-DFOREGROUND</span>
system_u:system_r:httpd_t:s0    apache    <span class="token number">60735</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span> <span class="token number">230576</span>  <span class="token number">3732</span> ?        S    <span class="token number">10</span>:30   <span class="token number">0</span>:00 /usr/sbin/httpd <span class="token parameter variable">-DFOREGROUND</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查询得知 <code>httpd</code> 的进程安全上下文类型为 <code>httpd_t</code> 域。增加首页内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"Today is 9.14"</span> <span class="token operator">></span> /var/www/html/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>通过浏览器访问服务器的 IP 地址可看到刚建页面。此时浏览器会通过 <code>httpd</code> 这个进程去读取 <code>/var/www/html/index.html</code> 文件。</p>
<p>查询一下 <code>index.html</code> 文件的安全上下文：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ ll <span class="token parameter variable">-Z</span> /var/www/html/index.html
-rw-r--r--. root root unconfined_u:object_r:httpd_sys_content_t:s0 /var/www/html/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>看到文件安全上下文类型为 <code>httpd_sys_content_t</code>，查询一下 <code>httpd_t</code> 域类型与它的关系：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ sesearch <span class="token parameter variable">-A</span> <span class="token parameter variable">-s</span> httpd_t <span class="token operator">|</span> <span class="token function">grep</span> httpd_sys_content_t
   allow httpd_t httpd_sys_content_t <span class="token builtin class-name">:</span> lnk_file <span class="token punctuation">&#123;</span> <span class="token builtin class-name">read</span> getattr <span class="token punctuation">&#125;</span> <span class="token punctuation">;</span> 
   allow httpd_t httpd_sys_content_t <span class="token builtin class-name">:</span> <span class="token function">dir</span> <span class="token punctuation">&#123;</span> ioctl <span class="token builtin class-name">read</span> getattr lock search <span class="token function">open</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">;</span> 
   allow httpd_t httpd_sys_content_t <span class="token builtin class-name">:</span> <span class="token function">file</span> <span class="token punctuation">&#123;</span> ioctl <span class="token builtin class-name">read</span> getattr lock map <span class="token function">open</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">;</span> 
   allow daemon httpd_sys_content_t <span class="token builtin class-name">:</span> <span class="token function">dir</span> <span class="token punctuation">&#123;</span> getattr search <span class="token function">open</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">;</span> 
   allow httpd_t httpd_sys_content_t <span class="token builtin class-name">:</span> <span class="token function">dir</span> <span class="token punctuation">&#123;</span> ioctl <span class="token builtin class-name">read</span> <span class="token function">write</span> getattr lock add_name remove_name search <span class="token function">open</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接着测试一下错误的安全上下文类型，可以将网页数据在 <code>/root</code> 文件夹下面生成，再移动到 <code>/var/www/html/</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"Now is 22:41"</span> <span class="token operator">></span> index.html
<span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">mv</span> index.html /var/www/html/
mv: overwrite a€?/var/www/html/index.htmla€?? y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>再次访问 <code>index.html</code>，结果变成了 <code>Forbidden</code> 拒绝访问：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 home<span class="token punctuation">]</span>$ <span class="token function">curl</span> <span class="token number">127.0</span>.0.1/index.html
<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE HTML PUBLIC <span class="token string">"-//IETF//DTD HTML 2.0//EN"</span><span class="token operator">></span>
<span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>
<span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token number">403</span> Forbidden<span class="token operator">&lt;</span>/title<span class="token operator">></span>
<span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>
<span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Forbidden<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>
<span class="token operator">&lt;</span>p<span class="token operator">></span>You don't have permission to access /index.html
on this server.<span class="token operator">&lt;</span>/p<span class="token operator">></span>
<span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>把 Selinux 转换工作模式再访问试试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 home<span class="token punctuation">]</span>$ setenforce <span class="token number">0</span>
<span class="token punctuation">[</span>root@101c7 home<span class="token punctuation">]</span>$ <span class="token function">curl</span> <span class="token number">127.0</span>.0.1/index.html
Now is <span class="token number">23</span>:41
<span class="token punctuation">[</span>root@101c7 home<span class="token punctuation">]</span>$ setenforce <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>切换 SELinux 到警告模式后访问 <code>index.html</code> 正常，可以确定是 SELinux 的问题。看下 <code>index.html</code> 的安全上下文：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ ll <span class="token parameter variable">-Z</span> /var/www/html/index.html
-rw-r--r--. root root unconfined_u:object_r:admin_home_t:s0 /var/www/html/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>安全上下文类型为 <code>admin_home_t</code>，查询一下与 <code>httpd_t</code> 的关系：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ sesearch <span class="token parameter variable">-A</span> <span class="token parameter variable">-s</span> httpd_t <span class="token operator">|</span> <span class="token function">grep</span> admin_home_t
   allow domain admin_home_t <span class="token builtin class-name">:</span> <span class="token function">dir</span> <span class="token punctuation">&#123;</span> getattr search <span class="token function">open</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">;</span> 
   allow domain admin_home_t <span class="token builtin class-name">:</span> lnk_file <span class="token punctuation">&#123;</span> <span class="token builtin class-name">read</span> getattr <span class="token punctuation">&#125;</span> <span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>结果显示没有结果，也就默认会被拒绝掉。到 <code>/var/log/messages</code> 下面查看下日志，果然有记录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">tail</span> <span class="token parameter variable">-f</span> /var/log/messages
Sep <span class="token number">18</span> 08:40:32 101c7 setroubleshoot: failed to retrieve <span class="token function">rpm</span> info <span class="token keyword">for</span> /var/www/html/index.html
Sep <span class="token number">18</span> 08:40:32 101c7 setroubleshoot: SELinux is preventing httpd from getattr access on the <span class="token function">file</span> /var/www/html/index.html. For complete SELinux messages run: sealert <span class="token parameter variable">-l</span> c7d023db-6ae4-4397-9a6b-5b1061f5a9fa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>来自 <code>setroubleshoot</code> 的报告指出 SELinux 拒绝了 <code>httpd</code> 读取 <code>/var/www/html/index.html</code> 的请求，运行 <code>sealert -l</code> 命令来查看报告。看看 <code>sealert</code> 给出的报告：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ sealert <span class="token parameter variable">-l</span> c7d023db-6ae4-4397-9a6b-5b1061f5a9fa
SELinux is preventing httpd from getattr access on the <span class="token function">file</span> /var/www/html/index.html.

*****  Plugin restorecon <span class="token punctuation">(</span><span class="token number">99.5</span> confidence<span class="token punctuation">)</span> suggests   ************************

If you want to fix the label. 
/var/www/html/index.html default label should be httpd_sys_content_t.
Then you can run restorecon. The access attempt may have been stopped due to insufficient permissions to access a parent directory <span class="token keyword">in</span> <span class="token function">which</span> <span class="token keyword">case</span> try to change the following <span class="token builtin class-name">command</span> accordingly.
Do
<span class="token comment"># /sbin/restorecon -v /var/www/html/index.html</span>

*****  Plugin catchall <span class="token punctuation">(</span><span class="token number">1.49</span> confidence<span class="token punctuation">)</span> suggests   **************************

If you believe that httpd should be allowed getattr access on the index.html <span class="token function">file</span> by default.
Then you should report this as a bug.
You can generate a <span class="token builtin class-name">local</span> policy module to allow this access.
Do
allow this access <span class="token keyword">for</span> now by executing:
<span class="token comment"># ausearch -c 'httpd' --raw | audit2allow -M my-httpd</span>
<span class="token comment"># semodule -i my-httpd.pp</span>


Additional Information:
Source Context                system_u:system_r:httpd_t:s0
Target Context                unconfined_u:object_r:admin_home_t:s0
Target Objects                /var/www/html/index.html <span class="token punctuation">[</span> <span class="token function">file</span> <span class="token punctuation">]</span>
Source                        httpd
Source Path                   httpd
Port                          <span class="token operator">&lt;</span>Unknown<span class="token operator">></span>
Host                          101c7
Source RPM Packages           
Target RPM Packages           
Policy RPM                    selinux-policy-3.13.1-268.el7_9.2.noarch
Selinux Enabled               True
Policy Type                   targeted
Enforcing Mode                Enforcing
Host Name                     101c7
Platform                      Linux 101c7 <span class="token number">3.10</span>.0-1160.41.1.el7.x86_64 <span class="token comment">#1 SMP Tue</span>
                              Aug <span class="token number">31</span> <span class="token number">14</span>:52:47 UTC <span class="token number">2021</span> x86_64 x86_64
Alert Count                   <span class="token number">6</span>
First Seen                    <span class="token number">2021</span>-09-18 08:39:24 EDT
Last Seen                     <span class="token number">2021</span>-09-18 08:52:01 EDT
Local ID                      c7d023db-6ae4-4397-9a6b-5b1061f5a9fa

Raw Audit Messages
<span class="token assign-left variable">type</span><span class="token operator">=</span>AVC <span class="token assign-left variable">msg</span><span class="token operator">=</span>audit<span class="token punctuation">(</span><span class="token number">1631969521.111</span>:5038<span class="token punctuation">)</span>: avc:  denied  <span class="token punctuation">&#123;</span> getattr <span class="token punctuation">&#125;</span> <span class="token keyword">for</span>  <span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token number">60731</span> <span class="token assign-left variable">comm</span><span class="token operator">=</span><span class="token string">"httpd"</span> <span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token string">"/var/www/html/index.html"</span> <span class="token assign-left variable">dev</span><span class="token operator">=</span><span class="token string">"dm-0"</span> <span class="token assign-left variable">ino</span><span class="token operator">=</span><span class="token number">33829126</span> <span class="token assign-left variable">scontext</span><span class="token operator">=</span>system_u:system_r:httpd_t:s0 <span class="token assign-left variable">tcontext</span><span class="token operator">=</span>unconfined_u:object_r:admin_home_t:s0 <span class="token assign-left variable">tclass</span><span class="token operator">=</span>file <span class="token assign-left variable">permissive</span><span class="token operator">=</span><span class="token number">0</span>


Hash: httpd,httpd_t,admin_home_t,file,getattr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>报告指出报错原因 99.5% 是因为：<code>index.html</code> 文件的默认 label 应该为 <code>httpd_sys_content_t</code>，这是我们已经知道的错误原因，并且下面给出了解决办法，运行命令 <code>/sbin/restorecon -v /var/www/html/index.html</code> 来修复这一错误。</p>
<p>接着报告提示 1.49% 的可能原因是遇到了 bug，可以运行命令 <code>ausearch -c 'httpd' --raw | audit2allow -M my-httpd</code> 和 <code>semodule -i my-httpd.pp</code> 来报告错误。</p>
<p>先试下后面这条命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ ausearch <span class="token parameter variable">-c</span> <span class="token string">'httpd'</span> <span class="token parameter variable">--raw</span> <span class="token operator">|</span> audit2allow <span class="token parameter variable">-M</span> my-httpd
******************** IMPORTANT ***********************
To <span class="token function">make</span> this policy package active, execute:

semodule <span class="token parameter variable">-i</span> my-httpd.pp

<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ semodule <span class="token parameter variable">-i</span> my-httpd.pp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后在浏览器访问 http 服务器，惊讶地发现可以访问了，日志 <code>/var/log/messages</code> 里面没有报错，显然最后一条命令起了作用。现在通过在 <code>/root</code> 下面新建 <code>index.html</code> 再转移到 <code>/var/www/html/</code> 的方式也不会拒绝访问了。</p>
<p>查询一下 <code>httpd_t</code> 与 <code>admin_home_t</code> 的关系：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 home<span class="token punctuation">]</span>$ sesearch <span class="token parameter variable">-A</span> <span class="token parameter variable">-s</span> httpd_t <span class="token operator">|</span> <span class="token function">grep</span> admin_home_t
   allow domain admin_home_t <span class="token builtin class-name">:</span> <span class="token function">dir</span> <span class="token punctuation">&#123;</span> getattr search <span class="token function">open</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">;</span> 
   allow domain admin_home_t <span class="token builtin class-name">:</span> lnk_file <span class="token punctuation">&#123;</span> <span class="token builtin class-name">read</span> getattr <span class="token punctuation">&#125;</span> <span class="token punctuation">;</span> 
   allow httpd_t admin_home_t <span class="token builtin class-name">:</span> <span class="token function">file</span> <span class="token punctuation">&#123;</span> <span class="token builtin class-name">read</span> getattr <span class="token function">open</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>果然系统给我们新建了一条策略来解决这一问题。由此可见，只要知道分析错误日志，SELinux 的 targeted 模式还是很灵活的，不必急着装好系统后就把 SELinux 关掉。</p>
<p>另外 <code>/var/log/audit</code> 下面也有日志，不过有用的信息并不多：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 home<span class="token punctuation">]</span>$ audit2why <span class="token operator">&lt;</span> /var/log/audit/audit.log 
<span class="token assign-left variable">type</span><span class="token operator">=</span>AVC <span class="token assign-left variable">msg</span><span class="token operator">=</span>audit<span class="token punctuation">(</span><span class="token number">1631972305.031</span>:5057<span class="token punctuation">)</span>: avc:  denied  <span class="token punctuation">&#123;</span> <span class="token function">open</span> <span class="token punctuation">&#125;</span> <span class="token keyword">for</span>  <span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token number">60735</span> <span class="token assign-left variable">comm</span><span class="token operator">=</span><span class="token string">"httpd"</span> <span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token string">"/var/www/html/index.html"</span> <span class="token assign-left variable">dev</span><span class="token operator">=</span><span class="token string">"dm-0"</span> <span class="token assign-left variable">ino</span><span class="token operator">=</span><span class="token number">50435189</span> <span class="token assign-left variable">scontext</span><span class="token operator">=</span>system_u:system_r:httpd_t:s0 <span class="token assign-left variable">tcontext</span><span class="token operator">=</span>unconfined_u:object_r:home_root_t:s0 <span class="token assign-left variable">tclass</span><span class="token operator">=</span>file <span class="token assign-left variable">permissive</span><span class="token operator">=</span><span class="token number">1</span>

        Was caused by:
                Missing <span class="token builtin class-name">type</span> enforcement <span class="token punctuation">(</span>TE<span class="token punctuation">)</span> allow rule.

                You can use audit2allow to generate a loadable module to allow this access.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux</category>
        <category>2.系统管理</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 查询硬件与系统信息</title>
    <url>/741506456/</url>
    <content><![CDATA[<h1 id="查看内核版本"><a class="markdownIt-Anchor" href="#查看内核版本"></a> 查看内核版本</h1>
<p>使用命令<code>uname -r</code>可以查看当前内核版本：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">uname</span> <span class="token parameter variable">-r</span>
<span class="token number">3.10</span>.0-862.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如果想要查看更详细的内核信息，可以使用<code>uname -a</code>命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">uname</span> <span class="token parameter variable">-a</span>
Linux 101c7 <span class="token number">3.10</span>.0-862.el7.x86_64 <span class="token comment">#1 SMP Fri Apr 20 16:44:24 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="查看操作系统位数"><a class="markdownIt-Anchor" href="#查看操作系统位数"></a> 查看操作系统位数</h1>
<p>使用<code>getconf</code>命令查看<code>LONG_BIT</code>变量可以得到操作系统位数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ getconf LONG_BIT
<span class="token number">64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="查看发行版本"><a class="markdownIt-Anchor" href="#查看发行版本"></a> 查看发行版本</h1>
<p>在 CentOS 5 中，可以使用命令<code>lsb_release -a</code>查看发行版本。</p>
<p>在 CentOS 7 中，可以查看文件<code>/etc/centos-release</code>的内容来查看版本号：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/centos-release
CentOS Linux release <span class="token number">7.9</span>.2009 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="查看当前时间"><a class="markdownIt-Anchor" href="#查看当前时间"></a> 查看当前时间</h1>
<p>使用<code>date</code>命令可以查看系统中当前的时间和日期：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">date</span>
Sat Sep <span class="token number">11</span> 00:16:31 EDT <span class="token number">2021</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可以使用<code>systemd-analyze</code>命令查看系统启动时间：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-m1-pro ~<span class="token punctuation">]</span><span class="token comment"># systemd-analyze</span>
Startup finished <span class="token keyword">in</span> 614ms <span class="token punctuation">(</span>kernel<span class="token punctuation">)</span> + <span class="token number">1</span>.192s <span class="token punctuation">(</span>initrd<span class="token punctuation">)</span> + <span class="token number">27</span>.889s <span class="token punctuation">(</span>userspace<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">29</span>.695s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>其中，kernel 表示内核启动时间，initrd 表示 initramfs 加载时间，userspace 表示用户空间启动时间。</p>
<h1 id="查看内存使用情况"><a class="markdownIt-Anchor" href="#查看内存使用情况"></a> 查看内存使用情况</h1>
<p>使用<code>free</code>命令查看内存使用情况，单位默认为 KB：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">free</span>
              total        used        <span class="token function">free</span>      shared  buff/cache   available
Mem:        <span class="token number">3861280</span>      <span class="token number">283612</span>     <span class="token number">2429740</span>       <span class="token number">11956</span>     <span class="token number">1147928</span>     <span class="token number">3272400</span>
Swap:       <span class="token number">2097148</span>           <span class="token number">0</span>     <span class="token number">2097148</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>一般来说，内存被大量<code>buff/cache</code>了是正常现象，但<code>swap</code>用量超过 20%说明物理内存不足。</p>
<h1 id="系统资源占用信息"><a class="markdownIt-Anchor" href="#系统资源占用信息"></a> 系统资源占用信息</h1>
<p>如果想要了解系统资源的运行情况，可以使用<code>vmstat</code>命令检测 CPU/内存/磁盘 IO 等。该命令常用参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>使用 inactive/active 替代 buffer/.cache 的内存输出信息</td>
</tr>
<tr>
<td>-f</td>
<td>开机到目前为止系统复制（fork）的进程数</td>
</tr>
<tr>
<td>-s</td>
<td>将一些事件导致的内存变化情况列表说明</td>
</tr>
<tr>
<td>-S</td>
<td>接单位，让显示的数据有单位</td>
</tr>
<tr>
<td>-d</td>
<td>列出磁盘的读写总量统计</td>
</tr>
<tr>
<td>-p</td>
<td>列出分区，可显示该分区的读写总量统计</td>
</tr>
</tbody>
</table>
<p>例如统计目前主机 CPU 状态，每秒一次，共三次:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">vmstat</span> <span class="token number">1</span> <span class="token number">3</span>
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
r  b   swpd   <span class="token function">free</span>   buff  cache   si   so    bi    bo   <span class="token keyword">in</span>   cs us sy <span class="token function">id</span> wa st
<span class="token number">1</span>  <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">2434408</span>  <span class="token number">15508</span> <span class="token number">1132464</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>    <span class="token number">4</span>    <span class="token number">6</span>  <span class="token number">0</span>  <span class="token number">0</span> <span class="token number">100</span>  <span class="token number">0</span>  <span class="token number">0</span>
<span class="token number">0</span>  <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">2434416</span>  <span class="token number">15508</span> <span class="token number">1132464</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>  <span class="token number">143</span>  <span class="token number">191</span>  <span class="token number">0</span>  <span class="token number">0</span> <span class="token number">100</span>  <span class="token number">0</span>  <span class="token number">0</span>
<span class="token number">0</span>  <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">2434416</span>  <span class="token number">15508</span> <span class="token number">1132464</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>   <span class="token number">87</span>  <span class="token number">113</span>  <span class="token number">0</span>  <span class="token number">0</span> <span class="token number">100</span>  <span class="token number">0</span>  <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面是各字段的说明。</p>
<p>进程（procs）字段统计的数量越多，代表系统越繁忙：</p>
<table>
<thead>
<tr>
<th>标志</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>就绪或正在运行的进程数</td>
</tr>
<tr>
<td>b</td>
<td>不可中断的睡眠进程数</td>
</tr>
</tbody>
</table>
<p>内存字段（memory）：</p>
<table>
<thead>
<tr>
<th>标志</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>swpd</td>
<td>使用的虚拟内存大小（单位 KB）</td>
</tr>
<tr>
<td>free</td>
<td>空闲内存大小（单位 KB）</td>
</tr>
<tr>
<td>buff</td>
<td>用于缓存的内存大小（单位 KB）</td>
</tr>
<tr>
<td>cache</td>
<td>用于高速缓存的内存大小（单位 KB）</td>
</tr>
</tbody>
</table>
<p>内存交换空间（swap）数值越大代表内存不太够用：</p>
<table>
<thead>
<tr>
<th>标志</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>si</td>
<td>从磁盘中交换到内存的块数量</td>
</tr>
<tr>
<td>so</td>
<td>从内存中交换到磁盘的块数量</td>
</tr>
</tbody>
</table>
<p>磁盘读写（io）数值越高代表磁盘越忙碌：</p>
<table>
<thead>
<tr>
<th>标志</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>bi</td>
<td>从块设备（磁盘）读取的块数</td>
</tr>
<tr>
<td>bo</td>
<td>写入到块设备（磁盘）的块数</td>
</tr>
</tbody>
</table>
<p>系统（system）项目计数越大，代表系统与接口设备的通信越频繁：</p>
<table>
<thead>
<tr>
<th>标志</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>in</td>
<td>每秒中断次数（包括时钟中断）</td>
</tr>
<tr>
<td>cs</td>
<td>每秒上下文切换次数</td>
</tr>
</tbody>
</table>
<p>CPU 的选项：</p>
<table>
<thead>
<tr>
<th>标志</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>us</td>
<td>用户空间占用 CPU 时间的百分比</td>
</tr>
<tr>
<td>sy</td>
<td>内核空间占用 CPU 时间的百分比</td>
</tr>
<tr>
<td>id</td>
<td>空闲 CPU 时间的百分比</td>
</tr>
<tr>
<td>wa</td>
<td>等待 I/O 操作占用 CPU 时间的百分比</td>
</tr>
<tr>
<td>st</td>
<td>用于运行虚拟机的 CPU 时间的百分比</td>
</tr>
</tbody>
</table>
<p>例如查看磁盘读写状态：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">vmstat</span> <span class="token parameter variable">-d</span>
disk- ------------reads------------ ------------writes----------- -----IO------
       total merged sectors      ms  total merged sectors      ms    cur    sec
sdb    <span class="token number">11640</span>  <span class="token number">23419</span> <span class="token number">1679403</span>    <span class="token number">3097</span>   <span class="token number">3013</span> <span class="token number">143194</span>  <span class="token number">714969</span>    <span class="token number">2367</span>      <span class="token number">0</span>      <span class="token number">2</span>
sda    <span class="token number">13672</span>     <span class="token number">28</span> <span class="token number">1219051</span>    <span class="token number">6501</span>  <span class="token number">22246</span>   <span class="token number">3488</span> <span class="token number">1921401</span>   <span class="token number">17945</span>      <span class="token number">0</span>     <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="查询内存中内容"><a class="markdownIt-Anchor" href="#查询内存中内容"></a> 查询内存中内容</h1>
<p>内存中的数据都写入到目录<code>/proc/*</code>中（不占用实际硬盘空间）。查看目录<code>/proc</code>中的内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ ll /proc <span class="token operator">|</span> <span class="token function">head</span> 
total <span class="token number">0</span>
dr-xr-xr-x.  <span class="token number">9</span> root    root                  <span class="token number">0</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:08 <span class="token number">1</span>
dr-xr-xr-x.  <span class="token number">9</span> root    root                  <span class="token number">0</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:08 <span class="token number">10</span>
dr-xr-xr-x.  <span class="token number">9</span> root    root                  <span class="token number">0</span> Sep <span class="token number">14</span> 00:31 <span class="token number">10025</span>
dr-xr-xr-x.  <span class="token number">9</span> root    root                  <span class="token number">0</span> Sep <span class="token number">14</span> 00:31 <span class="token number">10026</span>
dr-xr-xr-x.  <span class="token number">9</span> root    root                  <span class="token number">0</span> Sep <span class="token number">14</span> 00:31 <span class="token number">10139</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，各个进程的 PID 都是以目录的形式存在于 <code>/proc</code> 中。</p>
<p>进一步查看进程在内存中写入的内容，以 PID=1 的 init 程序为例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ ll /proc/1
total <span class="token number">0</span>
dr-xr-xr-x. <span class="token number">2</span> root root <span class="token number">0</span> Sep <span class="token number">10</span> 01:44 attr
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">0</span> Sep <span class="token number">10</span> 01:44 autogroup
-r--------. <span class="token number">1</span> root root <span class="token number">0</span> Sep <span class="token number">10</span> 01:44 auxv
-r--r--r--. <span class="token number">1</span> root root <span class="token number">0</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:08 cgroup
--w-------. <span class="token number">1</span> root root <span class="token number">0</span> Sep <span class="token number">10</span> 01:44 clear_refs
-r--r--r--. <span class="token number">1</span> root root <span class="token number">0</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:08 cmdline
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">0</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:08 <span class="token function">comm</span>
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">0</span> Sep <span class="token number">10</span> 01:44 coredump_filter
-r--r--r--. <span class="token number">1</span> root root <span class="token number">0</span> Sep <span class="token number">10</span> 01:44 cpuset
lrwxrwxrwx. <span class="token number">1</span> root root <span class="token number">0</span> Sep <span class="token number">10</span> 01:44 cwd -<span class="token operator">></span> /
-r--------. <span class="token number">1</span> root root <span class="token number">0</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:08 environ
lrwxrwxrwx. <span class="token number">1</span> root root <span class="token number">0</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:08 exe -<span class="token operator">></span> /usr/lib/systemd/systemd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中 <code>cmdline</code> 定义了 init 被启动的命令串，<code>environ</code> 定义了这个进程的环境变量。</p>
<p>以下是在 <code>/proc</code> 目录下常见文件的内容：</p>
<table>
<thead>
<tr>
<th><strong>文件名</strong></th>
<th><strong>文件内容</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>cmdline</td>
<td>加载 kernel 时所执行的相关参数</td>
</tr>
<tr>
<td>cpuinfo</td>
<td>本机 CPU 的相关信息，包括频率、类型和运算功能等</td>
</tr>
<tr>
<td>devices</td>
<td>记录各个主要设备的主要设备代号，与 mknod 有关</td>
</tr>
<tr>
<td>filesystems</td>
<td>目前系统已经加载的文件系统</td>
</tr>
<tr>
<td>interrupts</td>
<td>目前系统上的 IRQ 分配状态</td>
</tr>
<tr>
<td>ioports</td>
<td>目前系统上各个设备所配置的 I/O 地址</td>
</tr>
<tr>
<td>kcore</td>
<td>内存的大小</td>
</tr>
<tr>
<td>loadavg</td>
<td>系统负载情况</td>
</tr>
<tr>
<td>meminfo</td>
<td>内存信息</td>
</tr>
<tr>
<td>modules</td>
<td>已经加载的模块列表，主要是驱动程序</td>
</tr>
<tr>
<td>mounts</td>
<td>系统已挂载的数据</td>
</tr>
<tr>
<td>swaps</td>
<td>系统加载的内存使用的分区记录</td>
</tr>
<tr>
<td>partitions</td>
<td>记录系统分区信息</td>
</tr>
<tr>
<td>pci</td>
<td>在 PCI 总线上每个设备的详细情况，可用 lspci 查询</td>
</tr>
<tr>
<td>uptime</td>
<td>系统运行时长记录</td>
</tr>
<tr>
<td>version</td>
<td>内核版本</td>
</tr>
<tr>
<td>bus/*</td>
<td>一些总线设备，包括 USB 记录设备</td>
</tr>
</tbody>
</table>
<p>对 <code>/proc</code> 下的文件进行修改后，修改将立即生效。</p>
<h1 id="查询使用中的文件"><a class="markdownIt-Anchor" href="#查询使用中的文件"></a> 查询使用中的文件</h1>
<p>查询文件正在被什么程序使用可以使用 <code>fuser</code>命令查询（使用 yum install psmisc 安装）。可用参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-u</td>
<td>列出进程所有者</td>
</tr>
<tr>
<td>-m</td>
<td>列出占用文件系统的进程</td>
</tr>
<tr>
<td>-v</td>
<td>列出文件与程序还有命令的完整相关性</td>
</tr>
<tr>
<td>-k</td>
<td>找出使用文件的 PID，并试图强制结束程序</td>
</tr>
<tr>
<td>-i</td>
<td>结束程序前询问用户</td>
</tr>
</tbody>
</table>
<p>例如找到当前目录正在使用它的 PID/所属账户/权限：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">fuser</span> <span class="token parameter variable">-uv</span> <span class="token builtin class-name">.</span>
            <span class="token environment constant">USER</span>      PID   ACCESS COMMAND
/root/bin:  root      <span class="token number">40090</span> <span class="token punctuation">..</span>c<span class="token punctuation">..</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span>bash
            root      <span class="token number">40855</span> <span class="token punctuation">..</span>c<span class="token punctuation">..</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span>tail<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果显示有两个 PID 为 40090 和 40855 的程序在使用该目录，程序所属为 root，命令是 <code>bash</code> 和 <code>tail</code>。可以直接使用<code>fuser -k</code>命令来终止使用该目录的进程：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span>$ <span class="token function">fuser</span> <span class="token parameter variable">-k</span> /root/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>ACCESS 选项代表的意义为：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>c</td>
<td>此进程在当前目录下（非子目录）</td>
</tr>
<tr>
<td>e</td>
<td>可被触发为执行状态</td>
</tr>
<tr>
<td>f</td>
<td>是一个被打开的文件</td>
</tr>
<tr>
<td>r</td>
<td>代表顶层目录</td>
</tr>
<tr>
<td>F</td>
<td>该文件被打开了，不过在等待回应中</td>
</tr>
<tr>
<td>m</td>
<td>可能为分享的动态函数库</td>
</tr>
</tbody>
</table>
<h1 id="查询程序打开的文件"><a class="markdownIt-Anchor" href="#查询程序打开的文件"></a> 查询程序打开的文件</h1>
<p>要查询某个程序正在使用的文件，可以使用 <code>lsof</code> 命令。命令参数如下：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>多项数据需要同时成立才显示出结果时</td>
</tr>
<tr>
<td>-p</td>
<td>指定进程 PID</td>
</tr>
<tr>
<td>-U</td>
<td>仅列出 Unix like 系统的 socket 文件类型</td>
</tr>
<tr>
<td>-u</td>
<td>接 username，列出该用户相关进程所打开的文件</td>
</tr>
<tr>
<td>+d</td>
<td>接目录，找出某个目录下面已经被打开的文件</td>
</tr>
</tbody>
</table>
<p>例如，列出关于 root 的所有进程打开的 socket 文件（-a 表示逻辑与，限定了必须为 root 用户和 socket 文件）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">lsof</span> <span class="token parameter variable">-u</span> root <span class="token parameter variable">-a</span> <span class="token parameter variable">-U</span>
COMMAND     PID <span class="token environment constant">USER</span>   FD   TYPE             DEVICE SIZE/OFF   NODE NAME
systemd       <span class="token number">1</span> root   12u  unix 0xffff9ac438950000      0t0  <span class="token number">20565</span> /run/systemd/private
systemd       <span class="token number">1</span> root   13u  unix 0xffff9ac438b14400      0t0 <span class="token number">605204</span> socket
systemd       <span class="token number">1</span> root   18u  unix 0xffff9ac4b5ec8440      0t0     <span class="token number">29</span> /run/systemd/notify<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例如，查询属于 root 的 <code>tail</code> 命令所打开的文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">lsof</span> <span class="token parameter variable">-u</span> root <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">tail</span>
<span class="token function">tail</span>       <span class="token number">40855</span> root  cwd       DIR      <span class="token number">253,0</span>       <span class="token number">246</span>   <span class="token number">33607964</span> /root/bin
<span class="token function">tail</span>       <span class="token number">40855</span> root  rtd       DIR      <span class="token number">253,0</span>       <span class="token number">253</span>         <span class="token number">64</span> /
<span class="token function">tail</span>       <span class="token number">40855</span> root  txt       REG      <span class="token number">253,0</span>     <span class="token number">66816</span>   <span class="token number">50333754</span> /usr/bin/tail
<span class="token function">tail</span>       <span class="token number">40855</span> root    0w      CHR        <span class="token number">1,3</span>       0t0       <span class="token number">1028</span> /dev/null
<span class="token function">tail</span>       <span class="token number">40855</span> root    1w      REG      <span class="token number">253,0</span>       <span class="token number">236</span>   <span class="token number">33607951</span> /root/bin/nomarl.log
<span class="token function">tail</span>       <span class="token number">40855</span> root    2w      REG      <span class="token number">253,0</span>        <span class="token number">54</span>   <span class="token number">33607959</span> /root/bin/error.log
<span class="token function">tail</span>       <span class="token number">40855</span> root    3r      REG      <span class="token number">253,0</span>       <span class="token number">236</span>   <span class="token number">33607979</span> /root/bin/sh01.sh
<span class="token function">tail</span>       <span class="token number">40855</span> root    4r  a_inode      <span class="token number">0,10</span>         <span class="token number">0</span>       <span class="token number">8534</span> inotify<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>显示结果字段含义如下：</p>
<ul>
<li>COMMAND：正在运行的命令名前 9 个字符。</li>
<li>PID：进程的 PID。</li>
<li>USER：进程属主的登录名。</li>
<li>FD：文件描述符号以及访问类型。r 读，w 写，u 代表读写。</li>
<li>TYPE：文件的类型。CHR 字符型，BLK 块型，DIR 目录，REG 代表常规文件。</li>
<li>DEVICE：设备的设备号。</li>
<li>SIZE：文件的大小。</li>
<li>NODE：本地文件的 inode 号。</li>
<li>NAME：文件名。</li>
</ul>
<h1 id="查询硬件信息"><a class="markdownIt-Anchor" href="#查询硬件信息"></a> 查询硬件信息</h1>
<p>使用 <code>dmidecode</code> 命令可以查询当前计算机的硬件配置。主要查询的项目有：1（主板信息）、4（CPU 信息）、9（插槽信息）、17（内存信息）。例如查看 CPU 信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ dmidecode <span class="token parameter variable">-t</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">50</span>
<span class="token comment"># dmidecode 3.2</span>
Getting SMBIOS data from sysfs.
SMBIOS <span class="token number">2.7</span> present.

Handle 0x0004, DMI <span class="token builtin class-name">type</span> <span class="token number">4</span>, <span class="token number">42</span> bytes
Processor Information
        Socket Designation: CPU <span class="token comment">#000</span>
        Type: Central Processor
        Family: Unknown
        Manufacturer: AuthenticAMD
        ID: <span class="token number">82</span> 0F <span class="token number">80</span> 00 FF FB 8B <span class="token number">17</span>
        Version: AMD Ryzen Threadripper 2990WX <span class="token number">32</span>-Core Processor
        Voltage: <span class="token number">3.3</span> V
        External Clock: Unknown
        Max Speed: <span class="token number">30000</span> MHz
        Current Speed: <span class="token number">3200</span> MHz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以使用<code>dmesg</code>来输出所有的内核运行时的记录日志：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">dmesg</span> <span class="token operator">|</span> <span class="token function">less</span>
<span class="token punctuation">[</span>    <span class="token number">0.000000</span><span class="token punctuation">]</span> Initializing cgroup subsys cpuset
<span class="token punctuation">[</span>    <span class="token number">0.000000</span><span class="token punctuation">]</span> Initializing cgroup subsys cpu
<span class="token punctuation">[</span>    <span class="token number">0.000000</span><span class="token punctuation">]</span> Initializing cgroup subsys cpuacct<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>配合 <code>grep ATA</code>过滤掉无关的信息，查询 SATA 接口硬盘信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@s55 ~<span class="token punctuation">]</span>$ <span class="token function">dmesg</span> <span class="token operator">|</span> <span class="token function">grep</span> ATA
<span class="token punctuation">[</span>    <span class="token number">3.367870</span><span class="token punctuation">]</span> ata6.00: ATA-10: HGST HUS722T1TALA604, RAGNWA09, max UDMA/133
<span class="token punctuation">[</span>    <span class="token number">3.369145</span><span class="token punctuation">]</span> ata5.00: ATA-10: HGST HUS722T1TALA604, RAGNWA09, max UDMA/133<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>以下是一些常用的 Linux 系统硬件信息查询命令：</p>
<ul>
<li><code>gdisk</code>/<code>fdisk</code>：查询分区信息。</li>
<li><code>vmstat</code>：分析系统状态。</li>
<li><code>lscpu</code>：查询 CPU 相关信息。</li>
<li><code>lspci</code>：查询 PCI 接口设备。</li>
<li><code>lsusb</code>：查询 USB 接口状态。</li>
<li><code>iostat</code>：查询系统 I/O 状态。</li>
<li><code>smartctl</code>：查询硬盘 S.M.A.R.T 信息。</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>1.基本操作</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 进程查询与管理</title>
    <url>/1804980384/</url>
    <content><![CDATA[<h1 id="进程查看命令"><a class="markdownIt-Anchor" href="#进程查看命令"></a> 进程查看命令</h1>
<p>查询系统上正在运行的进程，可以使用 <code>ps</code> 命令。常用参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-A</td>
<td>显示所有进程</td>
</tr>
<tr>
<td>-a</td>
<td>不与终端有关的所有进程</td>
</tr>
<tr>
<td>-u</td>
<td>与有效用户相关的进程</td>
</tr>
<tr>
<td>x</td>
<td>通常与 a 参数一起使用，可列出较完整信息</td>
</tr>
<tr>
<td>l</td>
<td>将 PID 信息较详细列出来</td>
</tr>
<tr>
<td>j</td>
<td>工作的格式（jobs format）</td>
</tr>
<tr>
<td>-f</td>
<td>生成更为完整的输出</td>
</tr>
</tbody>
</table>
<p>要查询与当前登录会话相关的 PID 和相关信息，可以使用 <code>ps -l</code> 命令，如下所示：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">ps</span> <span class="token parameter variable">-l</span>
F S   <span class="token environment constant">UID</span>    PID   <span class="token environment constant">PPID</span>  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD
<span class="token number">4</span> S     <span class="token number">0</span>  <span class="token number">40090</span>  <span class="token number">40085</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> - <span class="token number">28919</span> do_wai pts/0    00:00:00 <span class="token function">bash</span>
<span class="token number">0</span> S     <span class="token number">0</span>  <span class="token number">40855</span>  <span class="token number">40090</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> - <span class="token number">27024</span> wait_w pts/0    00:00:00 <span class="token function">tail</span>
<span class="token number">0</span> R     <span class="token number">0</span>  <span class="token number">42025</span>  <span class="token number">40090</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> - <span class="token number">38332</span> -      pts/0    00:00:00 <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果仅显示与当前操作环境（bash）相关的进程。表格中各选项的含义如下：</p>
<table>
<thead>
<tr>
<th><strong>表头</strong></th>
<th><strong>例值</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>F</td>
<td>4</td>
<td>4：表示此进程权限为 root；<br />1：表示此子进程仅可进行复制（fork）而不能执行（exec）。</td>
</tr>
<tr>
<td>S</td>
<td>S</td>
<td>R（Runing）：程序正在运行；<br />I（Idle）：空闲，超过 20 秒的睡眠；<br />S（Sleep）：进程目前正在睡眠状态（idle），但可被唤醒（signal）；<br />D：不可被唤醒的睡眠状态，可能在等到 I/O 的情况；<br />T：停止状态，可能在工作控制（后台暂停）或除错（traced）；<br />Z（Zombie）：僵尸进程，进程已经被终止但无法被移出内存。</td>
</tr>
<tr>
<td>UID/PID/PPID</td>
<td>0/40090/40085</td>
<td>代表进程被该 UID 所拥有/进程 PID/父进程 PID。</td>
</tr>
<tr>
<td>C</td>
<td>0</td>
<td>代表 CPU 使用率，单位是百分比。</td>
</tr>
<tr>
<td>PRI/NI</td>
<td>80/0</td>
<td>Priority/Nice 的缩写，代表进程执行优先级，越小优先级越高。</td>
</tr>
<tr>
<td>ADDR</td>
<td>-</td>
<td>指出该进程在内存的虚拟地址，running 中的进程显示-。</td>
</tr>
<tr>
<td>SZ</td>
<td>28919</td>
<td>代表此进程占用多少物理内存。</td>
</tr>
<tr>
<td>WCHAN</td>
<td>do_wai</td>
<td>表示目前进程是否运行在，运行中显示-。</td>
</tr>
<tr>
<td>TTY</td>
<td>pts/0</td>
<td>用户终端位置，远程登录使用动态终端接口(pts/n)，守护进程显示?。</td>
</tr>
<tr>
<td>TIME</td>
<td>00:00:00</td>
<td>使用掉的 CPU 时间，指进程实际花费 CPU 运行的时间。</td>
</tr>
<tr>
<td>CMD</td>
<td>bash</td>
<td>command 的缩写，正在执行的命令名称。</td>
</tr>
</tbody>
</table>
<p>另外，如果看到的 <code>bash</code> 状态为 S，则是因为它触发了 <code>ps</code>，此时 <code>ps</code> 状态为 R。</p>
<p>查看系统所有进程可以使用 <code>ps aux</code> 命令组合:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">'1~17p'</span>
<span class="token environment constant">USER</span>        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         <span class="token number">21</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>      <span class="token number">0</span>     <span class="token number">0</span> ?        S<span class="token operator">&lt;</span>   Sep09   <span class="token number">0</span>:00 <span class="token punctuation">[</span>kworker/2:0H<span class="token punctuation">]</span>
root        <span class="token number">788</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>      <span class="token number">0</span>     <span class="token number">0</span> ?        S<span class="token operator">&lt;</span>   Sep09   <span class="token number">0</span>:00 <span class="token punctuation">[</span>xfs-log/sda1<span class="token punctuation">]</span>
root       <span class="token number">1131</span>  <span class="token number">0.0</span>  <span class="token number">0.1</span> <span class="token number">222740</span>  <span class="token number">5640</span> ?        Ssl  Sep09   <span class="token number">0</span>:19 /usr/sbin/rsyslogd <span class="token parameter variable">-n</span>
root      <span class="token number">11078</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>      <span class="token number">0</span>     <span class="token number">0</span> ?        S<span class="token operator">&lt;</span>   Sep13   <span class="token number">0</span>:00 <span class="token punctuation">[</span>bioset<span class="token punctuation">]</span>
root      <span class="token number">40855</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span> <span class="token number">108096</span>   <span class="token number">616</span> pts/0    S    04:07   <span class="token number">0</span>:00 <span class="token function">tail</span> <span class="token parameter variable">-f</span> sh01.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用 BSD 选项显示结果表头说明如下:</p>
<table>
<thead>
<tr>
<th><strong>表头</strong></th>
<th><strong>例值</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>USER</td>
<td>root</td>
<td>该进程所属账号。</td>
</tr>
<tr>
<td>PID</td>
<td>40855</td>
<td>进程标识符。</td>
</tr>
<tr>
<td>%CPU</td>
<td>0.0</td>
<td>进程使用掉的 CPU 资源百分比。</td>
</tr>
<tr>
<td>%MEM</td>
<td>0.1</td>
<td>进程所占用的物理内存百分比。</td>
</tr>
<tr>
<td>VSZ</td>
<td>108096</td>
<td>进程使用掉的虚拟内存量（KB）。</td>
</tr>
<tr>
<td>RSS</td>
<td>616</td>
<td>该进程占用的固定内存量（KB）。</td>
</tr>
<tr>
<td>TTY</td>
<td>pts/0</td>
<td>该进程运行的终端，和终端无关显示？</td>
</tr>
<tr>
<td>STAT</td>
<td>Ssl</td>
<td><strong>进程主状态</strong>：<br />O（正在运行）R（可运行）/S（休眠）/D（挂起）/T（停止）/Z（僵尸进程）<br /><strong>进程副状态</strong>：<br />&lt;（运行在高优先级上）/N（运行在低优先级上）/L（该进程所有页面锁定在内存中）/s（该进程是控制进程）/l（该进程是多线程）/+（该进程运行在前台）。</td>
</tr>
<tr>
<td>START</td>
<td>04:07</td>
<td>该进程被触发的启动时间。</td>
</tr>
<tr>
<td>TIME</td>
<td>0:19</td>
<td>该进程被触发启动的时间。</td>
</tr>
<tr>
<td>COMMAND</td>
<td>tail -f</td>
<td>该进程的实际命令。</td>
</tr>
</tbody>
</table>
<p>想要更直观展示进程间的关系，可以使用命令组合<code>ps axjf</code>将结果用进程树显示:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">ps</span> axjf
  <span class="token environment constant">PPID</span>    PID   PGID    SID TTY       TPGID STAT   <span class="token environment constant">UID</span>   TIME COMMAND
     <span class="token number">0</span>      <span class="token number">2</span>      <span class="token number">0</span>      <span class="token number">0</span> ?            <span class="token parameter variable">-1</span> S        <span class="token number">0</span>   <span class="token number">0</span>:00 <span class="token punctuation">[</span>kthreadd<span class="token punctuation">]</span>
     <span class="token number">1</span>    <span class="token number">897</span>    <span class="token number">897</span>    <span class="token number">897</span> ?            <span class="token parameter variable">-1</span> Ss       <span class="token number">0</span>   <span class="token number">0</span>:00 login -- root
   <span class="token number">897</span> <span class="token number">104660</span> <span class="token number">104660</span> <span class="token number">104660</span> tty1     <span class="token number">104660</span> Ss+      <span class="token number">0</span>   <span class="token number">0</span>:00  <span class="token punctuation">\</span>_ <span class="token parameter variable">-bash</span>
     <span class="token number">1</span>   <span class="token number">1130</span>   <span class="token number">1130</span>   <span class="token number">1130</span> ?            <span class="token parameter variable">-1</span> Ss       <span class="token number">0</span>   <span class="token number">0</span>:00 /usr/sbin/sshd <span class="token parameter variable">-D</span>
  <span class="token number">1130</span>  <span class="token number">40085</span>  <span class="token number">40085</span>  <span class="token number">40085</span> ?            <span class="token parameter variable">-1</span> Ss       <span class="token number">0</span>   <span class="token number">0</span>:00  <span class="token punctuation">\</span>_ sshd: root@pts/0
<span class="token number">40085</span>  <span class="token number">40090</span>  <span class="token number">40090</span>  <span class="token number">40090</span> pts/0     <span class="token number">43864</span> Ss       <span class="token number">0</span>   <span class="token number">0</span>:00      <span class="token punctuation">\</span>_ <span class="token parameter variable">-bash</span>
<span class="token number">40090</span>  <span class="token number">40855</span>  <span class="token number">40855</span>  <span class="token number">40090</span> pts/0     <span class="token number">43864</span> S        <span class="token number">0</span>   <span class="token number">0</span>:00          <span class="token punctuation">\</span>_ <span class="token function">tail</span> <span class="token parameter variable">-f</span> sh01.sh
<span class="token number">40090</span>  <span class="token number">43864</span>  <span class="token number">43864</span>  <span class="token number">40090</span> pts/0     <span class="token number">43864</span> R+       <span class="token number">0</span>   <span class="token number">0</span>:00          <span class="token punctuation">\</span>_ <span class="token function">ps</span> axjf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>更方便展示进程树用<code>pstree</code>命令:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ pstree <span class="token parameter variable">-Apu</span>
systemd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>-+-NetworkManager<span class="token punctuation">(</span><span class="token number">881</span><span class="token punctuation">)</span>-+-<span class="token punctuation">&#123;</span>NetworkManager<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">905</span><span class="token punctuation">)</span>
           <span class="token operator">|</span>                     <span class="token variable"><span class="token variable">`</span>-<span class="token punctuation">&#123;</span>NetworkManager<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">909</span><span class="token punctuation">)</span>
           <span class="token operator">|</span>-VGAuthService<span class="token punctuation">(</span><span class="token number">867</span><span class="token punctuation">)</span>
           <span class="token operator">|</span>-atd<span class="token punctuation">(</span><span class="token number">27679</span><span class="token punctuation">)</span>
           <span class="token operator">|</span>-auditd<span class="token punctuation">(</span><span class="token number">843</span><span class="token punctuation">)</span>-+-audispd<span class="token punctuation">(</span><span class="token number">62781</span><span class="token punctuation">)</span>-+-sedispatch<span class="token punctuation">(</span><span class="token number">62782</span><span class="token punctuation">)</span>
           <span class="token operator">|</span>             <span class="token operator">|</span>                <span class="token variable">`</span></span>-<span class="token punctuation">&#123;</span>audispd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">62783</span><span class="token punctuation">)</span>
           <span class="token operator">|</span>             `-<span class="token punctuation">&#123;</span>auditd<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">844</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="进程查看工具"><a class="markdownIt-Anchor" href="#进程查看工具"></a> 进程查看工具</h1>
<p>使用<code>top</code>可以持续监测进程的运行状态。在启动<code>top</code>时可以使用以下参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-d</code></td>
<td>定义界面刷新时间，默认为 5 秒</td>
</tr>
<tr>
<td><code>-b</code></td>
<td>以批次的方式执行<code>top</code>，通常搭配重定向将批处理结果输出到文件</td>
</tr>
<tr>
<td><code>-n</code></td>
<td>与<code>-b</code>搭配，设定刷新的总次数</td>
</tr>
<tr>
<td><code>-p</code></td>
<td>指定某个 PID 进行监测</td>
</tr>
</tbody>
</table>
<p>在 top 程序中常用的交互按键如下:</p>
<table>
<thead>
<tr>
<th>按键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>?</code></td>
<td>显示在<code>top</code>中可以输入的按键命令</td>
</tr>
<tr>
<td><code>P</code></td>
<td>以 CPU 使用率排序</td>
</tr>
<tr>
<td><code>M</code></td>
<td>以内存使用量排序</td>
</tr>
<tr>
<td><code>N</code></td>
<td>以 PID 排序</td>
</tr>
<tr>
<td><code>T</code></td>
<td>由该进程使用的 CPU 时间累积(TIME+)排序</td>
</tr>
<tr>
<td><code>k</code></td>
<td>给某个 PID 发送一个信号，相当于<code>kill</code>命令</td>
</tr>
<tr>
<td><code>r</code></td>
<td>给某个 PID 重新分配一个<code>nice</code>值</td>
</tr>
<tr>
<td><code>f</code></td>
<td>设置排序依据</td>
</tr>
<tr>
<td><code>q</code></td>
<td>退出<code>top</code></td>
</tr>
</tbody>
</table>
<p>进入<code>top</code>界面查看，按 CPU 使用率排序是默认选项：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">top</span>
<span class="token function">top</span> - 05:47:44 up <span class="token number">4</span> days, <span class="token number">14</span>:38,  <span class="token number">2</span> users,  load average: <span class="token number">0.00</span>, <span class="token number">0.01</span>, <span class="token number">0.05</span>
Tasks: <span class="token number">229</span> total,   <span class="token number">2</span> running, <span class="token number">227</span> sleeping,   <span class="token number">0</span> stopped,   <span class="token number">0</span> zombie
%Cpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:  <span class="token number">0.0</span> us,  <span class="token number">0.0</span> sy,  <span class="token number">0.0</span> ni,100.0 id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> st
KiB Mem <span class="token builtin class-name">:</span>  <span class="token number">3861280</span> total,  <span class="token number">2434616</span> free,   <span class="token number">278880</span> used,  <span class="token number">1147784</span> buff/cache
KiB Swap:  <span class="token number">2097148</span> total,  <span class="token number">2097148</span> free,        <span class="token number">0</span> used.  <span class="token number">3277072</span> avail Mem 

   PID <span class="token environment constant">USER</span>      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
     <span class="token number">1</span> root      <span class="token number">20</span>   <span class="token number">0</span>  <span class="token number">193840</span>   <span class="token number">6964</span>   <span class="token number">4200</span> S   <span class="token number">0.3</span>  <span class="token number">0.2</span>   <span class="token number">1</span>:49.89 systemd
 <span class="token number">10771</span> root      <span class="token number">20</span>   <span class="token number">0</span>       <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span> S   <span class="token number">0.3</span>  <span class="token number">0.0</span>   <span class="token number">0</span>:51.26 kworker/3:0
 <span class="token number">46205</span> root      <span class="token number">20</span>   <span class="token number">0</span>  <span class="token number">162104</span>   <span class="token number">2340</span>   <span class="token number">1576</span> R   <span class="token number">0.3</span>  <span class="token number">0.1</span>   <span class="token number">0</span>:00.02 <span class="token function">top</span>
     <span class="token number">2</span> root      <span class="token number">20</span>   <span class="token number">0</span>       <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span> S   <span class="token number">0.0</span>  <span class="token number">0.0</span>   <span class="token number">0</span>:00.11 kthreadd
     <span class="token number">4</span> root       <span class="token number">0</span> <span class="token parameter variable">-20</span>       <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span> S   <span class="token number">0.0</span>  <span class="token number">0.0</span>   <span class="token number">0</span>:00.00 kworker/0:0H
     <span class="token number">6</span> root      <span class="token number">20</span>   <span class="token number">0</span>       <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span> S   <span class="token number">0.0</span>  <span class="token number">0.0</span>   <span class="token number">0</span>:00.01 ksoftirqd/0  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>顶部总共有五行，每个参数用逗号隔开。用上例做说明详细定义。</p>
<p>第一行（top）：</p>
<table>
<thead>
<tr>
<th><strong>值</strong></th>
<th><strong>定义</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>05:47:44 up 4 days, 14:38</td>
<td>当前时间和系统运行时间 4 天 14 小时 38 分钟</td>
</tr>
<tr>
<td>2 users</td>
<td>已登录系统的用户数</td>
</tr>
<tr>
<td>load average: 0.00, 0.01, 0.05</td>
<td>系统在 1 分钟、5 分钟和 15 分钟内的平均工作负载，多核处理器需要除以核心数</td>
</tr>
</tbody>
</table>
<p>第二行（Tasks）：</p>
<table>
<thead>
<tr>
<th><strong>值</strong></th>
<th><strong>定义</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>229 total</td>
<td>当前进程总数</td>
</tr>
<tr>
<td>2 running, 227 sleeping, 0 stopped, 0 zombie</td>
<td>运行状态为运行中（r）、睡眠中（s）、停止（t）和僵尸（z）的进程树数量</td>
</tr>
</tbody>
</table>
<p>第三行（%Cpu(s)）多核处理器可以使用数字键 1 来切换不同 CPU 的负载率：</p>
<table>
<thead>
<tr>
<th><strong>值</strong></th>
<th><strong>定义</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>0.0 us</td>
<td>用户空间占用 CPU</td>
</tr>
<tr>
<td>0.1 sy</td>
<td>内核空间占用 CPU</td>
</tr>
<tr>
<td>0.0 ni</td>
<td>用户进程空间内改变过优先级的进程占用 CPU 百分比</td>
</tr>
<tr>
<td>99.9 id</td>
<td>空闲 CPU 百分比</td>
</tr>
<tr>
<td>0.0 wa</td>
<td>等待输入输出的 CPU 时间百分比，磁盘读写速度造成的卡顿体现在此</td>
</tr>
<tr>
<td>0.0 hi</td>
<td>硬件 CPU 中断占用百分比</td>
</tr>
<tr>
<td>0.0 si</td>
<td>软中断占用百分比</td>
</tr>
<tr>
<td>0.0 st</td>
<td>虚拟机占用百分比</td>
</tr>
</tbody>
</table>
<p>第四行（KiB Mem）：</p>
<table>
<thead>
<tr>
<th><strong>值</strong></th>
<th><strong>定义</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>3861280 total</td>
<td>物理内存总量</td>
</tr>
<tr>
<td>2434616 free</td>
<td>空闲内存总量</td>
</tr>
<tr>
<td>278880 used</td>
<td>使用中的物理内存总量</td>
</tr>
<tr>
<td>1147784 buff/cache</td>
<td>作为内核缓存的内存量</td>
</tr>
</tbody>
</table>
<p>第五行（KiB Swap）：</p>
<table>
<thead>
<tr>
<th><strong>值</strong></th>
<th><strong>定义</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>2097148 total</td>
<td>交换空间总量</td>
</tr>
<tr>
<td>2097148 free</td>
<td>交换空间空闲量</td>
</tr>
<tr>
<td>0 used</td>
<td>交换空间使用量</td>
</tr>
<tr>
<td>3277072 avail Mem</td>
<td>可用内存</td>
</tr>
</tbody>
</table>
<h1 id="进程管理"><a class="markdownIt-Anchor" href="#进程管理"></a> 进程管理</h1>
<p>使用 <code>kill</code> 命令可以将 <code>signal</code> 传送给某个工作或 <code>PID</code>：<code>kill -signal PID</code></p>
<p><code>kill</code> 参数可使用的信号(<code>signal</code>)能用 <code>kill -l</code> 查询，常用的有：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-1</td>
<td>重新读取一次参数的配置文件，类似<code>reload</code>重新启动</td>
</tr>
<tr>
<td>-2</td>
<td>中断信号，与[Ctrl]+c 发出的一样</td>
</tr>
<tr>
<td>-9</td>
<td>立刻强制中断一个进程运行</td>
</tr>
<tr>
<td>-15</td>
<td>以正常的程序方式终止进程(默认信号)</td>
</tr>
<tr>
<td>-19</td>
<td>暂停进程，与[Ctrl]+z 发出的一样</td>
</tr>
</tbody>
</table>
<p><code>kill</code>的目标可以是<code>PID</code>（直接输入数字）也可以是后台工作号码(<code>%n</code>)。例如将后台第 3 个任务终止：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">kill</span> %2 <span class="token punctuation">;</span> <span class="token function">jobs</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>+  Stopped                 <span class="token function">tail</span> <span class="token parameter variable">-f</span> root1.txt
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>   Running                 <span class="token function">tail</span> <span class="token parameter variable">-f</span> root.txt <span class="token operator">&amp;</span>
<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>-  Running                 <span class="token function">tail</span> <span class="token parameter variable">-f</span> list_error.txt <span class="token operator">&amp;</span>
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">kill</span> %2 <span class="token punctuation">;</span> <span class="token function">jobs</span>
-bash: kill: <span class="token punctuation">(</span><span class="token number">37698</span><span class="token punctuation">)</span> - No such process
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>+  Stopped                 <span class="token function">tail</span> <span class="token parameter variable">-f</span> root1.txt
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>   Terminated              <span class="token function">tail</span> <span class="token parameter variable">-f</span> root.txt
<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>-  Running                 <span class="token function">tail</span> <span class="token parameter variable">-f</span> list_error.txt <span class="token operator">&amp;</span>
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">kill</span> %2 <span class="token punctuation">;</span> <span class="token function">jobs</span>
-bash: kill: %2: no such job
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>+  Stopped                 <span class="token function">tail</span> <span class="token parameter variable">-f</span> root1.txt
<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>-  Running                 <span class="token function">tail</span> <span class="token parameter variable">-f</span> list_error.txt <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到工作状态由<code>Running</code>转为<code>Terminated</code>，最后消失在后台工作列表中。</p>
<p>加入<code>-2</code>发送中断信号：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">kill</span> <span class="token parameter variable">-2</span> %3<span class="token punctuation">;</span><span class="token function">jobs</span>
-bash: kill: <span class="token punctuation">(</span><span class="token number">37916</span><span class="token punctuation">)</span> - No such process
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>+  Stopped                 <span class="token function">tail</span> <span class="token parameter variable">-f</span> root1.txt
<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>-  Interrupt               <span class="token function">tail</span> <span class="token parameter variable">-f</span> list_error.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>工作状态先变为<code>Interrupt</code>，然后再消失。</p>
<p>使用<code>-9</code>强制结束工作：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">kill</span> <span class="token parameter variable">-9</span> %4 <span class="token punctuation">;</span> <span class="token function">jobs</span>
-bash: kill: <span class="token punctuation">(</span><span class="token number">39089</span><span class="token punctuation">)</span> - No such process
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>+  Stopped                 <span class="token function">tail</span> <span class="token parameter variable">-f</span> root1.txt
<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>   Running                 <span class="token function">tail</span> <span class="token parameter variable">-f</span> root.txt <span class="token operator">&amp;</span>
<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>-  Killed                  <span class="token function">tail</span> <span class="token parameter variable">-f</span> root.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>工作状态先变为<code>killed</code>，然后消失。</p>
<p>还可以通过<code>pkill</code>命令来将所有某个命令名称启动的进程全部删除。例如关闭<code>http</code>相关的进程：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span>$ <span class="token function">pkill</span> <span class="token parameter variable">-ec</span> http
httpd killed <span class="token punctuation">(</span>pid <span class="token number">6860</span><span class="token punctuation">)</span>
httpd killed <span class="token punctuation">(</span>pid <span class="token number">6861</span><span class="token punctuation">)</span>
httpd killed <span class="token punctuation">(</span>pid <span class="token number">6862</span><span class="token punctuation">)</span>
httpd killed <span class="token punctuation">(</span>pid <span class="token number">6863</span><span class="token punctuation">)</span>
httpd killed <span class="token punctuation">(</span>pid <span class="token number">6864</span><span class="token punctuation">)</span>
<span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用<code>killall</code>命令也可以达到<code>pkill</code>同样的效果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 thin1<span class="token punctuation">]</span>$ <span class="token function">killall</span> <span class="token parameter variable">-1</span> rsyslogd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="进程优先级"><a class="markdownIt-Anchor" href="#进程优先级"></a> 进程优先级</h1>
<p>程序优先执行序（PRI，Priority），值越低代表执行越优先，PRI 值由内核动态调整，用户无法直接调整 PRI 值。</p>
<p>用户能调整的是<code>nice</code>值，<code>nice</code>值与<code>pri</code>值求和得出程序实际优先值。<code>nice</code>值的设置规则：</p>
<ul>
<li><code>nice</code>值可调整范围为-20~19；</li>
<li><code>root</code>可以随意调整他人进程<code>nice</code>值；</li>
<li>一般用户只能调整自己进程的<code>nice</code>值，范围是 0~19；</li>
</ul>
<p>用<code>nice</code>命令能在程序启动时设置<code>nice</code>值。例如以-10 的<code>nice</code>值启动<code>top</code>:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">nice</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-10</span> <span class="token function">top</span> <span class="token parameter variable">-d</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>对已存在的进程除了可以用<code>top</code>设置外，还能用<code>renice</code>命令重新调整。例如调整<code>bash</code>的<code>nice</code>值为 10：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">renice</span> <span class="token number">10</span> <span class="token number">104660</span>
<span class="token number">104660</span> <span class="token punctuation">(</span>process ID<span class="token punctuation">)</span> old priority <span class="token number">0</span>, new priority <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>修改了<code>bash</code>的<code>nice</code>值后，使用<code>bash</code>运行的命令也会继承这一<code>nice</code>值。也就是<code>nice</code>会由父程序传递给子程序。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>2.系统管理</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 进程前后台切换</title>
    <url>/517799084/</url>
    <content><![CDATA[<h1 id="工作控制"><a class="markdownIt-Anchor" href="#工作控制"></a> 工作控制</h1>
<p>工作控制是一种由内核支持、shell 实现的功能，允许用户同时运行多个进程，其中一个进程在前台（foreground），其他进程在后台（background）运行。用户可以在前台和后台之间切换、挂起和显示进程状态。</p>
<p>将一个进程放入后台运行，该进程必须不需要与用户交互，且不能使用 Ctrl+c 来终止运行。</p>
<h1 id="后台运行"><a class="markdownIt-Anchor" href="#后台运行"></a> 后台运行</h1>
<p>在命令后加入空格和&amp;符号即可将进程放入后台运行，这也被称为异步进程（Asynchronous Process）运行程序：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ <span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> <span class="token number">1</span>.iso <span class="token parameter variable">-C</span> lost+found/ <span class="token operator">&amp;</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">36961</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>中括号内的数字为工作号码（job number），后续数字为工作在系统中的 PID。</p>
<p>后台工作完成后会给前台发信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>+  Done                    <span class="token function">cp</span> <span class="token parameter variable">-i</span> <span class="token number">1</span>.iso <span class="token number">1</span>.copy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>后台运行的工作如果有标准输出（stdout）和标准错误输出（stderr），依然会实时输出到屏幕。可以在执行时将这些数据重定向，以免影响前台工作。</p>
<h1 id="后台暂停"><a class="markdownIt-Anchor" href="#后台暂停"></a> 后台暂停</h1>
<p>使用 Ctrl+z 把当前的前台工作停止放到后台：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">tail</span> <span class="token parameter variable">-f</span> root.txt 
-rw-r--r--.  <span class="token number">1</span> root root         <span class="token number">0</span> Sep <span class="token number">11</span> <span class="token number">10</span>:11 list_error.txt
-rw-r--r--.  <span class="token number">1</span> root root        <span class="token number">54</span> Sep <span class="token number">11</span> <span class="token number">10</span>:16 list.txt
^Z
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>+  Stopped                 <span class="token function">tail</span> <span class="token parameter variable">-f</span> root.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>数字 2 表示这是后台中的第 2 个工作，加号 + 代表最近一个被丢进后台的工作。</p>
<h1 id="后台状态"><a class="markdownIt-Anchor" href="#后台状态"></a> 后台状态</h1>
<p>使用 <code>jobs</code> 命令查看当前后台工作状态。可用参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-l</td>
<td>除了列出 job number 与命令外，同时列出 PID</td>
</tr>
<tr>
<td>-r</td>
<td>仅列出后台运行的工作</td>
</tr>
<tr>
<td>-s</td>
<td>仅列出后台暂停的工作</td>
</tr>
</tbody>
</table>
<p>使用 <code>-l</code> 参数查看当前后台工作状态与工作 PID：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">jobs</span> <span class="token parameter variable">-l</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>- <span class="token number">37687</span> Stopped                 <span class="token function">tail</span> <span class="token parameter variable">-f</span> root1.txt
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>+ <span class="token number">37698</span> Stopped                 <span class="token function">tail</span> <span class="token parameter variable">-f</span> root.txt
<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>  <span class="token number">37916</span> Running                 <span class="token function">tail</span> <span class="token parameter variable">-f</span> list_error.txt <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>加号 <code>+</code> 代表最近一个被放置到后台的工作，减号 <code>-</code> 代表倒数第二个被放置到后台中的工作，其他工作没有符号。</p>
<h1 id="后台转前台"><a class="markdownIt-Anchor" href="#后台转前台"></a> 后台转前台</h1>
<p>使用 <code>fg</code> 命令将后台工作转到前台处理。例如将 3 号工作取出到前台：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">fg</span> %3
<span class="token function">tail</span> <span class="token parameter variable">-f</span> list_error.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="后台转运行"><a class="markdownIt-Anchor" href="#后台转运行"></a> 后台转运行</h1>
<p>使用 <code>bg</code> 命令启动后台暂停中工作为后台运行。例如将后台暂停的 3 号工作转为后台运行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">bg</span> <span class="token variable">$3</span>
<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>+ <span class="token function">tail</span> <span class="token parameter variable">-f</span> list_error.txt <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="脱机运行"><a class="markdownIt-Anchor" href="#脱机运行"></a> 脱机运行</h1>
<p>由于登陆后在 shell 中运行的命令父进程是 bash，所以当 shell 会话中断时，后台的程序也会跟着被中断。</p>
<p>想要保持程序一直运行与终端状态脱离关系，可以使用 <code>nohup</code> 命令来处理。命令格式为：<code>nohup [命令与参数] &amp;</code></p>
<p>例如保持 <code>sh13.sh</code> 脚本脱机运行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 bin<span class="token punctuation">]</span>$ <span class="token function">nohup</span> ./sh13.sh <span class="token operator">&amp;</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">40062</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>注销用户后重新登录，使用<code>ps</code>命令查询：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> sh13
root      <span class="token number">40062</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span> <span class="token number">113284</span>  <span class="token number">1184</span> ?        S    03:53   <span class="token number">0</span>:00 /bin/bash ./sh13.sh
root      <span class="token number">40219</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span> <span class="token number">112812</span>   <span class="token number">968</span> pts/0    S+   03:55   <span class="token number">0</span>:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto sh13<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>可以看到程序（PID=40062）依然在运行中，可以使用 <code>kill</code> 命令来终止运行。</p>
<p>程序的输出会被重定向到 <code>~/nohup.out</code> 文件。也可以手动指定 <code>1&gt;</code> 和 <code>2&gt;</code> 到其他文件。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>1.基本操作</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 中程序与进程关系</title>
    <url>/630034191/</url>
    <content><![CDATA[<h1 id="进程与程序"><a class="markdownIt-Anchor" href="#进程与程序"></a> 进程与程序</h1>
<p>程序（Program）是可执行的二进制文件。</p>
<p>当触发执行程序动作后，程序内容及程序数据会加载到内存中，成为一个运行中的程序，即进程（Process）。</p>
<p>系统为这个进程分配一个 ID，称为 PID（Program ID）。同时，根据触发这个进程的用户及相关属性关系，为这个 PID 设置一组有效的权限。</p>
<h1 id="子进程与父进程"><a class="markdownIt-Anchor" href="#子进程与父进程"></a> 子进程与父进程</h1>
<p>登录系统后，会获得一个 bash 的 shell。通过 bash 提供的接口执行另一个命令，如 <code>vim</code>，它也会被分配一个 PID。此时，原本的 bash 就是 <code>vim</code> 的父进程。父进程的 PID 可以用 PPID（Parent ID）表示。</p>
<p>通常，子进程会继承父进程的相关权限和环境变量。</p>
<p>例如，在 bash 中执行 <code>bash</code>，再用<code>ps -l</code>命令查看：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">bash</span>
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">ps</span> <span class="token parameter variable">-l</span>
F S   <span class="token environment constant">UID</span>    PID   <span class="token environment constant">PPID</span>  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD
<span class="token number">4</span> S     <span class="token number">0</span>   <span class="token number">5713</span>   <span class="token number">5709</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> - <span class="token number">28920</span> do_wai pts/0    00:00:00 <span class="token function">bash</span>
<span class="token number">4</span> S     <span class="token number">0</span>  <span class="token number">35555</span>   <span class="token number">5713</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> - <span class="token number">28919</span> do_wai pts/0    00:00:00 <span class="token function">bash</span>
<span class="token number">0</span> R     <span class="token number">0</span>  <span class="token number">35570</span>  <span class="token number">35555</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> - <span class="token number">38332</span> -      pts/0    00:00:00 <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到第一个 bash 的 PID 5517 是第二个 bash 的 PPID。</p>
<h1 id="过程调用的流程"><a class="markdownIt-Anchor" href="#过程调用的流程"></a> 过程调用的流程</h1>
<p>父进程和子进程之间的互相调用过程通常称为 fork-and-exec 的流程。进程都会通过父进程以复制（fork）的方式产生一个一模一样的子进程，然后被复制的子进程再以 exec 的方式执行实际要进行的进程，最终成为一个子进程的存在。</p>
<p>其过程从上往下执行如下示意：</p>
<table>
<thead>
<tr>
<th><strong>阶段</strong></th>
<th><strong>状态</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>父进程</td>
<td>PID=x，程序=a</td>
</tr>
<tr>
<td>中间暂存进程</td>
<td>PID=y，程序=a，PPID=x</td>
</tr>
<tr>
<td>子进程</td>
<td>PID=y，程序=b，PPID=x</td>
</tr>
</tbody>
</table>
<h1 id="内部程序沟通"><a class="markdownIt-Anchor" href="#内部程序沟通"></a> 内部程序沟通</h1>
<p>在系统内，许多进程需要互相交换信息。除了通过文件进行沟通，还包括共享内存（Shared Memory）、消息队列（Message Queues）、管道（Pipe）等方式，统称为内部程序沟通（Interprocess Communication）。可以用命令 <code>ipcs</code> 观察沟通状态：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span>$ ipcs

 Message Queues 
key        msqid      owner      perms      used-bytes   messages    

 Shared Memory Segments 
key        shmid      owner      perms      bytes      nattch     status      

 Semaphore Arrays 
key        semid      owner      perms      nsems   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以通过 <code>ipcrm</code> 命令将看到的 interprocess 删除。</p>
<h1 id="多用户与多任务环境"><a class="markdownIt-Anchor" href="#多用户与多任务环境"></a> 多用户与多任务环境</h1>
<p>多用户系统也叫分时系统（Time-Share System），指多个用户可以在同一时间使用计算机系统。与 Linux 相比，Windows 系统是单用户系统。</p>
<p>多任务是指 Linux 可以同时执行几个任务，它可以在还未执行完一个任务时又执行另一项任务。</p>
<p>每个用户权限不同，所以登录后获得的 shell 的 PID 不同。而 CPU 速度 1GHz 代表 CPU 每秒可以运行 10<sup>9</sup>次命令，每个工作都占用 CPU 的几个命令次数。Linux 可以让 CPU 在各个进程间进行切换。所以实际上，所谓多任务处理是 CPU 快速地执行多个任务，看上去就像它们同时被执行一样。CPU 切换进程的工作与这些工作进入到 CPU 运行的调度会影响到系统的整体性能。由于 CPU 性能出众，所以可以支持多个用户同时登录运行不同程序，这就是多用户与多任务环境。</p>
<h1 id="僵尸进程"><a class="markdownIt-Anchor" href="#僵尸进程"></a> 僵尸进程</h1>
<p>造成僵尸进程的原因是该进程应该已经执行完毕或因故应该要终止时，该进程的父进程很可能已经死亡，无法完整将该进程结束掉，而造成那个进程一直滞留在内存。</p>
<p>使用 <code>ps</code> 命令查看进程时，如果发现某个进程的 CMD 后面有 <code>&lt;defunct&gt;</code>，就代表该进程是僵尸进程。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 工作调度与定时任务</title>
    <url>/3847284551/</url>
    <content><![CDATA[<h1 id="系统例行性工作"><a class="markdownIt-Anchor" href="#系统例行性工作"></a> 系统例行性工作</h1>
<p>在 Linux 系统常见的例行性任务有：</p>
<ul>
<li>
<p><strong>进行日志文件的轮替</strong></p>
<p>Linux 会主动将系统所发生的各种事件都记录到日志文件，日志轮替会不时检查，将旧日志与新日志分别存放。</p>
</li>
<li>
<p><strong>日志文件分析</strong></p>
<p>CentOS 提供 <code>logwatch</code> 来主动分析日志信息。</p>
</li>
<li>
<p><strong>更新 locate 数据库</strong></p>
<p>默认每天都更新一次存放在 <code>/var/lib/mlocate</code> 中的数据库。</p>
</li>
<li>
<p><strong>更新 RPM 软件数据库</strong></p>
<p>由于系统中软件经常变更，需要系统帮我们将文件名做个排序记录，生成 RPM 数据库。</p>
</li>
<li>
<p><strong>删除临时文件</strong></p>
<p>系统通过调用 <code>tmpwatch</code> 命令来删除软件运行时所产生的不再需要的临时文件。</p>
</li>
<li>
<p><strong>与网络服务有关的分析行为</strong></p>
<p>如果安装了 WWW 服务器，系统会主动分析软件的入口文件。</p>
</li>
</ul>
<h1 id="单次工作调度"><a class="markdownIt-Anchor" href="#单次工作调度"></a> 单次工作调度</h1>
<p>单次工作调度任务主要由 atd 服务提供，使用 <code>at</code> 命令来生成所需要运行的工作，再将工作写入 <code>/var/spool/at</code> 目录内。</p>
<p>可以运行 <code>at</code> 的账号记录在 <code>/etc/at.allow</code> 中，禁止运行 <code>at</code> 的账号记录在 <code>/etc/at.deny</code> 中。如果两个文件都不存在，则只有 root 可以使用 <code>at</code> 命令。如果账号在两个文件中都有记录，以 <code>/etc/at.allow</code> 优先。</p>
<p>可以使用 <code>service</code> 命令查询启动 <code>atd</code> 服务：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">service</span> atd status
Redirecting to /bin/systemctl status atd.service
a—? atd.service - Job spooling tools
   Loaded: loaded <span class="token punctuation">(</span>/usr/lib/systemd/system/atd.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>
   Active: inactive <span class="token punctuation">(</span>dead<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">service</span> atd start
Redirecting to /bin/systemctl start atd.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>设置开机启动使用 <code>chkconfig</code> 配置或 <code>systemctl enable atd</code> 开启：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">chkconfig</span> atd on
Note: Forwarding request to <span class="token string">'systemctl enable atd.service'</span><span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>at</code> 命令的基本语法为 <code>at [-mldv] 时间</code>，其中可以使用的参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-m</td>
<td>当 <code>at</code> 的工作完成后，即使没有输出信息，也会发送邮件通知用户工作已完成</td>
</tr>
<tr>
<td>-l</td>
<td>相当于 <code>atq</code>，列出目前系统上所有该用户的 <code>at</code> 调度</td>
</tr>
<tr>
<td>-d</td>
<td>相当于 <code>atrm</code>，可以取消一个在 <code>at</code> 调度中的任务</td>
</tr>
<tr>
<td>-v</td>
<td>可以使用较明显的时间格式列出 <code>at</code> 调度中的任务列表</td>
</tr>
<tr>
<td>-c</td>
<td>可以列出后面接的该项工作的实际命令内容</td>
</tr>
</tbody>
</table>
<p><code>at</code> 命令还支持多种可用的时间格式，包括：</p>
<table>
<thead>
<tr>
<th>格式</th>
<th>说明（范例）</th>
</tr>
</thead>
<tbody>
<tr>
<td>HH:MM</td>
<td>在今天 HH:MM进行，若超时改在明天（15:00）</td>
</tr>
<tr>
<td>HH:MM YYYY-MM-DD</td>
<td>规定在特定日期和时间执行（16:32 2043-04-01）</td>
</tr>
<tr>
<td>HH:MM[am|pm] [M] [D]</td>
<td>规定在特定日期和时间进行（01pm March 23）</td>
</tr>
<tr>
<td>HH:MM[am|pm] + n [minutes|hours|days|weeks]</td>
<td>在某个时间点加上指定时间后进行（04am + 2 days）</td>
</tr>
</tbody>
</table>
<p>例如，设置在 1 分钟后运行 <code>ls /root</code> 命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ at now + 1minutes
at<span class="token operator">></span> <span class="token function">ls</span> /root
at<span class="token operator">></span> <span class="token operator">&lt;</span>EOT<span class="token operator">></span>
job <span class="token number">1</span> at Tue Sep <span class="token number">14</span> 00:22:00 <span class="token number">2021</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>工作内容输入完毕后，使用 <code>Ctrl+d</code> 结束，系统会出现一行提示信息。</p>
<p>查询第 3 号任务：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ at <span class="token parameter variable">-c</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>at</code> 执行命令产生的 <code>stdout</code> 和 <code>stderr</code> 会传送到执行者的邮箱。如果想在终端看到输出，可以重定向输出到 <code>/dev/tty1</code>（或 <code>pts/0</code>）。</p>
<p>删除一个 <code>at</code> 调度中的任务：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ at <span class="token parameter variable">-l</span>
<span class="token number">7</span>       Tue Sep <span class="token number">14</span> <span class="token number">18</span>:15:00 <span class="token number">2021</span> a root
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ at <span class="token parameter variable">-d</span> <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>可以使用 <code>batch</code> 命令来控制在 CPU 工作负载小于 0.8 时执行。否则暂缓执行。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ batch
at<span class="token operator">></span> <span class="token function">sync</span>
at<span class="token operator">></span> <span class="token operator">&lt;</span>EOT<span class="token operator">></span>
job <span class="token number">9</span> at Tue Sep <span class="token number">14</span> 00:58:00 <span class="token number">2021</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="循环工作调度"><a class="markdownIt-Anchor" href="#循环工作调度"></a> 循环工作调度</h1>
<p>循环执行例行工作调度由 <code>crond</code> 这个系统服务控制。</p>
<p>调用 <code>cron</code> 的用户限制和 <code>at</code> 一样保存在文件中。允许账户保存在 <code>/etc/cron.allow</code>，禁止用户保存在 <code>/etc/cron.deny</code>。系统默认保留 <code>cron.deny</code>，也就是除了 <code>cron.deny</code> 中定义的用户外均可执行 <code>cron</code>。</p>
<p>用户使用 <code>crontab</code> 命令新建工作调度后，工作被记录到 <code>/var/spool/cron</code> 里面，而且以账号为分类分别建立文件。</p>
<p><code>cron</code> 执行的每一项工作都会被记录到 <code>/var/log/cron</code> 这个日志文件中。</p>
<p>命令语法: <code>crontab [-u username] [-l|-e|-r]</code></p>
<p>使用参数:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-u</td>
<td>只有 root 可以调用，帮助其他用户新建/删除 <code>crontab</code> 工作调度</td>
</tr>
<tr>
<td>-e</td>
<td>编辑 <code>crontab</code> 的工作内容</td>
</tr>
<tr>
<td>-l</td>
<td>查询 <code>crontab</code> 的工作内容</td>
</tr>
<tr>
<td>-r</td>
<td>删除所有的 <code>crontab</code> 的工作内容</td>
</tr>
</tbody>
</table>
<p>例如每天 13:15 执行一次清空命令历史记录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">crontab</span> <span class="token parameter variable">-e</span>
no <span class="token function">crontab</span> <span class="token keyword">for</span> root - using an empty one
<span class="token number">15</span> <span class="token number">13</span> * * * <span class="token function">history</span> <span class="token parameter variable">-c</span>
<span class="token string">"/tmp/crontab.0bZmP6"</span> 1L, 22C written
crontab: installing new <span class="token function">crontab</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编辑 <code>cron</code> 时分为 6 个字段设置为：<code>分钟 小时 日期 月份 周 命令</code></p>
<p>周时间设置为 0 等同于 7 表示星期天。</p>
<p>设定时间时可用的一些特殊字符说明如下：</p>
<table>
<thead>
<tr>
<th>特殊字符</th>
<th>代表意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>*（星号）</td>
<td>代表任何时刻都接受的意思。例如日、月、周都是 *，代表无论何日的 13:15 都会执行</td>
</tr>
<tr>
<td>,（逗号）</td>
<td>代表分隔时段的意思，例如在小时字段设置 4,11,15 代表执行时间为 4 点、11 点和 15 点</td>
</tr>
<tr>
<td>-（减号）</td>
<td>代表一段时间范围，例如在小时字段设置 8-12 代表执行时间为 8 点到 12 点每小时执行一次</td>
</tr>
<tr>
<td>/n（斜线）</td>
<td>n 代表数字，即是每隔 n 单位间隔的意思。例如在分钟字段设置 <code>*/5</code> 代表每五分钟执行一次</td>
</tr>
</tbody>
</table>
<p><code>cron</code> 不可以使用“几月几号且为星期几”的模式工作，也就是在日、月、周都设置的情况下会报错</p>
<p>例如，每天在早上 7 点和下午 8 点执行 <code>/root/backup.sh</code> 备份脚本：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">crontab</span> <span class="token parameter variable">-e</span>
*  <span class="token number">7,20</span> * * * <span class="token function">bash</span> /root/backup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="系统例行调度"><a class="markdownIt-Anchor" href="#系统例行调度"></a> 系统例行调度</h1>
<p>系统例行性任务保存在 <code>/etc/crontab</code> 文件中。<code>cron</code> 每分钟会去读取一次 <code>/etc/crontab</code> 和 <code>/var/spool/cron</code>，所以直接编辑完 <code>/etc/crontab</code> 文件后保存退出即可添加系统调度工作。</p>
<p>查看 <code>/etc/crontab</code> 文件内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/crontab
<span class="token assign-left variable"><span class="token environment constant">SHELL</span></span><span class="token operator">=</span>/bin/bash
<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/sbin:/bin:/usr/sbin:/usr/bin
<span class="token assign-left variable">MAILTO</span><span class="token operator">=</span>root

<span class="token comment"># For details see man 4 crontabs</span>
<span class="token comment"># Example of job definition:</span>
<span class="token comment"># .---------------- minute (0 - 59)</span>
<span class="token comment"># |  .------------- hour (0 - 23)</span>
<span class="token comment"># |  |  .---------- day of month (1 - 31)</span>
<span class="token comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span>
<span class="token comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span>
<span class="token comment"># |  |  |  |  |</span>
<span class="token comment"># *  *  *  *  * user-name  command to be executed</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p><strong>MAILTO</strong></p>
<p>表示将 <code>stdout</code> 和 <code>stderr</code> 用邮件发送给指定用户或指定邮箱。</p>
</li>
<li>
<p><strong>user-name</strong></p>
<p>执行命令使用的用户身份，例如 <code>root</code>。</p>
</li>
<li>
<p><strong>command to be executed</strong></p>
<p>除了直接运行命令外，还可以以目录为目标批量运行脚本。例如 <code>run-parts /etc/cron.hourly</code>，意思代表将 <code>/etc/cron.hourly/</code> 目录下的所有脚本执行。</p>
</li>
</ul>
<h1 id="唤醒停机期间的工作任务"><a class="markdownIt-Anchor" href="#唤醒停机期间的工作任务"></a> 唤醒停机期间的工作任务</h1>
<p>如果在<code>crond</code>设定的任务运行时段系统已关机，那么需要借助<code>anacron</code>将关机期间系统<code>crontab</code>运行。</p>
<p><code>anacron</code>以小时为单位或在开机后立刻进行检查，将停机期间没有进行的<code>crontab</code>任务执行一遍。</p>
<p>一般不用修改<code>anacron</code>的默认设置，需要手动执行<code>anacron</code>命令语法如下：</p>
<p><code>anacron [-sfn] [job]..</code></p>
<p><code>anacron -u [job]..</code></p>
<p>参数说明如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-s</td>
<td>开始连续执行各项工作，会依据时间记录文件的数据判断是否进行</td>
</tr>
<tr>
<td>-f</td>
<td>强制进行，不判断事件记录文件的时间戳</td>
</tr>
<tr>
<td>-n</td>
<td>立刻进行未进行的任务，而不延迟等待时间</td>
</tr>
<tr>
<td>-u</td>
<td>仅更新事件记录文件的时间戳，不进行任何工作</td>
</tr>
<tr>
<td>job</td>
<td>由<code>/etc/anacrontab</code>定义的各项工作名称</td>
</tr>
</tbody>
</table>
<p>查看<code>/etc/anacrontab</code>文件的内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/anacrontab 
<span class="token comment"># /etc/anacrontab: configuration file for anacron</span>
<span class="token comment"># See anacron(8) and anacrontab(5) for details.</span>
<span class="token assign-left variable"><span class="token environment constant">SHELL</span></span><span class="token operator">=</span>/bin/sh
<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/sbin:/bin:/usr/sbin:/usr/bin
<span class="token assign-left variable">MAILTO</span><span class="token operator">=</span>root
<span class="token comment"># the maximal random delay added to the base delay of the jobs</span>
<span class="token assign-left variable">RANDOM_DELAY</span><span class="token operator">=</span><span class="token number">45</span>
<span class="token comment"># the jobs will be started during the following hours only</span>
<span class="token assign-left variable">START_HOURS_RANGE</span><span class="token operator">=</span><span class="token number">3</span>-22

<span class="token comment">#period in days   delay in minutes   job-identifier   command</span>
<span class="token number">1</span>       <span class="token number">5</span>       cron.daily              <span class="token function">nice</span> run-parts /etc/cron.daily
<span class="token number">7</span>       <span class="token number">25</span>      cron.weekly             <span class="token function">nice</span> run-parts /etc/cron.weekly
@monthly <span class="token number">45</span>     cron.monthly            <span class="token function">nice</span> run-parts /etc/cron.monthly<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>任务设置分别为四个字段：执行间隔天数、延迟时间（分钟）、工作名称、实际命令。</p>
<p>查看<code>/var/spool/anacron/cron.daily</code>文件内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /var/spool/anacron/cron.daily
<span class="token number">20210913</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>用每天进行的任务分析一下<code>anacron</code>的执行过程：</p>
<ol>
<li>由<code>/etc/anacrontab</code>分析到<code>cron.daily</code>这项工作的天数为 1 天；</li>
<li>由<code>/var/spool/anacron/cron.daily</code>取出最近一次执行<code>anacron</code>的时间戳；</li>
<li>将取出的时间与目前的时间比较，如果差异天数大于等于 1 天旧准备进行命令；</li>
<li>根据<code>/etc/anacrontab</code>的设置将延迟 5 分钟；</li>
<li>延迟时间过后开始执行后续命令，即<code>run-parts /etc/cron.daily</code>。</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>1.基本操作</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 自带帮助查询</title>
    <url>/4039294623/</url>
    <content><![CDATA[<h1 id="帮助命令"><a class="markdownIt-Anchor" href="#帮助命令"></a> 帮助命令</h1>
<p>某些命令可以使用 <code>--help</code> 参数来查看简短的帮助信息。例如，要查看命令 <code>mkdir</code> 的帮助信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>user1@101c7 root<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> <span class="token parameter variable">--help</span>
Usage: <span class="token function">mkdir</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. DIRECTORY<span class="token punctuation">..</span>.
Create the DIRECTORY<span class="token punctuation">(</span>ies<span class="token punctuation">)</span>, <span class="token keyword">if</span> they <span class="token keyword">do</span> not already exist.

Mandatory arguments to long options are mandatory <span class="token keyword">for</span> short options too.
  -m, <span class="token parameter variable">--mode</span><span class="token operator">=</span>MODE   <span class="token builtin class-name">set</span> <span class="token function">file</span> mode <span class="token punctuation">(</span>as <span class="token keyword">in</span> <span class="token function">chmod</span><span class="token punctuation">)</span>, not <span class="token assign-left variable">a</span><span class="token operator">=</span>rwx - <span class="token builtin class-name">umask</span>
  -p, <span class="token parameter variable">--parents</span>     no error <span class="token keyword">if</span> existing, <span class="token function">make</span> parent directories as needed
  -v, <span class="token parameter variable">--verbose</span>     print a message <span class="token keyword">for</span> each created directory
  <span class="token parameter variable">-Z</span>                   <span class="token builtin class-name">set</span> SELinux security context of each created directory
                         to the default <span class="token builtin class-name">type</span>
      --context<span class="token punctuation">[</span><span class="token operator">=</span>CTX<span class="token punctuation">]</span>  like -Z, or <span class="token keyword">if</span> CTX is specified <span class="token keyword">then</span> <span class="token builtin class-name">set</span> the SELinux
                         or SMACK security context to CTX
      <span class="token parameter variable">--help</span>     display this <span class="token builtin class-name">help</span> and <span class="token builtin class-name">exit</span>
      <span class="token parameter variable">--version</span>  output version information and <span class="token builtin class-name">exit</span>

GNU coreutils online help: <span class="token operator">&lt;</span>http://www.gnu.org/software/coreutils/<span class="token operator">></span>
For complete documentation, run: info coreutils 'mkdir invocation<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一些特殊符号的含义：</p>
<ul>
<li>省略号<code>...</code>：表示可以有多个选项或参数。</li>
<li>中括号<code>[]</code>：之间的任何内容都是可选的。</li>
<li>大括号<code>&#123;&#125;</code>：表示应该选择由|隔开的各项中一个。</li>
<li>尖括号<code>&lt;&gt;</code>：内为变量表示参数可变。</li>
<li>不带中括号<code>[]</code>：表示<strong>必选项</strong>，必须作为命令的一部分输入。</li>
</ul>
<h1 id="查询手册"><a class="markdownIt-Anchor" href="#查询手册"></a> 查询手册</h1>
<p>使用 <code>man</code> 命令可以查询操作手册（manual），所有内建命令都有对应的操作手册页面。</p>
<p>手册存放在 <code>/usr/share/man</code> 目录中，可以通过修改 <code>/etc/man_db.conf</code> 文件来定义 man 查询手册的位置。</p>
<p>例如使用 <code>man</code> 命令查询 <code>mkdir</code> 命令的手册：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>user1@101c7 root<span class="token punctuation">]</span>$ <span class="token function">man</span> <span class="token function">mkdir</span>
MKDIR<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                                      User Commands                                     MKDIR<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

NAME
       <span class="token function">mkdir</span> - <span class="token function">make</span> directories

SYNOPSIS
       <span class="token function">mkdir</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. DIRECTORY<span class="token punctuation">..</span>.

DESCRIPTION
       Create the DIRECTORY<span class="token punctuation">(</span>ies<span class="token punctuation">)</span>, <span class="token keyword">if</span> they <span class="token keyword">do</span> not already exist.

       Mandatory arguments to long options are mandatory <span class="token keyword">for</span> short options too.

       -m, <span class="token parameter variable">--mode</span><span class="token operator">=</span>MODE
              <span class="token builtin class-name">set</span> <span class="token function">file</span> mode <span class="token punctuation">(</span>as <span class="token keyword">in</span> <span class="token function">chmod</span><span class="token punctuation">)</span>, not <span class="token assign-left variable">a</span><span class="token operator">=</span>rwx - <span class="token builtin class-name">umask</span>

       -p, <span class="token parameter variable">--parents</span>
              no error <span class="token keyword">if</span> existing, <span class="token function">make</span> parent directories as needed

       -v, <span class="token parameter variable">--verbose</span>
              print a message <span class="token keyword">for</span> each created directory

 Manual page mkdir<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> line <span class="token number">1</span> <span class="token punctuation">(</span>press h <span class="token keyword">for</span> <span class="token builtin class-name">help</span> or q to quit<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 man 页面使用方向键浏览，用空格或[PageUp]，[PageDown]翻页。</p>
<p>输入/关键字来向下（?关键字向上）搜索手册中的内容，在搜索中按 n 和 N 进行正向查询和反向查询。</p>
<p>使用 <code>-f</code> 选项查询命令相关说明文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>user1@101c7 root<span class="token punctuation">]</span>$ <span class="token function">man</span> <span class="token parameter variable">-f</span> <span class="token function">date</span>
<span class="token function">date</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>             - print or <span class="token builtin class-name">set</span> the system <span class="token function">date</span> and <span class="token function">time</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>通常查询显示的是最低编号的内容（可以在 man_db.conf 中设置）。可以使用数字指定查询相应区块文档：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>user1@101c7 root<span class="token punctuation">]</span>$ <span class="token function">man</span> <span class="token parameter variable">-f</span> info
info <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>             - <span class="token builtin class-name">read</span> Info documents
info <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>             - readable online documentation
<span class="token punctuation">[</span>user1@101c7 root<span class="token punctuation">]</span>$ <span class="token function">man</span> <span class="token number">5</span> info
INFO<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                                    File Formats Manual                                   INFO<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

NAME
       info - readable online documentation<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以使用 <code>-k</code> 选项进行模糊查询：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>user1@101c7 root<span class="token punctuation">]</span>$ <span class="token function">man</span> <span class="token parameter variable">-k</span> setse
setsebool <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>        - <span class="token builtin class-name">set</span> SELinux boolean value
<span class="token punctuation">[</span>user1@101c7 root<span class="token punctuation">]</span>$ <span class="token function">man</span> <span class="token parameter variable">-k</span> sets
cpupower <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>         - Shows and sets processor power related values
ExtUtils::XSSymSet <span class="token punctuation">(</span>3pm<span class="token punctuation">)</span> - keep sets of symbol names palatable to the VMS linker
ipset <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>            - administration tool <span class="token keyword">for</span> IP sets
setsebool <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>        - <span class="token builtin class-name">set</span> SELinux boolean value
setsid <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>           - run a program <span class="token keyword">in</span> a new session
systemd.preset <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>   - Service enablement presets<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>man 手册约定：</p>
<table>
<thead>
<tr>
<th>区域号</th>
<th>所涵盖的内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>可执行程序或 shell 命令。</td>
</tr>
<tr>
<td>2</td>
<td>系统内核可调用的函数和工具等。</td>
</tr>
<tr>
<td>3</td>
<td>一些常用函数（Function）与函数库（Library），大部分为 C 的函数库（libc）。</td>
</tr>
<tr>
<td>4</td>
<td>设备文件的说明，通常在 <code>/dev</code> 下的文件。</td>
</tr>
<tr>
<td>5</td>
<td>配置文件或者是某些文件的格式。</td>
</tr>
<tr>
<td>6</td>
<td>游戏和演示。</td>
</tr>
<tr>
<td>7</td>
<td>惯例与协议等，例如文件系统、网络协议等名词解释。</td>
</tr>
<tr>
<td>8</td>
<td>只有超级用户和系统管理员可使用的系统管理命令。</td>
</tr>
<tr>
<td>9</td>
<td>内核例程，与 Kernel 有关的文件。</td>
</tr>
</tbody>
</table>
<h1 id="查询-info-文档"><a class="markdownIt-Anchor" href="#查询-info-文档"></a> 查询 Info 文档</h1>
<p>类似于在命令行中浏览网页，使用<code>info</code>可以查询存放在 <code>/usr/share/info/</code> 目录下的文档。例如，可以使用以下命令查询有关 <code>mkdir</code> 的信息：</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>user1@101c7 root<span class="token punctuation">]</span>$ info <span class="token function">mkdir</span>
File: libc.info,  Node: Creating Directories,  Next: File Attributes,  Prev: Renaming Files,  Up: File Sys<span class="token punctuation">\</span>
tem Interface

<span class="token number">14.8</span> Creating Directories
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>

Directories are created with the <span class="token string">'mkdir'</span> function.  <span class="token punctuation">(</span>There is also a
shell <span class="token builtin class-name">command</span> <span class="token string">'mkdir'</span> <span class="token function">which</span> does the same thing.<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中，File 表示 info 页面的数据来源文件，Node 表示页面所属节点。<a href="http://xn--3ds.info">在.info</a> 的说明文件中，每个节点都有定位与链接，类似于超链接，可以快速跳转。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>1.基本操作</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 下压缩和解压操作</title>
    <url>/635683850/</url>
    <content><![CDATA[<h1 id="常见压缩格式"><a class="markdownIt-Anchor" href="#常见压缩格式"></a> 常见压缩格式</h1>
<p>各种压缩工具使用的压缩技术不同，最后生成的文件后缀也不同，下面是 Linux 下常用的几种压缩格式：</p>
<table>
<thead>
<tr>
<th>后缀</th>
<th>对应程序</th>
</tr>
</thead>
<tbody>
<tr>
<td>*.Z</td>
<td>compress 程序压缩的文件</td>
</tr>
<tr>
<td>*.zip</td>
<td>zip 程序压缩的文件</td>
</tr>
<tr>
<td>*.gz</td>
<td>gzip 程序压缩的文件</td>
</tr>
<tr>
<td>*.bz2</td>
<td>bzip2 程序压缩的文件</td>
</tr>
<tr>
<td>*.xz</td>
<td>xz 程序压缩的文件</td>
</tr>
<tr>
<td>*.tar</td>
<td>tar 程序打包的数据，没有经过压缩</td>
</tr>
<tr>
<td>*.tar.gz</td>
<td>tar 程序打包的文件，经过 gzip 的压缩</td>
</tr>
<tr>
<td>*.tar.bz2</td>
<td>tar 程序打包的文件，经过 bzip2 的压缩</td>
</tr>
<tr>
<td>*.tar.xz</td>
<td>tar 程序打包的文件，经过 xz 的压缩</td>
</tr>
</tbody>
</table>
<p>gzip 和 bzip2 都只能针对单个文件进行压缩和解压缩，而 tar 可以调用它们来集中打包文件。</p>
<h1 id="单文件压缩解压"><a class="markdownIt-Anchor" href="#单文件压缩解压"></a> 单文件压缩解压</h1>
<p><code>compress</code> 程序已经不再被使用，<code>gzip</code> 为系统内置程序，可用的参数有下面这些：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-c</td>
<td>将压缩的数据输出到屏幕上，可通过数据流重定向来处理</td>
</tr>
<tr>
<td>-d</td>
<td>解压缩的参数</td>
</tr>
<tr>
<td>-t</td>
<td>可以检验压缩包看有无损坏</td>
</tr>
<tr>
<td>-v</td>
<td>可以显示出源文件/压缩文件的压缩比等信息</td>
</tr>
<tr>
<td>-#</td>
<td>压缩等级，-1 最快，-9 压缩比最高</td>
</tr>
</tbody>
</table>
<p>例如压缩当前目录下的 b.log 文件，不加参数会自动删除原文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ ll
total <span class="token number">184</span>
-rw-------. <span class="token number">1</span> root root <span class="token number">182023</span> Sep  <span class="token number">9</span> 05:48 b.log
-rw-r--r--. <span class="token number">1</span> root root    <span class="token number">178</span> Sep  <span class="token number">9</span> 05:57 c.log
<span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">gzip</span> <span class="token parameter variable">-v</span> b.log 
b.log:   <span class="token number">93.2</span>% -- replaced with b.log.gz
<span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ ll
total <span class="token number">20</span>
-rw-------. <span class="token number">1</span> root root <span class="token number">12439</span> Sep  <span class="token number">9</span> 05:48 b.log.gz
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">178</span> Sep  <span class="token number">9</span> 05:57 c.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用 <code>-d</code> 参数将文件解压时会删除原压缩文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">gzip</span> <span class="token parameter variable">-d</span> b.log.gz <span class="token punctuation">;</span> ll
total <span class="token number">184</span>
-rw-------. <span class="token number">1</span> root root <span class="token number">182023</span> Sep  <span class="token number">9</span> 05:48 b.log
-rw-r--r--. <span class="token number">1</span> root root    <span class="token number">178</span> Sep  <span class="token number">9</span> 05:57 c.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>将文件按最高压缩比压缩并保留原文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">gzip</span> <span class="token parameter variable">-9</span> <span class="token parameter variable">-c</span> b.log <span class="token operator">></span> b.gz <span class="token punctuation">;</span> ll
total <span class="token number">196</span>
-rw-r--r--. <span class="token number">1</span> root root  <span class="token number">11764</span> Sep <span class="token number">10</span> <span class="token number">11</span>:09 b.gz
-rw-------. <span class="token number">1</span> root root <span class="token number">182023</span> Sep  <span class="token number">9</span> 05:48 b.log
-rw-r--r--. <span class="token number">1</span> root root    <span class="token number">178</span> Sep  <span class="token number">9</span> 05:57 c.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>读取被压缩的纯文本文件可以使用 <code>zcat</code> 命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ zcat b.gz <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-2</span>
<span class="token assign-left variable">type</span><span class="token operator">=</span>CRED_DISP <span class="token assign-left variable">msg</span><span class="token operator">=</span>audit<span class="token punctuation">(</span><span class="token number">1631178061.322</span>:415<span class="token punctuation">)</span>: <span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token number">60628</span> <span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">auid</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ses</span><span class="token operator">=</span><span class="token number">22</span> <span class="token assign-left variable">subj</span><span class="token operator">=</span>system_u:system_r:crond_t:s0-s0:c0.c1023 <span class="token assign-left variable">msg</span><span class="token operator">=</span><span class="token string">'op=PAM:setcred grantors=pam_env,pam_unix acct="root" exe="/usr/sbin/crond" hostname=? addr=? terminal=cron res=success'</span>
<span class="token assign-left variable">type</span><span class="token operator">=</span>USER_END <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><code>bzip2</code> 和 <code>xz</code> 的用法与 <code>gzip</code> 差不多，只是在压缩比上有区别。</p>
<h1 id="打包命令"><a class="markdownIt-Anchor" href="#打包命令"></a> 打包命令</h1>
<p>使用<code>gzip</code>对目录进行压缩时，其会将目录内的所有文件分别压缩。</p>
<p>将多个文件或目录包成一个大文件的命令称为打包，可以使用 <code>tar</code> 进行。</p>
<p><code>tar</code> 命令五个主要参数必备其一，不可以同时使用：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-c</td>
<td>新建打包文件；</td>
</tr>
<tr>
<td>-t</td>
<td>查看打包文件的内容含有哪些文件；</td>
</tr>
<tr>
<td>-x</td>
<td>解压打包文件，搭配-C 指定解压到的目录；</td>
</tr>
<tr>
<td>-r</td>
<td>向压缩归档文件末尾追加文件；</td>
</tr>
<tr>
<td>-u</td>
<td>更新原压缩包中的文件。</td>
</tr>
</tbody>
</table>
<p><code>tar</code> 命令其他参数，其中 <code>-f</code> 是必备：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-j</td>
<td>通过<code>bzip2</code>的支持进行压缩解压，文件最好用<code>.tar.bz2</code>后缀；</td>
</tr>
<tr>
<td>-z</td>
<td>通过<code>gzip</code>的支持进行压缩解压，文件最好用<code>.tar.gz</code>后缀；</td>
</tr>
<tr>
<td>-J</td>
<td>通过<code>xz</code>的支持进行压缩解压，文件最好用<code>.tar.xz</code>后缀；</td>
</tr>
<tr>
<td>-v</td>
<td>在压缩解压过程中，将正在处理的文件名显示出来；</td>
</tr>
<tr>
<td>-f filename</td>
<td>接要被处理的文件名；</td>
</tr>
<tr>
<td>-C dir</td>
<td>解压时指定目标目录，不指定则在当前目录解压。</td>
</tr>
</tbody>
</table>
<p>备份时要用到的参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-p</td>
<td>保留备份数据的原本权限和属性，常用于备份重要的配置文件；</td>
</tr>
<tr>
<td>-P</td>
<td>保留绝对路径，即允许备份数据中含有根目录；</td>
</tr>
<tr>
<td>–exclude=FILE</td>
<td>压缩过程中，排除掉文件 <code>FILE</code>。</td>
</tr>
</tbody>
</table>
<p>命令简记如下：</p>
<table>
<thead>
<tr>
<th>目标</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>压缩</td>
<td><code>tar -zcvf 压缩文件名.tar.gz 原文件</code></td>
</tr>
<tr>
<td>解压</td>
<td><code>tar -zxvf 压缩文件名.tar.gz -C 目标目录</code></td>
</tr>
<tr>
<td>查询</td>
<td><code>tar -ztvf 压缩文件名.tar.gz</code></td>
</tr>
</tbody>
</table>
<h1 id="压缩文件"><a class="markdownIt-Anchor" href="#压缩文件"></a> 压缩文件</h1>
<p>例如，使用 <code>gzip</code> 压缩备份 <code>/etc</code> 这个目录到 <code>/root</code> 下面，使用 <code>-p</code> 参数保留源文件权限和属性：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">tar</span> <span class="token parameter variable">-zpcv</span> <span class="token parameter variable">-f</span> /root/etc.tar.gz /etc
/etc/vimoutlinerrc
/etc/ntp.conf
/etc/updatedb.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>压缩时排除某些文件可以用 <code>--exclude=</code> 参数。例如，排除掉 <code>22</code> 文件夹：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">tar</span> <span class="token parameter variable">-zcv</span> <span class="token parameter variable">-f</span> <span class="token number">2</span>.tar.gz <span class="token parameter variable">--exclude</span><span class="token operator">=</span>/root/2/22 /root/2
tar: Removing leading `/' from member names
/root/2/
/root/2/1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以使用<code>--new</code>（包含<code>mtime</code>和<code>ctime</code>）和<code>--newer-mtime</code>时间参数来筛选文件。</p>
<p>比如打包<code>/root/audit/</code>下面修改日期在<code>2021年09月10日</code>之后的文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token function">tar</span> <span class="token parameter variable">-zcv</span> <span class="token parameter variable">-f</span> new10.tar.gz --newer-mtime<span class="token operator">=</span><span class="token string">"2021/09/10"</span> /root/audit/*
tar: Option --newer-mtime: Treating <span class="token function">date</span> <span class="token variable"><span class="token variable">`</span><span class="token number">2021</span>/09/10' as <span class="token number">2021</span>-09-10 00:00:00
tar: Removing leading <span class="token variable">`</span></span>/' from member names
tar: /root/audit/b.log: <span class="token function">file</span> is unchanged<span class="token punctuation">;</span> not dumped
/root/audit/c.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="查看压缩包"><a class="markdownIt-Anchor" href="#查看压缩包"></a> 查看压缩包</h1>
<p>使用以下命令可以查看压缩文件的内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">tar</span> <span class="token parameter variable">-ztv</span> <span class="token parameter variable">-f</span> /root/etc.tar.gz 
-rw-r--r-- root/root       <span class="token number">111</span> <span class="token number">2019</span>-11-27 <span class="token number">11</span>:47 etc/sysconfig/ntpdate
-rw-r--r-- root/root        <span class="token number">45</span> <span class="token number">2019</span>-11-27 <span class="token number">11</span>:47 etc/sysconfig/ntpd
drwxr-xr-x root/root         <span class="token number">0</span> <span class="token number">2021</span>-09-07 <span class="token number">13</span>:35 etc/xdg/
drwxr-xr-x root/root         <span class="token number">0</span> <span class="token number">2018</span>-04-11 00:59 etc/xdg/autostart/
drwxr-xr-x root/root         <span class="token number">0</span> <span class="token number">2021</span>-09-07 05:53 etc/xdg/systemd/
lrwxrwxrwx root/root         <span class="token number">0</span> <span class="token number">2021</span>-09-07 05:53 etc/xdg/systemd/user -<span class="token operator">></span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/systemd/user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从显示结果可以看到根目录，也就是文件名开头的 <code>/</code> 被移除了，这样做是为了安全。</p>
<p>如果使用 <code>-P</code> 保留根目录，则解压后的文件会是绝对路径，本地存在的相同文件会被压缩包内文件覆盖。</p>
<h1 id="解压文件"><a class="markdownIt-Anchor" href="#解压文件"></a> 解压文件</h1>
<p>解压缩文件 <code>etc.tar.gz</code> 到 <code>/tmp</code> 目录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">tar</span> <span class="token parameter variable">-zxv</span> <span class="token parameter variable">-f</span> etc.tar.gz <span class="token parameter variable">-C</span> /tmp
etc/gdbinit.d/golang.gdb
etc/vimoutlinerrc
etc/ntp.conf
etc/updatedb.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解压 <code>etc.tar.gz</code> 中的单独文件 <code>etc/sudo.conf</code> 到当前目录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">tar</span> <span class="token parameter variable">-zxv</span> <span class="token parameter variable">-f</span> etc.tar.gz etc/sudo.conf
etc/sudo.conf
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ ll etc/
total <span class="token number">4</span>
-rw-r-----. <span class="token number">1</span> root root <span class="token number">1786</span> Sep <span class="token number">30</span>  <span class="token number">2020</span> sudo.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux</category>
        <category>1.基本操作</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 引导启动配置与关机</title>
    <url>/3107904477/</url>
    <content><![CDATA[<h1 id="启动引导程序"><a class="markdownIt-Anchor" href="#启动引导程序"></a> 启动引导程序</h1>
<p>目前在 Linux 下主要的引导启动程序是 Grub(Grand Unified Bootloader) 或 Grub2。通常 Grub2 主程序会将配置文件放到 /boot/grub2 目录下。Grub 则是直接修改 /boot/grub/grub.conf，一个很简单的配置文件。</p>
<p>Grub2 引导程序的特点有：</p>
<ul>
<li>
<p>认识与支持更多文件系统，并且可以使用 Grub2 的主程序直接在文件系统中搜寻内核文件名。</p>
</li>
<li>
<p>开机时候，可以自行编辑与修改开机设置项目，类似 bash 的命令模式。</p>
</li>
<li>
<p>可以动态搜寻配置文件，而不需要在修改配置后重新安装 Grub2。</p>
</li>
</ul>
<p>Grub2 对硬盘的代号设置与 Linux 中不同，一般用下面代号：</p>
<ul>
<li>
<p>(hd0,1)：一般的默认语法，由 Grub2 自动判断分区格式。</p>
</li>
<li>
<p>(hd0,msdos1)：磁盘的分区为传统的 MBR 模式。</p>
</li>
<li>
<p>(hd0,gpt1)：磁盘的分区为 GPT 模式。</p>
</li>
</ul>
<p>硬盘代号用小括号()括起来，以搜寻顺序做硬盘编号，第一个分区从 1 开始计算，而不是 Grub 的 0 开始算。</p>
<p>默认情况下 Grub2 随系统已经装好了，特殊情况下要手动安装 Grub2 可以使用 grub2-install 命令。例如安装到 /dev/sdc 下面：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ grub2-install /dev/sdc
Installing <span class="token keyword">for</span> i386-pc platform.
Installation finished. No error reported.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="grub2-配置文件"><a class="markdownIt-Anchor" href="#grub2-配置文件"></a> Grub2 配置文件</h2>
<p>Grub2 的配置文件路径为 /boot/grub2/grub.cfg：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /boot/grub2/grub.cfg
<span class="token comment">#</span>
<span class="token comment"># DO NOT EDIT THIS FILE</span>
<span class="token comment">#</span>
<span class="token comment"># It is automatically generated by grub2-mkconfig using templates</span>
<span class="token comment"># from /etc/grub.d and settings from /etc/default/grub</span>
<span class="token comment">#</span>

<span class="token comment">### BEGIN /etc/grub.d/00_header ###</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">pager</span><span class="token operator">=</span><span class="token number">1</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token variable">$prefix</span>/grubenv <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此文件内容繁多，开头第一句就警告应该由<code>grub2-mkconfig</code>命令来创建配置，而不是直接修改它。</p>
<p>第一部分以### BEGIN /etc/grub.d/00_header ###开头下面的内容，大多与环境设置与默认值设置等。比较重要的是<code>set default</code>默认开机选项和<code>set timeout</code>默认超时时间。</p>
<p>第四部分以### BEGIN /etc/grub.d/10_linux ###开头段的内容设置了<code>menuentry</code>，也就是开机给的选择项。每个选项都有不同启动参数与模块载入。比较重要的有：</p>
<ul>
<li>
<p><code>set root</code>：设置 grub2 配置文件所在的分区<code>(hd0,msdos1)</code>，可以用<code>mount</code>查一下挂载的分区。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mount</span> <span class="token operator">|</span> <span class="token function">grep</span> boot
/dev/sda1 on /boot <span class="token builtin class-name">type</span> xfs <span class="token punctuation">(</span>rw,relatime,seclabel,attr2,inode64,noquota<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">fdisk</span> <span class="token parameter variable">-l</span>
Disk /dev/sda: <span class="token number">21.5</span> GB, <span class="token number">21474836480</span> bytes, <span class="token number">41943040</span> sectors
Units <span class="token operator">=</span> sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytes
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
I/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
Disk label type: dos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果显示 /boot 是挂载在<code>/dev/sda1</code>下面，分区为 MBR 格式。</p>
</li>
<li>
<p><code>linux16 /vmlinuz</code>：指定内核文件以及内核文件运行时加的参数。因为/boot 独立分区的缘故，这里的内核文件路径是<code>(hd0,msdos1)/vmlinuz</code>。如果/boot 挂载在根目录下面，内核文件路径会变成<code>(hd0,msdos1)/boot/vmlinuz</code>，也就是<code>linux16 /boot/vmlinuz</code>这样。后面的<code>root</code>指定的是 Linux 系统中根目录挂载的设备。</p>
</li>
<li>
<p><code>initrd16 /initramfs</code>：指定虚拟文件系统 img 的位置。</p>
</li>
</ul>
<h2 id="grub2-配置维护"><a class="markdownIt-Anchor" href="#grub2-配置维护"></a> Grub2 配置维护</h2>
<p>我们可以通过修改<code>/etc/default/grub</code>文件和<code>/etc/grub.d/</code>目录内的相关配置文件来达成修改 Grub2 配置的目的。</p>
<p>可以查看<code>/etc/default/grub</code>文件的内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/default/grub 
<span class="token assign-left variable">GRUB_TIMEOUT</span><span class="token operator">=</span><span class="token number">5</span>
<span class="token assign-left variable">GRUB_DISTRIBUTOR</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">sed</span> <span class="token string">'s, release .*$,,g'</span> /etc/system-release<span class="token variable">)</span></span>"</span>
<span class="token assign-left variable">GRUB_DEFAULT</span><span class="token operator">=</span>saved
<span class="token assign-left variable">GRUB_DISABLE_SUBMENU</span><span class="token operator">=</span>true
<span class="token assign-left variable">GRUB_TERMINAL_OUTPUT</span><span class="token operator">=</span><span class="token string">"console"</span>
<span class="token assign-left variable">GRUB_CMDLINE_LINUX</span><span class="token operator">=</span><span class="token string">"crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet"</span>
<span class="token assign-left variable">GRUB_DISABLE_RECOVERY</span><span class="token operator">=</span><span class="token string">"true"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中，重点选项的含义如下：</p>
<ul>
<li>
<p><code>GRUB_TIMEOUT</code>：设置选择菜单等待超时的秒数。设为 0 表示不等待，设为-1 表示必须手动选择。</p>
</li>
<li>
<p><code>GRUB_TIMEOUT_STYLE</code>：可以设置的值为<code>menu</code>、<code>countdown</code>、<code>hidden</code>等，默认为<code>menu</code>。这个参数也就是设置是否要显示菜单。设置为<code>countdown</code>或者<code>hidden</code>会让用户看不到任何内容。</p>
</li>
<li>
<p><code>GRUB_DEFAULT</code>：菜单默认选择项目。可以设置的值有<code>saved</code>、数字、title 名、ID 名等，依据<code>menuentry</code>的设置而定。例如，在配置中定义了三条<code>menuentry</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">menuentry <span class="token string">'CentOS'</span> <span class="token parameter variable">--unrestricted</span> <span class="token variable">$menuentry_id_option</span> <span class="token string">'linux-1'</span>
menuentry <span class="token string">'Debian'</span> <span class="token parameter variable">--unrestricted</span> <span class="token variable">$menuentry_id_option</span> <span class="token string">'gnulinux'</span>
menuentry <span class="token string">'Windows'</span> <span class="token parameter variable">--unrestricted</span> <span class="token variable">$menuentry_id_option</span> <span class="token string">'win'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>那么对应<code>GRUB_DEFAULT</code>的值：</p>
<ul>
<li>值为 1 表示选用排在第 2 个定义的 Debian 系统，因为数字编号从 0 开始算。</li>
<li>值为 win 表示选择排在第 3 个定义的 Windows 系统，通过 ID 选的值。</li>
<li>值为 saved 表示使用<code>grub2-set-default</code>来设置哪个为默认值，通常默认为 0。</li>
</ul>
</li>
<li>
<p><code>GRUB_TERMINAL_OUTPUT</code>：信息输出的终端模式。可以设置值有<code>console</code>、<code>serial</code>、<code>gfxterm</code>、<code>vga_text</code>等。</p>
</li>
<li>
<p><code>GRUB_CMDLINE_LINUX</code>：内核的外加参数功能，用来设置内核启动时还需要额外加入的参数。</p>
</li>
</ul>
<p>例如修改菜单等待时间为 30 秒，之后使用<code>grub2-mkconfig</code>命令重建<code>grub.cfg</code>:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/GRUB_TIMEOUT=5/GRUB_TIMEOUT=30/g'</span> /etc/default/grub <span class="token punctuation">;</span> <span class="token function">head</span> <span class="token parameter variable">-1</span> /etc/default/grub
<span class="token assign-left variable">GRUB_TIMEOUT</span><span class="token operator">=</span><span class="token number">30</span>
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ grub2-mkconfig <span class="token parameter variable">-o</span> /boot/grub2/grub.cfg
Generating grub configuration <span class="token function">file</span> <span class="token punctuation">..</span>.
Found linux image: /boot/vmlinuz-3.10.0-1160.41.1.el7.x86_64
Found initrd image: /boot/initramfs-3.10.0-1160.41.1.el7.x86_64.img
Found linux image: /boot/vmlinuz-3.10.0-862.el7.x86_64
Found initrd image: /boot/initramfs-3.10.0-862.el7.x86_64.img
Found linux image: /boot/vmlinuz-0-rescue-77a36143eb014dd5a0d6e738b1d84778
Found initrd image: /boot/initramfs-0-rescue-77a36143eb014dd5a0d6e738b1d84778.img
<span class="token keyword">done</span>
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">grep</span> <span class="token function">timeout</span> /boot/grub2/grub.cfg
<span class="token keyword">if</span> <span class="token punctuation">[</span> x<span class="token variable">$feature_timeout_style</span> <span class="token operator">=</span> xy <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">set</span> <span class="token assign-left variable">timeout_style</span><span class="token operator">=</span>menu
  <span class="token builtin class-name">set</span> <span class="token assign-left variable">timeout</span><span class="token operator">=</span><span class="token number">30</span>
<span class="token comment"># Fallback normal timeout code in case the timeout_style feature is</span>
  <span class="token builtin class-name">set</span> <span class="token assign-left variable">timeout</span><span class="token operator">=</span><span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再看一看<code>/etc/grub.d</code>文件夹的内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ ll /etc/grub.d
total <span class="token number">72</span>
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">8702</span> Mar <span class="token number">16</span>  <span class="token number">2021</span> 00_header
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">1043</span> Mar <span class="token number">21</span>  <span class="token number">2019</span> 00_tuned
-rwxr-xr-x. <span class="token number">1</span> root root   <span class="token number">232</span> Mar <span class="token number">16</span>  <span class="token number">2021</span> 01_users
-rwxr-xr-x. <span class="token number">1</span> root root <span class="token number">10781</span> Mar <span class="token number">16</span>  <span class="token number">2021</span> 10_linux
-rwxr-xr-x. <span class="token number">1</span> root root <span class="token number">10275</span> Mar <span class="token number">16</span>  <span class="token number">2021</span> 20_linux_xen
-rwxr-xr-x. <span class="token number">1</span> root root  <span class="token number">2559</span> Mar <span class="token number">16</span>  <span class="token number">2021</span> 20_ppc_terminfo
-rwxr-xr-x. <span class="token number">1</span> root root <span class="token number">11169</span> Mar <span class="token number">16</span>  <span class="token number">2021</span> 30_os-prober
-rwxr-xr-x. <span class="token number">1</span> root root   <span class="token number">214</span> Mar <span class="token number">16</span>  <span class="token number">2021</span> 40_custom
-rwxr-xr-x. <span class="token number">1</span> root root   <span class="token number">216</span> Mar <span class="token number">16</span>  <span class="token number">2021</span> 41_custom
-rw-r--r--. <span class="token number">1</span> root root   <span class="token number">483</span> Mar <span class="token number">16</span>  <span class="token number">2021</span> README<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到文件名刚好和<code>grub.cfg</code>中段头对应。主要文件有：</p>
<ul>
<li><code>00_header</code>: 主要在创建初始的显示项目，包括需要载入的模块分析，屏幕终端格式，倒数秒数，菜单是否要隐藏等，大部分在<code>/etc/default/grub</code>里面设置的变量，用到这个脚本里用来重建<code>grub.cfg</code>。</li>
<li><code>01_users</code>: 设置账号密码，用来管控每个菜单选项进入权限。权限用在<code>menuentry</code>中有三种：不受限(<code>unrestricted</code>)，用户(<code>users</code>)，超级用户(<code>superusers</code>)。其中只有超级用户可以使用启动项编辑模式。</li>
<li><code>10_linux</code>: 根据分析<code>/boot</code>下面的文件，尝试找到正确的 Linux 内核文件与虚拟文件系统镜像等，脚本会将找到的文件路径写入到<code>grub.cfg</code>中。因为每一内核文件都会建立一个启动选项，所以可以适当删除旧内核文件来精简启动菜单。</li>
<li><code>30_os-prober</code>: 这个脚本用来找其他分区中可能存在的操作系统，如果找到则将其加入启动菜单中。可以在<code>/etc/default/grub</code>中加上<code>GRUB_DISABLE_OS_PROBER=true</code>参数来取消这一扫描。</li>
<li><code>40_custom</code>: 用来手动添加菜单项目。例如想新增一个<code>menuentry</code>来指定开机进入图形模式，可以在<code>grub.cfg</code>中复制一个<code>menuentry</code>段，修改对应的<code>title</code>、<code>id</code>与<code>linux16</code>后面的参数（增加 <code>systemd.unit=graphical.target</code>），然后再用<code>grub2-mkconfig</code>命令重建<code>grub.cfg</code>即可。</li>
</ul>
<h2 id="设置多重引导"><a class="markdownIt-Anchor" href="#设置多重引导"></a> 设置多重引导</h2>
<p>多重引导使用开机管理程序的链接（Chain Loader）功能，将开机引导程序指向其他位置。只需要设置另一个开机引导程序所在分区代号和所在扇区就可以了。</p>
<p>假设系统有一块硬盘两个分区，分别装了 Linux（sdb1）和 Windows（sdb2），我们需要增加两个开机选项，一个指向 Windows 开机菜单，一个回到 MBR 的默认环境。<code>40_custom</code>文件内容大致如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">vi</span> /etc/grub.d/40_custom 
<span class="token comment">#!/bin/sh</span>
<span class="token builtin class-name">exec</span> <span class="token function">tail</span> <span class="token parameter variable">-n</span> +3 <span class="token variable">$0</span>
<span class="token comment"># This file provides an easy way to add custom menu entries.  Simply type the</span>
<span class="token comment"># menu entries you want to add after this comment.  Be careful not to change</span>
<span class="token comment"># the 'exec tail' line above.</span>
menuentry <span class="token string">'Windows'</span> <span class="token parameter variable">--id</span> <span class="token string">'win'</span> <span class="token punctuation">&#123;</span>
        insmod chain
        insmod ntfs
        <span class="token builtin class-name">set</span> <span class="token assign-left variable">root</span><span class="token operator">=</span><span class="token punctuation">(</span>hd0,msdos2<span class="token punctuation">)</span>
        chainloader +1
menuentry <span class="token string">'MBR'</span> <span class="token parameter variable">--id</span> <span class="token string">'mbr'</span> <span class="token punctuation">&#123;</span>
        insmod chain
        <span class="token builtin class-name">set</span> <span class="token assign-left variable">root</span><span class="token operator">=</span><span class="token punctuation">(</span>hd0<span class="token punctuation">)</span>
        chainloader +1
<span class="token string">"/etc/grub.d/40_custom"</span> 14L, 469C written
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中最重要的是载入 <code>chain</code> 和 <code>ntfs</code> 模块，由此 Grub2 才能正确读取文件系统执行 Chain Loader 功能。</p>
<h2 id="启动项编辑模式"><a class="markdownIt-Anchor" href="#启动项编辑模式"></a> 启动项编辑模式</h2>
<p>在启动菜单出现后，可以按下 e 进入启动项编辑模式。也就是直接编辑<code>grub.cfg</code>文件内容。</p>
<p>例如，可以在<code>systemd.unit</code>中指定为<code>rescue.target</code>，这样就能直接进入救援模式，而不需要先进入系统。修改完毕后，使用快捷键 <code>[Ctrl]+x</code> 来执行。</p>
<h1 id="启动异常处理"><a class="markdownIt-Anchor" href="#启动异常处理"></a> 启动异常处理</h1>
<p>通常因为某些不正常的设置或不正常关机导致无法顺利开机时,可以进入 rescue 模式去处理.</p>
<h2 id="忘记-root-密码"><a class="markdownIt-Anchor" href="#忘记-root-密码"></a> 忘记 root 密码</h2>
<p>在使用 grub 做引导的系统可以这样处理：</p>
<ol>
<li>启动系统，在选择启动项的界面下，按 <code>e</code> 进入默认启动项 grub 编辑模式。</li>
<li>移动到有 kernel 那行，再按一次 <code>e</code> 进入编辑界面，在最后方输入 <code>single</code>。</li>
<li>按下回车，再按下 <code>b</code> 就可以进入单用户维护模式。</li>
<li>这一模式下可以直接用 <code>passwd</code> 命令修改 root 密码。</li>
</ol>
<p>CentOS 7 中 rescue 模式也需要 root 密码才能登录，因此可以进入 emergency 救援模式：</p>
<ol>
<li>按 <code>e</code> 进入编辑默认启动项 grub，找到 linux16 那行，在最末尾输入 <code>init=/bin/sh</code>，按 <code>[Ctrl]+x</code> 执行；</li>
<li>进入 emergency 模式后，输入 <code>mount -o remount,rw /</code> 命令将根目录挂载为可读写模式；</li>
<li>然后使用 <code>passwd</code> 命令设置新的 root 密码；</li>
<li>最后输入 <code>touch /.autorelabel</code> 更新系统信息，让 SELinux 生效；</li>
<li>执行 <code>exec /sbin/init</code> 或 <code>reboot</code> 即可退出救援模式。</li>
</ol>
<p>通过 rd.break（Ram Disk 里面的操作系统）内核启动参数也可以处理：</p>
<ol>
<li>同样在编辑默认启动项 grub，在 linux16 那行末尾加入 <code>rd.break</code> 参数，按 <code>[Ctrl]+x</code> 执行；</li>
<li>此时进入的是 Ram Disk 环境，系统被挂载到 <code>/sysroot</code> 目录下，用 <code>mount -o remount,rw /sysroot</code> 重新挂载；</li>
<li>用命令 <code>chroot /sysroot</code> 来切换根目录，并使用 <code>passwd</code> 命令修改密码；</li>
<li>同样用 <code>touch /.autorelabel</code> 来变回 SELinux 的安全标签。重启即可。</li>
</ol>
<p><code>touch /.autorelabel</code> 命令的作用：</p>
<ul>
<li>
<p>在救援模式下系统没有 SELinux，所以用 <code>passwd</code> 命令修改了 <code>/etc/shadow</code> 文件后，它的 SELinux 安全标签会被取消，在 SELinux 为 Enforcing 模式下会无法登录系统。</p>
</li>
<li>
<p>创建 <code>/.autorelabel</code> 文件就是要让系统在开机时自动使用默认 SELinux 类型重写入 SELinux 安全标签到每个文件。</p>
</li>
<li>
<p>如果不想让每个文件都更新标签，可以改完密码后，将 SELinux 运行模式改为 permissive（修改 <code>/etc/selinux/config</code> 文件）。再重新开机后运行 <code>restorecon -Rv /etc</code> 仅恢复 <code>/etc</code> 目录下的默认安全上下文类型。最后将 SELinux 配置文件的运行模式改回 enforcing，用 <code>setenforce 1</code> 来生效。</p>
</li>
</ul>
<h2 id="文件系统错误"><a class="markdownIt-Anchor" href="#文件系统错误"></a> 文件系统错误</h2>
<p>断电或不正常关机会导致文件系统错误，通常是软件数据问题。如果根目录没有损坏，可以进入维护模式下使用<code>fsck</code>命令修复<code>ext4</code>格式的分区。修复完毕后以<code>reboot</code>重启即可：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">fsck</span> /dev/sda2
<span class="token function">fsck</span> from util-linux <span class="token number">2.23</span>.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如果是<code>xfs</code>格式分区则使用<code>xfs_repair</code>命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ xfs_repair /dev/sda2
xfs_repair: cannot <span class="token function">open</span> /dev/sda2: Device or resource busy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如果整个硬盘只有一个大区，那文件系统错误一定是根目录的问题。这时候需要将硬盘拔下来，接到另外一台 Linux 系统的机器上，并且不要挂载，以<code>root</code>身份执行<code>fsck</code>或<code>xfs_repair</code>命令修复。</p>
<p>还有一种方法是使用 U 盘刻成 Live CD，在 U 盘启动的系统中执行修复命令。</p>
<h1 id="关机重启"><a class="markdownIt-Anchor" href="#关机重启"></a> 关机重启</h1>
<p>切换运行级别和模式并不会重启.</p>
<h2 id="查看用户在线状态"><a class="markdownIt-Anchor" href="#查看用户在线状态"></a> 查看用户在线状态</h2>
<p>如果有其他用户在线，强制关机可能会导致用户文件丢失，可以先使用<code>who</code>命令查看当前已登录的用户信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>user1@101c7 root<span class="token punctuation">]</span>$ <span class="token function">who</span> <span class="token parameter variable">-Hu</span>
NAME     LINE         TIME             IDLE          PID COMMENT
root     tty1         <span class="token number">2021</span>-09-11 09:35  old          <span class="token number">897</span>
root     pts/0        <span class="token number">2021</span>-09-15 <span class="token number">12</span>:12   <span class="token builtin class-name">.</span>          <span class="token number">5334</span> <span class="token punctuation">(</span><span class="token number">192.168</span>.2.101<span class="token punctuation">)</span>
root     pts/1        <span class="token number">2021</span>-09-14 08:40  old        <span class="token number">55207</span> <span class="token punctuation">(</span><span class="token number">192.168</span>.2.101<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="数据写回"><a class="markdownIt-Anchor" href="#数据写回"></a> 数据写回</h2>
<p>默认情况下，某些加载到内存中的数据不会直接被写回硬盘，而是暂存在内存中。可以手动同步将数据写入硬盘：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>user1@101c7 root<span class="token punctuation">]</span>$ <span class="token function">sync</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用重启或关机命令前也会自动调用<code>sync</code>命令。</p>
<p>当非管理员使用<code>sync</code>命令时，只会更新该用户的操作数据。</p>
<h2 id="关机操作"><a class="markdownIt-Anchor" href="#关机操作"></a> 关机操作</h2>
<p>通常使用<code>shutdown</code>命令来进行关机操作。</p>
<p>立即关机：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>user1@101c7 root<span class="token punctuation">]</span>$ <span class="token function">shutdown</span> <span class="token parameter variable">-h</span> now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>预定在 21:00 关机。如果当前时间超过 21:00 则会在隔天 21:00 才关机：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>user1@101c7 root<span class="token punctuation">]</span>$ <span class="token function">shutdown</span> <span class="token parameter variable">-h</span> <span class="token number">21</span>:00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>预定 2 分钟后关机，并发送消息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">shutdown</span> <span class="token parameter variable">-P</span> <span class="token number">120</span> <span class="token string">"will  poweroff"</span>
Shutdown scheduled <span class="token keyword">for</span> Wed <span class="token number">2021</span>-09-15 <span class="token number">16</span>:01:48 EDT, use <span class="token string">'shutdown -c'</span> to cancel.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>取消即将进行的关机操作：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">shutdown</span> <span class="token parameter variable">-c</span>
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ 
Broadcast message from root@101c7 <span class="token punctuation">(</span>Wed <span class="token number">2021</span>-09-15 <span class="token number">14</span>:01:54 EDT<span class="token punctuation">)</span>:

The system <span class="token function">shutdown</span> has been cancelled at Wed <span class="token number">2021</span>-09-15 <span class="token number">14</span>:02:54 EDT<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="重启操作"><a class="markdownIt-Anchor" href="#重启操作"></a> 重启操作</h2>
<p>重启命令可用<code>reboot</code>或<code>halt</code>，选择其一即可。</p>
<p>立即强制关机：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">halt</span> <span class="token parameter variable">-P</span> <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>同步后重启系统：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">sync</span><span class="token punctuation">;</span> <span class="token function">sync</span><span class="token punctuation">;</span> <span class="token function">sync</span><span class="token punctuation">;</span> <span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="切换执行等级"><a class="markdownIt-Anchor" href="#切换执行等级"></a> 切换执行等级</h2>
<p>可以通过<code>init</code>命令来切换运行级别，例如进入单用户维护模式：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span>$ init <span class="token number">1</span>
Broadcast message from root@localhost.localdomain on pts/1 <span class="token punctuation">(</span>Fri <span class="token number">2019</span>-07-05 <span class="token number">15</span>:40:59 CST<span class="token punctuation">)</span>:

The system is going down to rescue mode NOW<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 CentOS 7 中则是由<code>systemctl</code>来管理模式之间的切换，例如切换到救援模式：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ systemctl isolate rescue.target<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux</category>
        <category>1.基本操作</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 挂载和卸载设备操作</title>
    <url>/848908018/</url>
    <content><![CDATA[<h1 id="常用设备名"><a class="markdownIt-Anchor" href="#常用设备名"></a> 常用设备名</h1>
<p>设备在 Linux 系统中显示为文件，常见设备以及设备在系统中文件名如下：</p>
<table>
<thead>
<tr>
<th>设备</th>
<th>设备在系统内的文件名</th>
</tr>
</thead>
<tbody>
<tr>
<td>IDE 硬盘</td>
<td>/dev/hd[a-d]</td>
</tr>
<tr>
<td>SCSI/SATA/USB 硬盘</td>
<td>/dev/sd[a-p]</td>
</tr>
<tr>
<td>U 盘</td>
<td>/dev/sd[a-p]</td>
</tr>
<tr>
<td>软驱</td>
<td>/dev/fd[0-7]</td>
</tr>
<tr>
<td>打印机</td>
<td>25 针：/dev/lp[0-2] USB：/dev/usb/lp[0-15]</td>
</tr>
<tr>
<td>鼠标</td>
<td>USB：/dev/usb/mouse[0-15] PS2：/dev/psaux</td>
</tr>
<tr>
<td>当前 CD/DVD ROM</td>
<td>/dev/cdrom</td>
</tr>
<tr>
<td>当前鼠标</td>
<td>/dev/mouse</td>
</tr>
<tr>
<td>磁带机</td>
<td>IDE：/dev/ht0 SCSI：/dev/st0</td>
</tr>
</tbody>
</table>
<h1 id="挂载点"><a class="markdownIt-Anchor" href="#挂载点"></a> 挂载点</h1>
<p>在 Linux 中，挂载是将一个目录作为进入点，将磁盘分区的数据放置在该目录下，进入该目录等同于读取该分区中的内容。进入点的目录被称为挂载点，也就是虚拟目录中用于分配额外存储设备的目录。</p>
<p>例如，磁盘 1 挂载到根目录<code>/</code>，磁盘 2 挂载到<code>/ext333</code>目录，则<code>/ext333</code>目录下的文件最上层目录是<code>/ext333</code>，而不是<code>/</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ <span class="token function">ls</span> <span class="token parameter variable">-lid</span> /ext333/
<span class="token number">2</span> drwxr-xr-x. <span class="token number">3</span> root root <span class="token number">4096</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:37 /ext333/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>ext</code>文件系统最顶层目录的 inode 一般为 2 号，而<code>xfs</code>文件系统最顶层目录的 inode 一般为 128 号。由于同一个文件系统中某个 inode 只会对应一个文件，因此可以通过 inode 号码来确认不同文件名是否为相同文件。</p>
<h1 id="挂载设备"><a class="markdownIt-Anchor" href="#挂载设备"></a> 挂载设备</h1>
<p>硬盘格式化后需要挂载在目录中才能访问，磁盘挂载前需要注意以下事项：</p>
<ul>
<li>单一文件系统不应该被重复挂载在不同的挂载点（目录）中。</li>
<li>单一目录不应该重复挂载多个文件系统。</li>
<li>作为挂载点的目录理论上应该都是空目录。</li>
</ul>
<p>如果用于挂载的目录不为空，则挂载文件系统后，原目录下的内容将暂时无法访问。</p>
<p><code>mount</code>命令可用选项如下：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-a</code></td>
<td>依照配置文件<code>/etc/fstab</code>的数据将所有未挂载的磁盘都挂载上来</td>
</tr>
<tr>
<td><code>-l</code></td>
<td>显示 Label 名称</td>
</tr>
<tr>
<td><code>-t</code></td>
<td>加上文件系统类型来指定欲挂载的类型</td>
</tr>
<tr>
<td><code>-n</code></td>
<td>默认系统会将实时挂载的情况实时写入<code>/etc/mtab</code>中。<code>-n</code>可以取消写入</td>
</tr>
<tr>
<td><code>-L</code></td>
<td>利用文件系统的卷标名来挂载</td>
</tr>
<tr>
<td><code>-o</code></td>
<td>后面接一些挂载时额外加上的参数，比如账号、密码、权限等</td>
</tr>
</tbody>
</table>
<p><code>-o</code>后接的可挂载参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ro</code>/<code>rw</code></td>
<td>挂载为只读或可读写</td>
</tr>
<tr>
<td><code>async</code>/<code>sync</code></td>
<td>修改默认写入方式同步或异步，默认异步</td>
</tr>
<tr>
<td><code>auto</code>/<code>noauto</code></td>
<td>允许此分区被以<code>mount -a</code>自动挂载</td>
</tr>
<tr>
<td><code>dev</code>/<code>nodev</code></td>
<td>是否允许分区上可创建设备文件，<code>dev</code>为允许</td>
</tr>
<tr>
<td><code>suid</code>/<code>nosuid</code></td>
<td>是否允许含有 suid/sgid 的文件格式</td>
</tr>
<tr>
<td><code>exec</code>/<code>noexec</code></td>
<td>是否允许拥有可执行文件</td>
</tr>
<tr>
<td><code>user</code>/<code>nouser</code></td>
<td>是否允许此分区让任何用户执行<code>mount</code>，一般只有<code>root</code>可用<code>mount</code></td>
</tr>
<tr>
<td><code>defaults</code></td>
<td>默认值为<code>rw</code>，<code>suid</code>，<code>dev</code>，<code>exec</code>，<code>auto</code>，<code>nouser</code>，<code>async</code></td>
</tr>
<tr>
<td><code>remount</code></td>
<td>重新挂载，重新更新参数时可以重新挂载</td>
</tr>
</tbody>
</table>
<p>例如将<code>/dev/sdb4</code>挂载到<code>/root/sdb4m</code>文件夹上：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mount</span> /dev/sdb4 /root/sdb4m/
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">df</span>
Filesystem              1K-blocks    Used Available Use% Mounted on
/dev/sda1                 <span class="token number">1038336</span>  <span class="token number">190536</span>    <span class="token number">847800</span>  <span class="token number">19</span>% /boot
tmpfs                      <span class="token number">386128</span>       <span class="token number">0</span>    <span class="token number">386128</span>   <span class="token number">0</span>% /run/user/0
/dev/sdb4                   <span class="token number">92580</span>     <span class="token number">332</span>     <span class="token number">87128</span>   <span class="token number">1</span>% /root/sdb4m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看挂载情况：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mount</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">grep</span> sdb
/dev/sdb4 on /root/sdb4m <span class="token builtin class-name">type</span> ext3 <span class="token punctuation">(</span>rw,relatime,seclabel,data<span class="token operator">=</span>ordered<span class="token punctuation">)</span> <span class="token punctuation">[</span>boss<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="重新挂载"><a class="markdownIt-Anchor" href="#重新挂载"></a> 重新挂载</h1>
<p>如果进入维护模式，根目录以只读状态挂载的，可以使用重挂载功能将其挂载成可读写：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mount</span> <span class="token parameter variable">-o</span> remount,rw,auto /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="卸载设备"><a class="markdownIt-Anchor" href="#卸载设备"></a> 卸载设备</h1>
<p>有些设备例如 CD 光驱，必须卸载了才能退出来。可以使用<code>umount</code>来卸载设备。</p>
<p>使用<code>-f</code>参数强制卸载，例如卸载硬盘<code>sdb4</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">umount</span> <span class="token parameter variable">-f</span> /root/sdb4m/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果加入<code>-f</code>卸载不掉还可以使用<code>-l</code>参数试试。</p>
<h1 id="开机挂载"><a class="markdownIt-Anchor" href="#开机挂载"></a> 开机挂载</h1>
<p>开机配置文件<code>/etc/fstab</code>实际上将挂载记录到<code>/etc/mtab</code>与<code>/proc/mounts</code>这两个文件中。</p>
<p>系统挂载的限制如下：</p>
<ul>
<li>根目录 <code>/</code> 必须挂载，并且必须先于其他挂载点进行挂载。</li>
<li>挂载点必须为已存在的目录。</li>
<li>每个挂载点在同一时间内，只能挂载一次。</li>
<li>每个分区在同一时间内，只能挂载一次。</li>
<li>若要进行卸载，必须先将工作目录移到挂载点之外。</li>
</ul>
<p>查看 <code>/etc/fstab</code> 文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/fstab
/dev/mapper/centos-root /                       xfs     defaults        <span class="token number">0</span> <span class="token number">0</span>
/dev/mapper/centos-swap swap                    swap    defaults        <span class="token number">0</span> <span class="token number">0</span>
        ^                ^                       ^         ^            ^ ^
      设备名            挂载点                  文件系统   挂载参数       备份 扫描<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以第一条为例从左到右分别为:</p>
<ul>
<li>第一列：需要挂载的设备名、Label 或 UUID。</li>
<li>第二列：挂载点（必须是目录）。</li>
<li>第三列：文件系统类型。</li>
<li>第四列：挂载参数，如 <code>defaults</code>、<code>rw</code>、<code>ro</code>、<code>noauto</code> 等。这里的默认值等于 <code>mount -o default</code> 时用的值。</li>
<li>第五列：是否需要使用 dump 命令备份，<code>0</code> 代表不需要备份，<code>1</code> 表示每天需要备份。</li>
<li>第六列：用 <code>fsck</code> 检查文件系统顺序，<code>0</code> 表示不需要检查，<code>1</code> 代表在根文件系统 <code>/</code> 之前检查，<code>2</code> 代表在其他文件系统之后检查。</li>
</ul>
<p>其实<code>/etc/fstab</code>（file system table）就是将我们利用<code>mount</code>命令挂载时所用到的参数写入到了文件。</p>
<p>例如，要在 <code>/dev/sdb4</code> 开机自动挂载到 <code>/root/sdb4m</code> 目录下，可以在 <code>/etc/fstab</code> 中添加一行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">vi</span> /etc/fstab
/dev/mapper/centos-root /                       xfs     defaults        <span class="token number">0</span> <span class="token number">0</span>
/dev/mapper/centos-swap swap                    swap    defaults        <span class="token number">0</span> <span class="token number">0</span>
/dev/sdb4 /root/sdb4m                           ext3    defaults        <span class="token number">0</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后用 <code>mount -a</code> 命令更新挂载状态:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mount</span> <span class="token parameter variable">-a</span> <span class="token punctuation">;</span> <span class="token function">df</span> <span class="token operator">|</span> <span class="token function">grep</span> sdb
/dev/sdb4                   <span class="token number">92580</span>     <span class="token number">332</span>     <span class="token number">87128</span>   <span class="token number">1</span>% /root/sdb4m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可以看到硬盘已经挂载成功了。当系统重启时，<code>/dev/sdb4</code> 就会自动挂载到 <code>/root/sdb4m</code> 目录下了。</p>
<h1 id="特殊设备挂载"><a class="markdownIt-Anchor" href="#特殊设备挂载"></a> 特殊设备挂载</h1>
<p>意思为直接挂载存在硬盘中的镜像文件。也可以挂载大文件，作为虚拟磁盘使用。</p>
<p>例如挂载<code>/root/TinyCore-current.iso</code>到<code>/mnt/tinycore_iso</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mount</span> <span class="token parameter variable">-o</span> loop /root/TinyCore-current.iso /mnt/tinycore_iso/
mount: /dev/loop0 is write-protected, mounting read-only
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">df</span> <span class="token operator">|</span> <span class="token function">grep</span> loop
/dev/loop0                  <span class="token number">20348</span>   <span class="token number">20348</span>         <span class="token number">0</span> <span class="token number">100</span>% /mnt/tinycore_iso<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 CentOS 7 中可以省略<code>-o loop</code>参数。</p>
<h1 id="挂载内存盘"><a class="markdownIt-Anchor" href="#挂载内存盘"></a> 挂载内存盘</h1>
<p>所谓内存盘就是将一部分内存当作文件系统挂载起来，不过关机或卸载里面的资料会完全丢失。</p>
<p>在挂载时使用<code>-t ramfs none</code>参数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span>$ <span class="token function">mount</span> <span class="token parameter variable">-t</span> ramfs none /root/ram
<span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span>$ <span class="token function">df</span> <span class="token parameter variable">-ha</span>
Filesystem               Size  Used Avail Use% Mounted on
none                        <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>    - /root/ram<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux</category>
        <category>1.基本操作</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 文件内容处理</title>
    <url>/3847284551/</url>
    <content><![CDATA[<h1 id="提取数据列"><a class="markdownIt-Anchor" href="#提取数据列"></a> 提取数据列</h1>
<p>可以使用 <code>cut</code> 命令按行提取数据并删除所需部分，命令格式如下：</p>
<p><code>cut -d '分隔字符' -f 编号</code></p>
<p><code>cut -c 字符范围</code></p>
<p>可用参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>后面接分隔字符，与 -f 一起使用。</td>
</tr>
<tr>
<td>-f</td>
<td>选取被切割后的第几段数据。</td>
</tr>
<tr>
<td>-c</td>
<td>以字符为单位取出固定字符区间。</td>
</tr>
</tbody>
</table>
<p>例如以 <code>:</code> 为分隔符，取出 <code>PATH</code> 变量第 3 和第 5 段：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 abc<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span> <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">":"</span> <span class="token parameter variable">-f</span> <span class="token number">3,5</span>
/usr/sbin:/root/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>将 <code>export</code> 输出信息取得第 12 个字符以后的所有字符串：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 abc<span class="token punctuation">]</span>$ <span class="token builtin class-name">export</span><span class="token operator">|</span><span class="token function">head</span> -4<span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"-----"</span><span class="token punctuation">;</span><span class="token builtin class-name">export</span> <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-c</span> <span class="token number">12</span>- <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-4</span>
<span class="token builtin class-name">declare</span> <span class="token parameter variable">-x</span> <span class="token assign-left variable"><span class="token environment constant">HISTCONTROL</span></span><span class="token operator">=</span><span class="token string">"ignoredups"</span>
<span class="token builtin class-name">declare</span> <span class="token parameter variable">-x</span> <span class="token assign-left variable"><span class="token environment constant">HISTSIZE</span></span><span class="token operator">=</span><span class="token string">"1000"</span>
<span class="token builtin class-name">declare</span> <span class="token parameter variable">-x</span> <span class="token assign-left variable"><span class="token environment constant">HOME</span></span><span class="token operator">=</span><span class="token string">"/root"</span>
<span class="token builtin class-name">declare</span> <span class="token parameter variable">-x</span> <span class="token assign-left variable"><span class="token environment constant">HOSTNAME</span></span><span class="token operator">=</span><span class="token string">"101c7"</span>
-----
<span class="token assign-left variable"><span class="token environment constant">HISTCONTROL</span></span><span class="token operator">=</span><span class="token string">"ignoredups"</span>
<span class="token assign-left variable"><span class="token environment constant">HISTSIZE</span></span><span class="token operator">=</span><span class="token string">"1000"</span>
<span class="token assign-left variable"><span class="token environment constant">HOME</span></span><span class="token operator">=</span><span class="token string">"/root"</span>
<span class="token assign-left variable"><span class="token environment constant">HOSTNAME</span></span><span class="token operator">=</span><span class="token string">"101c7"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果要选取的值是 12 到 20 个字符，那么使用 <code>cut -c 12-20</code>。</p>
<h1 id="抓取数据"><a class="markdownIt-Anchor" href="#抓取数据"></a> 抓取数据</h1>
<p>使用 grep 则是分析一行信息,有需要的信息则将整行取出.简单语法如下:</p>
<p><code>grep [-acinv] '查找字符串' 文件名</code></p>
<p><code>grep -[AB] '查找字符串' 文件名</code></p>
<p>可用参数如下:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>将二进制文件以 text 文件的方式查找数据</td>
</tr>
<tr>
<td>-c</td>
<td>计算找到 ‘查找字符串’ 的次数</td>
</tr>
<tr>
<td>-i</td>
<td>忽略大小写</td>
</tr>
<tr>
<td>-n</td>
<td>输出行号</td>
</tr>
<tr>
<td>-v</td>
<td>反向选择</td>
</tr>
<tr>
<td>-E</td>
<td>使用扩展正则表达式，默认使用基础正则表达式</td>
</tr>
<tr>
<td>-P</td>
<td>使用 Perl 正则表达式</td>
</tr>
<tr>
<td>-F</td>
<td>关闭正则表达式模式，将所有的字母都看作单词</td>
</tr>
<tr>
<td>-A/Bn</td>
<td>列出找到结果的后/前 n 行</td>
</tr>
</tbody>
</table>
<p>例如取出 /etc/man_db.conf 中含有 MANPATH 的行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">grep</span> <span class="token string">'MANPATH'</span> /etc/man_db.conf 
<span class="token comment"># MANDATORY_MANPATH                     manpath_element</span>
<span class="token comment"># MANPATH_MAP           path_element    manpath_element</span>
<span class="token comment"># every automatically generated MANPATH includes these fields</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>忽略大小写，使用扩展正则表达式搜索打印出以 pw 开头的行，并显示行号：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> anaconda-ks.cfg <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-i</span> <span class="token string">'^pw.*'</span>
<span class="token number">45</span>:pwpolicy root <span class="token parameter variable">--minlen</span><span class="token operator">=</span><span class="token number">6</span> <span class="token parameter variable">--minquality</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--notstrict</span> <span class="token parameter variable">--nochanges</span> <span class="token parameter variable">--notempty</span>
<span class="token number">46</span>:pwpolicy user <span class="token parameter variable">--minlen</span><span class="token operator">=</span><span class="token number">6</span> <span class="token parameter variable">--minquality</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--notstrict</span> <span class="token parameter variable">--nochanges</span> <span class="token parameter variable">--emptyok</span>
<span class="token number">47</span>:pwpolicy luks <span class="token parameter variable">--minlen</span><span class="token operator">=</span><span class="token number">6</span> <span class="token parameter variable">--minquality</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--notstrict</span> <span class="token parameter variable">--nochanges</span> <span class="token parameter variable">--notempty</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>向搜索以 # 开头以 s 结尾的行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-vn</span> <span class="token string">'^#.*s$'</span> anaconda-ks.cfg 
<span class="token number">1</span>:<span class="token comment">#version=DEVEL</span>
<span class="token number">2</span>:<span class="token comment"># System authorization information</span>
<span class="token number">3</span>:auth <span class="token parameter variable">--enableshadow</span> <span class="token parameter variable">--passalgo</span><span class="token operator">=</span>sha512<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="排序命令"><a class="markdownIt-Anchor" href="#排序命令"></a> 排序命令</h1>
<p>使用 <code>sort</code> 命令能对文件内容进行排序。该命令的主要参数包括：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-f</td>
<td>忽略大小写差异；</td>
</tr>
<tr>
<td>-b</td>
<td>忽略最前面的空格；</td>
</tr>
<tr>
<td>-M</td>
<td>以月份的名字来排序；</td>
</tr>
<tr>
<td>-n</td>
<td>使用纯数字进行排序；</td>
</tr>
<tr>
<td>-r</td>
<td>反向排序；</td>
</tr>
<tr>
<td>-u</td>
<td>去除重复行；</td>
</tr>
<tr>
<td>-t</td>
<td>分隔符，默认是 TAB；</td>
</tr>
<tr>
<td>-k</td>
<td>以哪个分割区间来进行排序。</td>
</tr>
</tbody>
</table>
<p>例如，将 <code>passwd</code> 文件内容按第一个字符排序：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/passwd <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-4</span>
adm:x:3:4:adm:/var/adm:/sbin/nologin
bin:x:1:1:bin:/bin:/sbin/nologin
chrony:x:998:996::/var/lib/chrony:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以 <code>:</code> 为分隔符，按第 3 列（数字）排序。也可以使用 <code>-k 3,4</code> 参数来先按第三列排序，再按第四列排序：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/passwd <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-t</span> <span class="token string">':'</span> <span class="token parameter variable">-k</span> <span class="token number">3</span> <span class="token parameter variable">-n</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-5</span>
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果要统计重复数据，可以使用 <code>uniq</code> 命令。需要注意的是，<code>uniq</code> 的输入必须是有序的。例如，使用 <code>-c</code> 参数统计用户登录次数，再以从少到多排序：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ last <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">' '</span> <span class="token parameter variable">-f</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-c</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-t</span> <span class="token string">' '</span> <span class="token parameter variable">-k</span> <span class="token number">1</span> <span class="token parameter variable">-n</span>
      <span class="token number">1</span> 
      <span class="token number">1</span> wtmp
      <span class="token number">3</span> <span class="token function">reboot</span>
     <span class="token number">13</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="统计文件信息"><a class="markdownIt-Anchor" href="#统计文件信息"></a> 统计文件信息</h1>
<p>使用 <code>wc</code> 命令来统计文件信息，包括行数、单词数和文件大小。该命令可用的选项包括：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-l</td>
<td>查询文件内容行数；</td>
</tr>
<tr>
<td>-w</td>
<td>查询文件单词数；</td>
</tr>
<tr>
<td>-c</td>
<td>查询文件大小（单位 B）。</td>
</tr>
</tbody>
</table>
<p>默认参数为 <code>-lwc</code>。例如，查询文件 <code>anaconda-ks.cfg</code> 的行数、单词数和大小：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">wc</span> anaconda-ks.cfg 
  <span class="token number">48</span>  <span class="token number">122</span> <span class="token number">1260</span> anaconda-ks.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="字符转换命令"><a class="markdownIt-Anchor" href="#字符转换命令"></a> 字符转换命令</h1>
<p>可以使用 <code>tr</code> 命令删除一段信息中的文字，或进行文字信息的替换。该命令可用的参数包括：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>删除信息中的字符串；</td>
</tr>
<tr>
<td>-s</td>
<td>替换掉重复的字符。</td>
</tr>
</tbody>
</table>
<p>例如，将 <code>last</code> 命令输出的信息中所有小写字母转换为大写：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ last <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">'[a-z]'</span> <span class="token string">'[A-Z]'</span>
ROOT     TTY1                          SAT SEP <span class="token number">11</span> 09:35   STILL LOGGED IN   
ROOT     PTS/1        <span class="token number">192.168</span>.2.101    SAT SEP <span class="token number">11</span> 08:58   STILL LOGGED IN <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>删除所有 <code>passwd</code> 文件中的 DOS 断行符 <code>\r</code> 并另存为 <code>px.txt</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/passwd <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">'\r'</span> <span class="token operator">></span> px.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="转换-tab-为空格"><a class="markdownIt-Anchor" href="#转换-tab-为空格"></a> 转换 Tab 为空格</h1>
<p>在 Linux 中，默认每隔 8 个字符有一个制表位（Tab Stop）。可以使用 <code>col</code> 命令将文件中的 Tab 转换成对等的空格。例如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> <span class="token parameter variable">-A</span> /etc/man_db.conf <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"#M"</span>
<span class="token comment">#MANDATORY_MANPATH ^I^I^I/usr/src/pvm3/man$</span>
<span class="token comment">#MINCATWIDTH^I80$</span>
<span class="token comment">#MAXCATWIDTH^I80$</span>
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/man_db.conf <span class="token operator">|</span> col <span class="token parameter variable">-x</span> <span class="token operator">|</span> <span class="token function">cat</span> <span class="token parameter variable">-A</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"#M"</span>
<span class="token comment">#MANDATORY_MANPATH                      /usr/src/pvm3/man$</span>
<span class="token comment">#MINCATWIDTH    80$</span>
<span class="token comment">#MAXCATWIDTH    80$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上命令将制表位转换成了等效的空格，从而消除了 <code>^I</code> 的干扰。</p>
<p>另外，还可以使用 <code>expand</code> 命令将 Tab 转换成空格。例如，将 <code>/etc/man_db.conf</code> 文件中的制表位设置为 1，并将 Tab 转换成空格：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">grep</span> <span class="token string">"#M"</span> /etc/man_db.conf<span class="token operator">|</span> <span class="token function">expand</span> <span class="token parameter variable">-t</span> <span class="token number">1</span> 
<span class="token comment">#MANDATORY_MANPATH    /usr/src/pvm3/man</span>
<span class="token comment">#MINCATWIDTH 80</span>
<span class="token comment">#MAXCATWIDTH 80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果需要将行开头的空格转换成 Tab，可以使用 <code>unexpand</code> 命令。该命令不会操作行中间的空格，因为大多数时候，只需要使用 <code>unexpand</code> 程序进行缩进。您还可以使用 <code>-a</code> 选项将所有空格替换为 Tab。</p>
<h1 id="转换断行符"><a class="markdownIt-Anchor" href="#转换断行符"></a> 转换断行符</h1>
<p>在 Windows 中，文本文件的换行符是 <code>CRLF</code>（<code>\r\n</code>），而在 Linux 下则使用 <code>LF</code> 这个换行符。如果在 Linux 环境下执行 Windows 格式的脚本，可能会出现无法执行的错误。</p>
<p>可以通过 Notepad++ 的扩展搜索功能，将 \r 全部替换掉。也可以使用 <code>dos2unix</code> 和 <code>unix2dos</code> 命令来转换文本文件中的换行符：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ dos2unix <span class="token parameter variable">-k</span> root.txt 
dos2unix: converting <span class="token function">file</span> root.txt to Unix <span class="token function">format</span> <span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="格式化行"><a class="markdownIt-Anchor" href="#格式化行"></a> 格式化行</h1>
<p>如果需要将长行分隔成短行，可以使用 <code>fold</code> 命令。例如，将 <code>anaconda-ks.cfg</code> 文件中的行宽设置为 10 并且不分离单词：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server3 ~<span class="token punctuation">]</span>$ <span class="token function">fold</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-w</span> <span class="token number">10</span> anaconda-ks.cfg 
<span class="token comment">#version=D</span>
EVEL
<span class="token comment"># System </span>
authorizat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="格式化段落"><a class="markdownIt-Anchor" href="#格式化段落"></a> 格式化段落</h1>
<p>如果需要将段落中的各行连接在一起，使段落尽可能短小和紧凑，可以使用 <code>fmt</code> 命令。该命令假定段落由空行分隔，因此一个段落就是一个或多个连续的文本行，不包含空格。</p>
<p>例如，将文本文件 <code>anaconda-ks.cfg</code> 按照行宽 50 个字符重新格式化段落，并合并连续的空格：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server3 ~<span class="token punctuation">]</span>$ <span class="token function">fmt</span> <span class="token parameter variable">-u</span> <span class="token parameter variable">-w</span> <span class="token number">50</span> anaconda-ks.cfg 
<span class="token comment">#version=DEVEL # System authorization information</span>
auth <span class="token parameter variable">--enableshadow</span> <span class="token parameter variable">--passalgo</span><span class="token operator">=</span>sha512 <span class="token comment"># Use</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="编码转换"><a class="markdownIt-Anchor" href="#编码转换"></a> 编码转换</h1>
<p>可以使用 <code>locale</code> 命令查看与系统编码相关的设置。例如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ locale
<span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8
<span class="token assign-left variable">LC_CTYPE</span><span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果需要修改系统编码以处理乱码问题，只需要重新定义对应的变量并导出即可。例如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8 <span class="token punctuation">;</span> locale
<span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8
<span class="token assign-left variable">LC_CTYPE</span><span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果需要转换文件编码，可以使用 <code>iconv</code> 命令将文件编码转换为另一种格式。例如，将 <code>1.txt</code> 文件的原始编码 <code>big5</code> 转换为 <code>UTF-8</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 <span class="token number">4</span><span class="token punctuation">]</span>$ <span class="token function">iconv</span> <span class="token parameter variable">-f</span> big5 <span class="token parameter variable">-t</span> utf8 <span class="token number">1</span>.txt <span class="token parameter variable">-o</span> 1utf8.txt
<span class="token punctuation">[</span>root@101c7 <span class="token number">4</span><span class="token punctuation">]</span>$ <span class="token function">file</span> 1utf8.txt 
1utf8.txt: ASCII text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>另外，还可以使用 <code>iconv</code> 命令将繁体中文转换为简体中文。例如，将 <code>1.txt</code> 中的繁体中文转换为简体中文 <code>GB2312</code> 编码格式，并将结果保存到 <code>1.gb.txt</code> 文件中：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 <span class="token number">4</span><span class="token punctuation">]</span>$ <span class="token function">iconv</span> <span class="token parameter variable">-f</span> utf8 <span class="token parameter variable">-t</span> big5 <span class="token number">1</span>.txt <span class="token operator">|</span> <span class="token function">iconv</span> <span class="token parameter variable">-f</span> big5 <span class="token parameter variable">-t</span> gb2312 <span class="token operator">|</span> <span class="token function">iconv</span> <span class="token parameter variable">-f</span> gb2312 <span class="token parameter variable">-t</span> utf8 <span class="token parameter variable">-o</span> <span class="token number">1</span>.gb.txt <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="文件合并"><a class="markdownIt-Anchor" href="#文件合并"></a> 文件合并</h1>
<p>可以使用 <code>join</code> 命令将两个文件中有相同数据的那一行加在一起。例如，将 <code>passwd</code> 与 <code>shadow</code> 相关的数据整合成一列：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">join</span> <span class="token parameter variable">-t</span> <span class="token string">':'</span> /etc/passwd /etc/shadow
bin:x:1:1:bin:/bin:/sbin/nologin:*:17632:0:99999:7:::
daemon:x:2:2:daemon:/sbin:/sbin/nologin:*:17632:0:99999:7:::
adm:x:3:4:adm:/var/adm:/sbin/nologin:*:17632:0:99999:7:::<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>还可以使用 <code>paste</code> 命令将两个文件按行拼接在一起，用 Tab 分隔两个文件的行。例如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">paste</span> /etc/passwd /etc/shadow <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-3</span>
bin:x:1:1:bin:/bin:/sbin/nologin        bin:*:17632:0:99999:7:::
daemon:x:2:2:daemon:/sbin:/sbin/nologin daemon:*:17632:0:99999:7:::<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>以上命令将 <code>passwd</code> 与 <code>shadow</code> 两个文件的每一行按顺序拼接在一起，并用 Tab 分隔两个文件的行。</p>
<h1 id="文件切割"><a class="markdownIt-Anchor" href="#文件切割"></a> 文件切割</h1>
<p>可以使用 split 命令将大文件分割成小文件，参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-b</code></td>
<td>以指定大小进行切割</td>
</tr>
<tr>
<td><code>-l</code></td>
<td>以行数来进行切割</td>
</tr>
<tr>
<td><code>-d</code></td>
<td>以两位的数字而不是字母作为后缀</td>
</tr>
<tr>
<td><code>-a</code></td>
<td>指定在后缀中使用的数字或字符的数量</td>
</tr>
<tr>
<td><code>PREFIX</code></td>
<td>代表前导符,可作为切割文件的前导文字</td>
</tr>
</tbody>
</table>
<p>例如将 <code>test.iso</code> 切割成每个文件大小为 5M：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ <span class="token function">split</span> <span class="token parameter variable">-b</span> 5M test.iso file.sp <span class="token operator">|</span> ll <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'file'</span>
-rw-r--r--. <span class="token number">1</span> root root  <span class="token number">5242880</span> Sep <span class="token number">11</span> <span class="token number">12</span>:35 file.spaa
-rw-r--r--. <span class="token number">1</span> root root  <span class="token number">5242880</span> Sep <span class="token number">11</span> <span class="token number">12</span>:35 file.spab
-rw-r--r--. <span class="token number">1</span> root root  <span class="token number">5242880</span> Sep <span class="token number">11</span> <span class="token number">12</span>:35 file.spac
-rw-r--r--. <span class="token number">1</span> root root  <span class="token number">5242880</span> Sep <span class="token number">11</span> <span class="token number">12</span>:35 file.spad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以使用数据流重定向来合并切割后的文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ <span class="token function">cat</span> file1.spa* <span class="token operator">>></span> test1.iso<span class="token punctuation">;</span>ll <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'test'</span>
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">20971520</span> Sep <span class="token number">11</span> <span class="token number">12</span>:38 test1.iso
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">20971520</span> Sep <span class="token number">11</span> <span class="token number">12</span>:33 test.iso<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果不带参数，<code>split</code> 命令会以 1000 行作为切割条件。可以使用 <code>-l</code> 选项指定每 5 行记录成一个文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ <span class="token function">ls</span> <span class="token parameter variable">-la</span> <span class="token operator">|</span> <span class="token function">split</span> <span class="token parameter variable">-l</span> <span class="token number">10</span> - lsla<span class="token punctuation">;</span><span class="token function">wc</span> <span class="token parameter variable">-l</span> lsla*
<span class="token number">10</span> lslaaa
  <span class="token number">3</span> lslaab
<span class="token number">13</span> total<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>一般来说，如果需要标准输入输出且没有文件，只有 <code>-</code> 时，<code>-</code> 就被当成标准输入或标准输出。</p>
<h1 id="文件比较"><a class="markdownIt-Anchor" href="#文件比较"></a> 文件比较</h1>
<p>在 Linux 系统中，比较文件可以使用 <code>diff</code> 命令。<code>diff</code> 命令会输出将左边的文件转换为右边的文件所需的修改内容。</p>
<p>命令格式为：<code>diff [-bBi] 要比较的文件 基准文件</code></p>
<p>参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-b</td>
<td>忽略一行中仅有多个空白的区别，例如&quot;a  man&quot;与&quot;a man&quot;视为等同</td>
</tr>
<tr>
<td>-B</td>
<td>忽略空白行的区别</td>
</tr>
<tr>
<td>-i</td>
<td>忽略大小写</td>
</tr>
</tbody>
</table>
<p>例如，比较 <code>c.cfg</code> 和 <code>cnew.txt</code> 两个文件的区别:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ <span class="token function">cat</span> c.cfg 
abcaca
/root/etc/
<span class="token number">1.4</span>
1a4
<span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ <span class="token function">cat</span> cnew.cfg 
abcaca
/root/etc
<span class="token number">1.4</span>
<span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ <span class="token function">diff</span> c.cfg cnew.cfg 
2c2
<span class="token operator">&lt;</span> /root/etc/
---
<span class="token operator">></span> /root/etc
4d3
<span class="token operator">&lt;</span> 1a4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>比较结果说明如下:</p>
<table>
<thead>
<tr>
<th><strong>行</strong></th>
<th><strong>值</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><strong>2c2</strong></td>
<td>左边和右边比第 2 行不一样（c=change 改变，d=delete 删除，a=append 追加）</td>
</tr>
<tr>
<td>2</td>
<td>&lt; /root/etc/</td>
<td>显示左边文件不同的第 2 行内容</td>
</tr>
<tr>
<td>3</td>
<td>—</td>
<td>左右两个文件区分显示的分隔符</td>
</tr>
<tr>
<td>4</td>
<td>&gt; /root/etc</td>
<td>显示右边文件不同的第 2 行内容</td>
</tr>
<tr>
<td>5</td>
<td><strong>4d3</strong></td>
<td>显示左边第 4 行和右边第 3 行比不同（d 代表删除）</td>
</tr>
<tr>
<td>6</td>
<td>&lt; 1a4</td>
<td>显示左边文件第 4 行内容，而右边第 4 行不存在（被删除）</td>
</tr>
</tbody>
</table>
<p>可以直接将文件比较的区别制作成补丁文件（也叫差分），供要比较的文件使用升级。优点是反升级和升级一样方便。制作补丁参数为 -Naur：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ <span class="token function">diff</span> <span class="token parameter variable">-Naur</span> c.cfg cnew.cfg <span class="token operator">></span> c.patch<span class="token punctuation">;</span><span class="token function">cat</span> c.patch
--- c.cfg       <span class="token number">2021</span>-09-12 05:52:16.000000000 <span class="token parameter variable">-0400</span>
+++ cnew.cfg    <span class="token number">2021</span>-09-12 <span class="token number">13</span>:25:05.000000000 <span class="token parameter variable">-0400</span>
@@ -1,4 +1,3 @@
abcaca
-/root/etc/
+/root/etc
<span class="token number">1.4</span>
<span class="token parameter variable">-1a4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>提供给左侧文件使用的补丁内容：</p>
<table>
<thead>
<tr>
<th><strong>行</strong></th>
<th><strong>值</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>— c.cfg</td>
<td>左边文件信息，— 表示旧文件</td>
</tr>
<tr>
<td>2</td>
<td>+++ cnew.cfg</td>
<td>右边文件信息，+++ 表示新文件</td>
</tr>
<tr>
<td>3</td>
<td>@@ -1,4 +1,3 @@</td>
<td>修改数据的界定范围，旧文件在 1-4 行，新文件在 1-3 行</td>
</tr>
<tr>
<td>4</td>
<td>abcaca</td>
<td>第一行内容，内容前面没有符号表示不需要变动</td>
</tr>
<tr>
<td>5</td>
<td><strong>-/root/etc/</strong></td>
<td>左侧文件第二行内容。减号 - 表示删除此行</td>
</tr>
<tr>
<td>6</td>
<td><strong>+/root/etc</strong></td>
<td>右侧文件第二行内容。加号 + 表示增加此行</td>
</tr>
<tr>
<td>7</td>
<td>1.4</td>
<td>第三行内容</td>
</tr>
<tr>
<td>8</td>
<td><strong>-1a4</strong></td>
<td>左侧文件第四行内容，- 表示要删除此行</td>
</tr>
</tbody>
</table>
<p>打文件补丁使用 <code>patch</code> 命令，参数为 <code>-pN</code>，其中 N 为数字，表示取消几层目录的意思。</p>
<p>例如打补丁 c.patch：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ patch <span class="token parameter variable">-p0</span> <span class="token operator">&lt;</span>c.patch <span class="token punctuation">;</span> <span class="token function">cat</span> c.cfg 
patching <span class="token function">file</span> c.cfg
abcaca
/root/etc
<span class="token number">1.4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>恢复旧文件内容使用参数 <code>-R -pN</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ patch <span class="token parameter variable">-R</span> <span class="token parameter variable">-p0</span> <span class="token operator">&lt;</span>c.patch <span class="token punctuation">;</span> <span class="token function">cat</span> c.cfg 
patching <span class="token function">file</span> c.cfg
abcaca
/root/etc/
<span class="token number">1.4</span>
1a4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以用 <code>diff</code> 来比较目录下的区别。例如比较不同挂载点下的 lost+found 目录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ <span class="token function">diff</span> /root/sdb4m/lost+found/ /ext333/lost+found/
Only <span class="token keyword">in</span> /root/sdb4m/lost+found/: <span class="token number">1</span>
Only <span class="token keyword">in</span> /root/sdb4m/lost+found/: <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>相对于 <code>diff</code> 以行为单位比较，<code>cmp</code> 则是以字节为单位去比较，因此可以比较任何类型的文件。例如还是比较 c.cfg 与 cnew.cfg：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ <span class="token function">cmp</span> c.cfg cnew.cfg 
c.cfg cnew.cfg differ: byte <span class="token number">17</span>, line <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>其结果显示两个文件不同点在第 2 行，第 17 个字节处。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>1.基本操作</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 用户配置与环境变量</title>
    <url>/1849958032/</url>
    <content><![CDATA[<h1 id="配置登录与欢迎信息"><a class="markdownIt-Anchor" href="#配置登录与欢迎信息"></a> 配置登录与欢迎信息</h1>
<p>通过终端 tty（teletypewriter）登录后的显示信息在 <code>/etc/issue</code> 配置，telnet 的在 <code>/etc/issue.net</code>，通告在 <code>/etc/motd</code> 目录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/issue
<span class="token punctuation">\</span>S
Kernel <span class="token punctuation">\</span>r on an <span class="token punctuation">\</span>m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>可以使用反斜杠调用变量，自定义显示登录后显示信息。</p>
<h1 id="bash-环境变量配置文件"><a class="markdownIt-Anchor" href="#bash-环境变量配置文件"></a> Bash 环境变量配置文件</h1>
<p>为了让自定义变量和别名在登录时便已准备好，可以将它们写入到配置文件。</p>
<p>交互式 shell 有两种类型：</p>
<ul>
<li>
<p>登录 shell（<strong>login shell</strong>）</p>
<p>取得 bash 时需要完整登录流程，比如通过 ssh 登录，通过 <code>su -l</code> 命令切换用户。</p>
</li>
<li>
<p>非登录 shell（<strong>non-login shell</strong>）</p>
<p>取得 bash 接口的方法不需要重复登录，也叫做交互式 shell。比如在原本的 bash 环境下再执行的 bash，或使用 <code>su</code> 命令直接切换用户。</p>
</li>
</ul>
<p>还有一种 shell 是非交互式 shell，系统执行 shell 脚本时用的就是这种 shell。可以通过 BASH_ENV 环境变量来设置一些初始值。</p>
<h2 id="login-shell"><a class="markdownIt-Anchor" href="#login-shell"></a> login shell</h2>
<p>下面两个文件只有 login shell 能读取：</p>
<ul>
<li>
<p><strong>/etc/profile</strong></p>
<p>保存着系统整体的设置，对所有用户都有效。设置的主要变量有：</p>
<ul>
<li>PATH：依据 UID 决定 PATH 变量要不要含有 sbin 的系统命令目录；</li>
<li>MAIL：依据账号设置好用户的 mailbox 到 /var/spool/mail/账号名；</li>
<li>USER：根据用户的账号设置此变量内容；</li>
<li>HOSTNAME：依据主机的 hostname 命令决定此变量内容；</li>
<li>HISTSIZE：历史命令记录条数；</li>
<li>调用 /etc/profile.d/*.sh 中的脚本，里面存放了比如 ll 与 ls 命令的别名，颜色配置等；</li>
<li>调用 /etc/locale.conf 来决定 bash 使用的语言；</li>
<li>调用 /usr/share/bash-completion/completions/* 下面和参数补齐有关的脚本。</li>
</ul>
<p>不建议修改这个文件，因为此文件内容会随着系统更新而自动更新。</p>
</li>
<li>
<p><strong>~/.bash_profile</strong>（或 bash_login，profile）</p>
<p>保存着用户的个人设置。默认设置有：</p>
<ul>
<li>PATH：定义了用户主文件夹 ~/bin/ 为额外的执行文件放置目录，并且设为了环境变量；</li>
<li>调用 ~/.bashrc 的设置内容，一般个性化配置写在 .bashrc 中。</li>
</ul>
</li>
</ul>
<p>一般来说，上两文件中适合记录：</p>
<ul>
<li>创建或修改环境变量的命令，例如 PATH 变量，umask 设置等。</li>
<li>执行所有一次性操作的命令。</li>
</ul>
<h2 id="non-login-shell"><a class="markdownIt-Anchor" href="#non-login-shell"></a> non-login shell</h2>
<p>non-login shell 仅会读取 ~/.bashrc 文件：</p>
<ul>
<li>
<p><strong>~/.bashrc</strong></p>
<p>以 rc 结尾的隐藏配置文件，代表 run commands，也就是特定程序每次启动时自动运行的命令。bashrc 会调用 /etc/bashrc 这个文件，主要根据不同 UID 规定了 umask 值，PS1 变量。</p>
</li>
</ul>
<p>其他一些配置文件：</p>
<ul>
<li>
<p><strong>~/.bash_history</strong></p>
<p>记录历史命令。记录的数量与 HISTSIZE 变量有关。</p>
</li>
<li>
<p><strong>~/.bash_logout</strong></p>
<p>记录当注销 Bash 后进行的操作，可以自己加入一些命令（如清空 /tmp）在其中。</p>
</li>
</ul>
<h1 id="读入环境配置文件"><a class="markdownIt-Anchor" href="#读入环境配置文件"></a> 读入环境配置文件</h1>
<p>通常修改了 .bashrc 文件配置后，需要注销登录才会生效。也可以利用 source 命令让配置文件立即生效。</p>
<p>例如让 /etc/profile 配置文件立马生效：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用小数点（.）也可以达到同样效果：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">.</span> ~/.bash_profile <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>利用这个特性，可以将多个配置文件定义不同环境变量，需要切换时用 source 运行使其立刻生效。</p>
<h1 id="终端机和环境设置"><a class="markdownIt-Anchor" href="#终端机和环境设置"></a> 终端机和环境设置</h1>
<p>我们可以使用 <code>stty</code> 命令来设置终端机的输入按键代表意义。</p>
<p>首先，查看所有可设置参数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ stty <span class="token parameter variable">-a</span>
speed <span class="token number">38400</span> baud<span class="token punctuation">;</span> rows <span class="token number">20</span><span class="token punctuation">;</span> columns <span class="token number">107</span><span class="token punctuation">;</span> line <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
intr <span class="token operator">=</span> ^C<span class="token punctuation">;</span> quit <span class="token operator">=</span> ^<span class="token punctuation">\</span><span class="token punctuation">;</span> erase <span class="token operator">=</span> ^?<span class="token punctuation">;</span> <span class="token function">kill</span> <span class="token operator">=</span> ^U<span class="token punctuation">;</span> eof <span class="token operator">=</span> ^D<span class="token punctuation">;</span> eol <span class="token operator">=</span> <span class="token operator">&lt;</span>undef<span class="token operator">></span><span class="token punctuation">;</span> eol2 <span class="token operator">=</span> <span class="token operator">&lt;</span>undef<span class="token operator">></span><span class="token punctuation">;</span> swtch <span class="token operator">=</span> <span class="token operator">&lt;</span>undef<span class="token operator">></span><span class="token punctuation">;</span>
start <span class="token operator">=</span> ^Q<span class="token punctuation">;</span> stop <span class="token operator">=</span> ^S<span class="token punctuation">;</span> susp <span class="token operator">=</span> ^Z<span class="token punctuation">;</span> rprnt <span class="token operator">=</span> ^R<span class="token punctuation">;</span> werase <span class="token operator">=</span> ^W<span class="token punctuation">;</span> lnext <span class="token operator">=</span> ^V<span class="token punctuation">;</span> flush <span class="token operator">=</span> ^O<span class="token punctuation">;</span> min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token function">time</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token parameter variable">-parenb</span> <span class="token parameter variable">-parodd</span> <span class="token parameter variable">-cmspar</span> cs8 <span class="token parameter variable">-hupcl</span> <span class="token parameter variable">-cstopb</span> cread <span class="token parameter variable">-clocal</span> <span class="token parameter variable">-crtscts</span>
<span class="token parameter variable">-ignbrk</span> <span class="token parameter variable">-brkint</span> <span class="token parameter variable">-ignpar</span> <span class="token parameter variable">-parmrk</span> <span class="token parameter variable">-inpck</span> <span class="token parameter variable">-istrip</span> <span class="token parameter variable">-inlcr</span> <span class="token parameter variable">-igncr</span> icrnl ixon <span class="token parameter variable">-ixoff</span> <span class="token parameter variable">-iuclc</span> <span class="token parameter variable">-ixany</span> <span class="token parameter variable">-imaxbel</span> <span class="token parameter variable">-iutf8</span>
opost <span class="token parameter variable">-olcuc</span> <span class="token parameter variable">-ocrnl</span> onlcr <span class="token parameter variable">-onocr</span> <span class="token parameter variable">-onlret</span> <span class="token parameter variable">-ofill</span> <span class="token parameter variable">-ofdel</span> nl0 cr0 tab0 bs0 vt0 ff0
isig icanon iexten <span class="token builtin class-name">echo</span> echoe echok <span class="token parameter variable">-echonl</span> <span class="token parameter variable">-noflsh</span> <span class="token parameter variable">-xcase</span> <span class="token parameter variable">-tostop</span> <span class="token parameter variable">-echoprt</span> echoctl echoke<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中，有几个比较重要的设置如下：</p>
<table>
<thead>
<tr>
<th><strong>字符</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>eof</td>
<td>end of file 代表文件结束，输入终止。</td>
</tr>
<tr>
<td>erase</td>
<td>向后删除字符。</td>
</tr>
<tr>
<td>intr</td>
<td>向当前正在运行的程序发送一个中断信号（interrupt）。</td>
</tr>
<tr>
<td>kill</td>
<td>删除当前命令行上的所有文字。</td>
</tr>
<tr>
<td>quit</td>
<td>向当前正在运行的进程发送一个 quit 信号。</td>
</tr>
<tr>
<td>start</td>
<td>重新启动当前屏幕的输出显示。</td>
</tr>
<tr>
<td>stop</td>
<td>停止当前屏幕的输出显示。</td>
</tr>
<tr>
<td>susp</td>
<td>向正在运行的进程发送一个 terminal stop 信号。</td>
</tr>
</tbody>
</table>
<p><code>^</code> 代表 Ctrl 键，我们可以自定义按键。例如，将删除字符的组合键设置为 Ctrl+9：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ stty erase ^9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>除了 <code>stty</code>，还有 <code>set</code> 命令可以设置一些终端机设置值。我们可以使用 <code>set -o</code> 来查询可用选项：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server3 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">set</span> <span class="token parameter variable">-o</span>
allexport       off
braceexpand     on
emacs           on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux</category>
        <category>1.基本操作</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 权限配置管理</title>
    <url>/2354164977/</url>
    <content><![CDATA[<h1 id="修改文件所属用户组"><a class="markdownIt-Anchor" href="#修改文件所属用户组"></a> 修改文件所属用户组</h1>
<p>使用 <code>chgrp</code> 可以改变一个文件的所属用户组，目标组名必须已经存在于 <code>/etc/group</code>。</p>
<p>例如修改 <code>dir1</code> 文件夹的所属组为 <code>tss</code>：</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">chgrp</span> tss dir1 <span class="token punctuation">;</span> ll
total <span class="token number">4</span>
-rw-------. <span class="token number">1</span> root root <span class="token number">1260</span> Sep  <span class="token number">7</span> <span class="token number">13</span>:38 anaconda-ks.cfg
drwxr-xr-x. <span class="token number">2</span> <span class="token function">ftp</span>  tss    <span class="token number">16</span> Sep  <span class="token number">8</span> <span class="token number">23</span>:29 dir1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用选项 <code>-R</code> 可以递归修改目录 <code>dir1</code> 下内容的所属组：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">chgrp</span> input <span class="token parameter variable">-R</span> dir1 <span class="token punctuation">;</span> ll dir1
total <span class="token number">0</span>
-rw-r--r--. <span class="token number">1</span> root input <span class="token number">0</span> Sep  <span class="token number">8</span> <span class="token number">23</span>:29 xx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="修改文件所有者"><a class="markdownIt-Anchor" href="#修改文件所有者"></a> 修改文件所有者</h1>
<p>使用<code>chown</code>命令可以修改文件或目录的所有者和所属组。目标用户名必须已经存在于<code>/etc/passwd</code>文件中。</p>
<p>例如，将文件夹<code>dir1</code>的所有者设置为<code>lp</code>，所属组设置为<code>tape</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">chown</span> lp:tape dir1 <span class="token punctuation">;</span> ll
total <span class="token number">4</span>
-rw-------. <span class="token number">1</span> root root <span class="token number">1260</span> Sep  <span class="token number">7</span> <span class="token number">13</span>:38 anaconda-ks.cfg
drwxr-xr-x. <span class="token number">2</span> lp   tape   <span class="token number">16</span> Sep  <span class="token number">8</span> <span class="token number">23</span>:29 dir1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用<code>-R</code>参数可以递归修改目录下的文件或子目录的所有者和所属组：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">chown</span> <span class="token parameter variable">-R</span> ftp:ftp dir1 <span class="token punctuation">;</span> ll dir1
total <span class="token number">0</span>
-rw-r--r--. <span class="token number">1</span> <span class="token function">ftp</span> <span class="token function">ftp</span> <span class="token number">0</span> Sep  <span class="token number">8</span> <span class="token number">23</span>:29 xx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="修改文件权限"><a class="markdownIt-Anchor" href="#修改文件权限"></a> 修改文件权限</h1>
<p>使用<code>chmod</code>设置权限（只有文件所有者和 root 能执行），可以使用数字或字符来更改，数字类型采用数字累加来代表：</p>
<table>
<thead>
<tr>
<th>数字</th>
<th>字符</th>
<th>权限（文件/目录）</th>
</tr>
</thead>
<tbody>
<tr>
<td>4</td>
<td>r</td>
<td>读取文件内容/查看目录下的文件或目录名称（无法看到属性）</td>
</tr>
<tr>
<td>2</td>
<td>w</td>
<td>修改文件内容（不包含删除）/在目录下新建、删除、重命名文件或目录</td>
</tr>
<tr>
<td>1</td>
<td>x</td>
<td>文件可以被系统执行/进入目录、遍历目录</td>
</tr>
</tbody>
</table>
<p>特殊权限：</p>
<table>
<thead>
<tr>
<th>数字</th>
<th>权限（文件/目录）</th>
</tr>
</thead>
<tbody>
<tr>
<td>4</td>
<td>SUID（用在文件上）</td>
</tr>
<tr>
<td>2</td>
<td>SGID</td>
</tr>
<tr>
<td>1</td>
<td>SBIT（用在目录上）</td>
</tr>
</tbody>
</table>
<p>例如修改<code>dir1</code>文件夹的权限为<code>rwxrw---x</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">chmod</span> <span class="token number">761</span> dir1 <span class="token punctuation">;</span> ll
total <span class="token number">4</span>
-rw-------. <span class="token number">1</span> root root <span class="token number">1260</span> Sep  <span class="token number">7</span> <span class="token number">13</span>:38 anaconda-ks.cfg
drwxrw---x. <span class="token number">2</span> <span class="token function">ftp</span>  tss    <span class="token number">16</span> Sep  <span class="token number">8</span> <span class="token number">23</span>:29 dir1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>用字符类型改变文件权限方式：</p>
<ul>
<li>用<code>u</code>、<code>g</code>、<code>o</code>、<code>a</code>分别表示所有者、组、其他人和所有人。</li>
<li>用<code>+</code>、<code>-</code>、<code>=</code>分别表示增加、去除、设置权限。如果没有指定权限，则该权限不会发生变化。</li>
</ul>
<p>例如设置 <code>dir1</code> 文件夹及其下的所有文件权限为 <code>rwxrwxr--</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token assign-left variable">u</span><span class="token operator">=</span>rwx,g<span class="token operator">=</span>rwx,o<span class="token operator">=</span>r dir1
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ ll dir1
total <span class="token number">0</span>
-rwxrwxr--. <span class="token number">1</span> <span class="token function">ftp</span> root <span class="token number">0</span> Sep  <span class="token number">8</span> <span class="token number">23</span>:29 xx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>设置 <code>dir</code> 文件夹禁止进入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">chmod</span> a-x dir1 <span class="token punctuation">;</span> ll
total <span class="token number">4</span>
-rw-------. <span class="token number">1</span> root root <span class="token number">1260</span> Sep  <span class="token number">7</span> <span class="token number">13</span>:38 anaconda-ks.cfg
drw-rw-r--. <span class="token number">2</span> <span class="token function">ftp</span>  tss    <span class="token number">16</span> Sep  <span class="token number">8</span> <span class="token number">23</span>:29 dir1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>要给文件 <code>2</code> 设置 SUID/SGID 的权限（也可以使用 <code>u+s,g+s,o+t</code> 命令来设置 SUID、SGID、SBIT），可以使用以下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">chmod</span> <span class="token number">6755</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token number">2</span>
-rwsr-sr-x. <span class="token number">1</span> root root <span class="token number">0</span> Sep  <span class="token number">9</span> 07:57 <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>当用户没有执行权限却设置了特殊权限时，特殊权限中的 <code>s</code> 和 <code>t</code> 会变成 <code>S</code> 和 <code>T</code>，表示无效权限。例如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">chmod</span> <span class="token number">7666</span> <span class="token number">2</span><span class="token punctuation">;</span> ll <span class="token number">2</span>
-rwSrwSrwT. <span class="token number">1</span> root root <span class="token number">0</span> Sep  <span class="token number">9</span> 08:57 <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="修改默认权限"><a class="markdownIt-Anchor" href="#修改默认权限"></a> 修改默认权限</h1>
<p>文件创建时默认（<code>umask</code> 为 <code>000</code> 的情况）权限是 <code>666</code>，文件夹是 <code>777</code>，可以使用 <code>umask</code> 来对这一权限进一步削弱。</p>
<p><code>root</code> 用户的 <code>umask</code> 默认为 <code>022</code>，一般用户为 <code>002</code>。使用 <code>umask</code> 修改的值必须写入到 <code>.profile</code> 文件中才能一直生效。</p>
<p>查看目前用户在新建文件和目录时的权限默认值：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token builtin class-name">umask</span>
0022<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>上述命令表示新建文件不包括属组和其他用户的写权限。如果要添加属组的写权限，需要定义 <code>umask</code> 值：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 audit<span class="token punctuation">]</span>$ <span class="token builtin class-name">umask</span> 002 <span class="token punctuation">;</span> <span class="token builtin class-name">umask</span>
0002<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="访问控制列表"><a class="markdownIt-Anchor" href="#访问控制列表"></a> 访问控制列表</h1>
<p>在默认权限无法满足要求时，可以考虑使用访问控制列表。</p>
<h2 id="acl-访问控制列表"><a class="markdownIt-Anchor" href="#acl-访问控制列表"></a> ACL 访问控制列表</h2>
<p>ACL 是 Access Control List 的缩写，主要用于提供传统权限之外的具体权限设置。ACL 可以针对单个用户或组、单个文件或目录进行权限控制。</p>
<p>默认情况下，系统会自动启用 ACL 支持。可以使用 <code>dumpe2fs -h</code> 命令查询挂载参数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mount</span> <span class="token operator">|</span> <span class="token function">grep</span> sd
/dev/sda1 on /boot <span class="token builtin class-name">type</span> xfs <span class="token punctuation">(</span>rw,relatime,seclabel,attr2,inode64,noquota<span class="token punctuation">)</span>
/dev/sdb4 on /root/sdb4m <span class="token builtin class-name">type</span> ext3 <span class="token punctuation">(</span>rw,relatime,seclabel,data<span class="token operator">=</span>ordered<span class="token punctuation">)</span>
/dev/sdb5 on /ext333 <span class="token builtin class-name">type</span> ext3 <span class="token punctuation">(</span>rw,relatime,seclabel,data<span class="token operator">=</span>ordered<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ dumpe2fs <span class="token parameter variable">-h</span> /dev/sdb4 <span class="token operator">|</span> <span class="token function">grep</span> acl
dumpe2fs <span class="token number">1.42</span>.9 <span class="token punctuation">(</span><span class="token number">28</span>-Dec-2013<span class="token punctuation">)</span>
Default <span class="token function">mount</span> options:    user_xattr acl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若要手动挂载 ACL，可以使用 <code>mount -o remount,acl /</code> 命令，或者修改启动配置 <code>/etc/fstab</code>。</p>
<h2 id="设置-acl"><a class="markdownIt-Anchor" href="#设置-acl"></a> 设置 ACL</h2>
<p>可以使用 <code>setfacl</code> 来设置某个文件或目录的 ACL 规定，命令用法如下：</p>
<p><code>setfacl [-bkRd] [&#123;-m|-x&#125; acl 参数] 目标</code></p>
<p>参数说明：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-m</td>
<td>设置后续的 ACL 参数给文件使用</td>
</tr>
<tr>
<td>-x</td>
<td>删除后续的 ACL 参数</td>
</tr>
<tr>
<td>-b</td>
<td>删除所有的 ACL 设置参数</td>
</tr>
<tr>
<td>-k</td>
<td>删除默认的 ACL 参数</td>
</tr>
<tr>
<td>-R</td>
<td>递归设置</td>
</tr>
<tr>
<td>-d</td>
<td>设置默认 ACL 参数，只对目录有效，目录下新建的数据都会用此默认值</td>
</tr>
</tbody>
</table>
<p>针对单个用户设置，例如给用户 <code>user1</code> 设置目录 <code>dir1</code> 的读取和执行权限：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ setfacl <span class="token parameter variable">-m</span> u:user1:rx dir1
<span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ ll <span class="token parameter variable">-d</span> dir1
drwxr-xr-x+ <span class="token number">2</span> root root <span class="token number">2048</span> Sep <span class="token number">13</span> 07:34 dir1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>可以看到权限部分多了一个加号 <code>+</code>。</p>
<h2 id="查询-acl"><a class="markdownIt-Anchor" href="#查询-acl"></a> 查询 ACL</h2>
<p>要查询特殊权限，可以使用 <code>getfacl</code> 命令，该命令参数与 <code>setfacl</code> 相同。例如，要查询 <code>dir1</code> 的权限内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ getfacl dir1
<span class="token comment"># file: dir1</span>
<span class="token comment"># owner: root</span>
<span class="token comment"># group: root</span>
user::rwx
user:user1:r-x
group::r-x
mask::r-x
other::r--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中，<code>user</code>、<code>group</code>、<code>other</code> 代表普通权限。另外，还有一条刚设置的 <code>user1</code> 权限。</p>
<h2 id="有效权限"><a class="markdownIt-Anchor" href="#有效权限"></a> 有效权限</h2>
<p>ACL 中的 <code>mask</code> 规定了最大权限，也就是单独设置的权限不能超过 <code>mask</code> 显示的权限。</p>
<p>首先，给用户组 <code>user1</code> 设置目录 <code>dir1</code> 的写权限：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ setfacl <span class="token parameter variable">-m</span> g:user1:w dir1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后，将 <code>dir1</code> 的 <code>mask</code> 权限设置为只读：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ setfacl <span class="token parameter variable">-m</span> m:r dir1
<span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ getfacl dir1
<span class="token comment"># file: dir1</span>
<span class="token comment"># owner: root</span>
<span class="token comment"># group: root</span>
user::rwx
user:user1:r-x                  <span class="token comment">#effective:r--</span>
group::r-x                      <span class="token comment">#effective:r--</span>
group:user1:-w-                 <span class="token comment">#effective:---</span>
mask::r--
other::r-x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样，<code>effective</code> 后面显示的才是有效权限。</p>
<h2 id="权限继承"><a class="markdownIt-Anchor" href="#权限继承"></a> 权限继承</h2>
<p>可以使用 <code>d:[ug]:用户列表:[rwx]</code> 命令设置 ACL 权限被后续子文件夹和目录继承：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ setfacl <span class="token parameter variable">-m</span> d:g:user1:w dir1
<span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> dir2 <span class="token punctuation">;</span> <span class="token function">ls</span> <span class="token parameter variable">-ld</span> dir2 <span class="token punctuation">;</span> getfacl dir2
drwxrwxr-x+ <span class="token number">2</span> root root <span class="token number">2048</span> Sep <span class="token number">13</span> 07:56 dir2
<span class="token comment"># file: dir2</span>
<span class="token comment"># owner: root</span>
<span class="token comment"># group: root</span>
user::rwx
group::r-x
group:user1:-w-
mask::rwx
other::r-x
default:user::rwx
default:group::r-x
default:group:user1:-w-
default:mask::rwx
default:other::r-x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样设置后，<code>dir2</code> 目录会继承 <code>dir1</code> 目录的 ACL 权限。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>2.系统管理</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 磁盘配额管理</title>
    <url>/3427262780/</url>
    <content><![CDATA[<h1 id="磁盘配额简介"><a class="markdownIt-Anchor" href="#磁盘配额简介"></a> 磁盘配额简介</h1>
<p>Linux 下磁盘配额功能叫 <code>quota</code>。</p>
<h2 id="一般用途"><a class="markdownIt-Anchor" href="#一般用途"></a> 一般用途</h2>
<ul>
<li>限制服务使用空间容量；</li>
<li>限制某一用户组所能使用的最大磁盘配额；</li>
<li>限制某一用户的最大磁盘配额；</li>
<li>限制某一目录的最大磁盘配额。</li>
</ul>
<h2 id="使用限制"><a class="markdownIt-Anchor" href="#使用限制"></a> 使用限制</h2>
<ul>
<li><code>EXT</code> 文件系统下仅能针对整个文件系统设置；</li>
<li>针对单一目录的设置（<code>prjquota</code>）和针对群组的设置（<code>grpquota</code>）不能共存；</li>
<li>内核必须支持；</li>
<li>只对一般身份用户有效。比如 <code>root</code> 就不能设置配额。也不能针对目录来设置（<code>ext</code> 文件系统）；</li>
<li>若启用 <code>SELinux</code>，非所有目录都可设置 <code>quota</code>。</li>
</ul>
<h2 id="设置选项"><a class="markdownIt-Anchor" href="#设置选项"></a> 设置选项</h2>
<ul>
<li>分别针对使用者，群组或个别目录（<code>user</code>，<code>group</code> &amp; <code>project</code>）；</li>
<li>容量限制（<code>block</code>）或文件数量限制（<code>inode</code>）；</li>
<li>警告（<code>soft</code>）与限制值（<code>hard</code>）；</li>
<li>宽限时间（<code>grace time</code>），在用量介于 <code>soft</code> 与 <code>hard</code> 之间时给予警告，并给予宽限时间（默认 7 天）。如果在宽限期内没把用量降到 <code>soft</code> 值之下，<code>soft</code> 限制值会替代 <code>hard</code> 值作为 <code>quota</code> 的限制。</li>
</ul>
<h2 id="开启-quota-支持"><a class="markdownIt-Anchor" href="#开启-quota-支持"></a> 开启 Quota 支持</h2>
<p><code>ext</code> 和 <code>xfs</code> 文件系统默认支持 <code>quota</code>，要手动加入 <code>quota</code> 支持可以使用 <code>mount -o remount,usrquota,grpquota /</code> 命令来重新挂载。<code>usrquota</code> 和 <code>grpquota</code> 参数分别代表用户与用户组支持参数。</p>
<p>写入配置文件可以修改 <code>/etc/fstab</code> 文件，在挂载参数后面加入 <code>usrquota</code> 和 <code>grpquota</code> 或 <code>prjquota</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">vi</span> /etc/fstab
/dev/sdb4 /root/sdb4m                    ext3    defaults        <span class="token number">0</span> <span class="token number">0</span>
/dev/sdd1 /xfs333                  xfs           defaults,usrquota,grpquota  <span class="token number">0</span> <span class="token number">0</span>
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">umount</span> /xfs333
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mount</span> <span class="token parameter variable">-a</span>
mount: /dev/sdb4 is already mounted or /root/sdb4m busy
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mount</span> <span class="token operator">|</span> <span class="token function">grep</span> sdd
/dev/sdd1 on /xfs333 <span class="token builtin class-name">type</span> xfs <span class="token punctuation">(</span>rw,relatime,seclabel,attr2,inode64,usrquota,grpquota<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="ext-文件系统磁盘配额"><a class="markdownIt-Anchor" href="#ext-文件系统磁盘配额"></a> EXT 文件系统磁盘配额</h1>
<p>由于 EXT 文件系统中使用的工具和 XFS 文件系统不同，因此分别记录。</p>
<h2 id="新建-quota-配置文件"><a class="markdownIt-Anchor" href="#新建-quota-配置文件"></a> 新建 Quota 配置文件</h2>
<p>Quota 是通过分析整个文件系统中每个用户(用户组)拥有的文件总数与总容量，将数据记录在该文件系统的最顶层目录，然后在该配置文件中再使用每个账号或组的限制值去规定磁盘使用量。</p>
<p>可以使用<code>quotacheck</code>命令来新建 Quota 配置文件，用法如下：</p>
<p><code>quotacheck [-avugfM] [挂载点]</code></p>
<p>主要参数:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>扫描所有在<code>/etc/mtab</code>内 Quota 支持的文件系统，加入此参数后可不写挂载点</td>
</tr>
<tr>
<td>-u</td>
<td>针对用户扫描文件与目录使用情况，会新建<code>aquota.user</code></td>
</tr>
<tr>
<td>-g</td>
<td>针对用户组扫描文件与目录使用情况，会新建<code>aquota.group</code></td>
</tr>
<tr>
<td>-v</td>
<td>显示扫描过程</td>
</tr>
<tr>
<td>-f</td>
<td>强制扫描文件系统，并写入新的 Quota 配置文件</td>
</tr>
<tr>
<td>-M</td>
<td>强制以读写的方式扫描文件系统</td>
</tr>
</tbody>
</table>
<p>对整个系统执行扫描并新建配置文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">quotacheck</span> <span class="token parameter variable">-avug</span>
quotacheck: Your kernel probably supports journaled <span class="token function">quota</span> but you are not using it. Consider switching to journaled <span class="token function">quota</span> to avoid running <span class="token function">quotacheck</span> after an unclean shutdown.
quotacheck: Scanning /dev/sdb4 <span class="token punctuation">[</span>/root/sdb4m<span class="token punctuation">]</span> <span class="token keyword">done</span>
quotacheck: Cannot <span class="token function">stat</span> old user <span class="token function">quota</span> <span class="token function">file</span> /root/sdb4m/aquota.user: No such <span class="token function">file</span> or directory. Usage will not be subtracted.
quotacheck: Checked <span class="token number">8</span> directories and <span class="token number">19</span> files
quotacheck: Old <span class="token function">file</span> not found.
quotacheck: Old <span class="token function">file</span> not found.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在挂载点查询新建的配额配置文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ ll <span class="token parameter variable">-d</span> /root/sdb4m/aq*
-rw-------. <span class="token number">1</span> root root <span class="token number">7168</span> Sep <span class="token number">13</span> <span class="token number">13</span>:26 /root/sdb4m/aquota.group
-rw-------. <span class="token number">1</span> root root <span class="token number">7168</span> Sep <span class="token number">13</span> <span class="token number">13</span>:26 /root/sdb4m/aquota.user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>配置文件不用手动去编辑，因为实际上是 Quota 的数据文件，内容会一直变动。</p>
<h2 id="启动与关闭-quota"><a class="markdownIt-Anchor" href="#启动与关闭-quota"></a> 启动与关闭 Quota</h2>
<p>启动 quota 服务使用命令<code>quotaon</code>，加入<code>-auvg</code>参数来启动所有功能：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ quotaon <span class="token parameter variable">-avug</span>
/dev/sdb4 <span class="token punctuation">[</span>/root/sdb4m<span class="token punctuation">]</span>: group quotas turned on
/dev/sdb4 <span class="token punctuation">[</span>/root/sdb4m<span class="token punctuation">]</span>: user quotas turned on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>quota 启动一次后，系统的<code>/etc/rc.d/rc.sysinit</code>初始化脚本都会自动执行该命令。</p>
<p>关闭 quota 服务使用<code>quotaoff</code>命令，用<code>-a</code>参数关闭所有功能：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ quotaoff <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="编辑-quota"><a class="markdownIt-Anchor" href="#编辑-quota"></a> 编辑 Quota</h2>
<p>编辑配额使用<code>edquota</code>命令，语法如下：</p>
<p><code>edquota [-u 用户名] [-g 组]</code></p>
<p><code>edquota -t 宽限时间</code></p>
<p><code>edquota -p 范本账号 -u 新账号</code></p>
<p>例如设置用户<code>user1</code>的 Quota 限制值为 hard=10MB，soft=8MB：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ edquota <span class="token parameter variable">-u</span> user1
Disk quotas <span class="token keyword">for</span> user user1 <span class="token punctuation">(</span>uid <span class="token number">1003</span><span class="token punctuation">)</span>:
  Filesystem                   blocks       soft       hard     inodes     soft     hard
  /dev/sdb4                         <span class="token number">2</span>       <span class="token number">8000</span>      <span class="token number">10000</span>          <span class="token number">1</span>        <span class="token number">0</span>        <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>会进入到编辑页面，总共七个字段说明如下：</p>
<table>
<thead>
<tr>
<th>编号</th>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Filesystem</td>
<td>说明针对的文件系统</td>
</tr>
<tr>
<td>2</td>
<td>blocks</td>
<td>磁盘容量，单位为 KB</td>
</tr>
<tr>
<td>3</td>
<td>soft</td>
<td>磁盘容量的 soft 限制值，单位 KB</td>
</tr>
<tr>
<td>4</td>
<td>hard</td>
<td>磁盘容量的 hard 限制值，单位 KB</td>
</tr>
<tr>
<td>5</td>
<td>inodes</td>
<td>文件数量</td>
</tr>
<tr>
<td>6</td>
<td>soft</td>
<td>文件数量的 soft 限制值</td>
</tr>
<tr>
<td>7</td>
<td>hard</td>
<td>文件数量的 hard 限制值</td>
</tr>
</tbody>
</table>
<p>修改宽限时间为 14 天：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ edquota <span class="token parameter variable">-t</span>
Grace period before enforcing soft limits <span class="token keyword">for</span> users:
Time <span class="token function">units</span> may be: days, hours, minutes, or seconds
  Filesystem             Block grace period     Inode grace period
  /dev/sdb4                    14days                  7days<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="设置-quota"><a class="markdownIt-Anchor" href="#设置-quota"></a> 设置 Quota</h2>
<p>除了修改配置文件，还可以通过<code>setquota</code>命令来设置 Quota 的值。命令语法如下：</p>
<p><code>setquota [-u|-g] 用户名|组名 容量限制(soft) 容量限制(hard) 文件数限制(soft) 文件数限制(hard)</code></p>
<p>例如，将<code>user1</code>的文件数限制设置为 1000/2000：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ setquota <span class="token parameter variable">-u</span> user1 <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1000</span> <span class="token number">2000</span> /root/sdb4m<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="quota-报表"><a class="markdownIt-Anchor" href="#quota-报表"></a> Quota 报表</h2>
<p>针对用户或组查询限额报表使用 <code>quota</code> 命令，命令语法如下：</p>
<p><code>quota [-uvs] [用户名]</code></p>
<p><code>quota [-gvs] [组名]</code></p>
<p>例如查询用户<code>user1</code>的限额：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>user1@101c7 sdb4m<span class="token punctuation">]</span>$ <span class="token function">quota</span> <span class="token parameter variable">-uvs</span> user1
Disk quotas <span class="token keyword">for</span> user user1 <span class="token punctuation">(</span>uid <span class="token number">1003</span><span class="token punctuation">)</span>: 
     Filesystem   space   <span class="token function">quota</span>   limit   grace   files   <span class="token function">quota</span>   limit   grace
      /dev/sdb4   9250K*  8000K  10000K  13days       <span class="token number">5</span>       <span class="token number">0</span>       <span class="token number">0</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>显示的内容和<code>edquota</code>编辑时看到的字段差不多，多了一个宽限日期。</p>
<p>针对整个文件系统配额查询可以使用<code>repquota</code>命令：</p>
<p><code>repquota -a [-vugs]</code></p>
<p>参数如下:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>直接到<code>/etc/mtab</code>查询具有 quota 标志的文件系统，并报告 quota 的结果</td>
</tr>
<tr>
<td>-v</td>
<td>输出的数据将含有文件系统相关的详细信息</td>
</tr>
<tr>
<td>-u</td>
<td>显示出用户的 quota 限值</td>
</tr>
<tr>
<td>-g</td>
<td>显示出个别用户组的 quota 限值</td>
</tr>
<tr>
<td>-s</td>
<td>以 M，G 为单位显示结果</td>
</tr>
</tbody>
</table>
<p>例如查询所有用户的 quota 限制情况：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ repquota <span class="token parameter variable">-auvs</span>
*** Report <span class="token keyword">for</span> user quotas on device /dev/sdb4
Block grace time: 14days<span class="token punctuation">;</span> Inode grace time: 7days
                        Space limits                File limits
User            used    soft    hard  grace    used  soft  hard  grace
----------------------------------------------------------------------
root      --     78K      0K      0K             <span class="token number">17</span>     <span class="token number">0</span>     <span class="token number">0</span>       
user1     +-   9250K   8000K  10000K 13days       <span class="token number">5</span>     <span class="token number">0</span>     <span class="token number">0</span>       

Statistics:
Total blocks: <span class="token number">7</span>
Data blocks: <span class="token number">1</span>
Entries: <span class="token number">2</span>
Used average: <span class="token number">2.000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="xfs-文件系统磁盘配额"><a class="markdownIt-Anchor" href="#xfs-文件系统磁盘配额"></a> XFS 文件系统磁盘配额</h1>
<p>在 xfs 文件系统下，主要使用 <code>xfs_quota</code> 命令进行配额管理。</p>
<h2 id="查询状态"><a class="markdownIt-Anchor" href="#查询状态"></a> 查询状态</h2>
<p>基本使用方法为:<code>xfs_quota -x -c &quot;指令&quot; [挂载点]</code>，其中 <code>-x</code> 表示使用专家模式，<code>-c</code> 后面加的指令有以下：</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>print</td>
<td>单纯列出目前主机内的文件系统参数等数据</td>
</tr>
<tr>
<td>df</td>
<td>与原本 <code>df</code> 一样的功能，可加上 <code>-b</code>、<code>-i</code>、<code>-h</code> 等参数</td>
</tr>
<tr>
<td>report</td>
<td>列出目前的 quota 项目，有 <code>-ugr</code> 及 <code>-bi</code> 等数据</td>
</tr>
<tr>
<td>state</td>
<td>说明目前支持 quota 的文件系统信息，有没有启动相关项目等</td>
</tr>
</tbody>
</table>
<p>在使用了 <code>usrquota</code>、<code>grpquota</code> 参数挂载完文件系统后，可以用 <code>print</code> 指令查询：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"print"</span>
Filesystem          Pathname
/                   /dev/mapper/centos-root
/boot               /dev/sda1
/xfs333             /dev/sdd1 <span class="token punctuation">(</span>uquota, gquota<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查询挂载点 <code>/xfs333</code> 文件系统使用情况：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"df -h"</span> /xfs333/
Filesystem     Size   Used  Avail Use% Pathname
/dev/sdd1    <span class="token number">496</span>.7M  <span class="token number">55</span>.8M <span class="token number">440</span>.8M  <span class="token number">11</span>% /xfs333<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>列出目前 <code>/xfs333</code> 的所有用户 quota 限制值：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"report -ubih"</span> /xfs333
User <span class="token function">quota</span> on /xfs333 <span class="token punctuation">(</span>/dev/sdd1<span class="token punctuation">)</span>
                        Blocks                            Inodes              
User ID      Used   Soft   Hard Warn/Grace     Used   Soft   Hard Warn/Grace  
---------- --------------------------------- --------------------------------- 
root        <span class="token number">30</span>.0M      <span class="token number">0</span>      <span class="token number">0</span>  00 <span class="token punctuation">[</span>------<span class="token punctuation">]</span>      <span class="token number">7</span>      <span class="token number">0</span>      <span class="token number">0</span>  00 <span class="token punctuation">[</span>------<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到目前只有 <code>root</code> 在目录中使用了 30MB，而且没有设限。使用 <code>state</code> 指令查询 <code>/xfs333</code> 的 quota 功能启用情况：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"state"</span>
User <span class="token function">quota</span> state on /xfs333 <span class="token punctuation">(</span>/dev/sdd1<span class="token punctuation">)</span>
  Accounting: ON
  Enforcement: ON
  Inode: <span class="token comment">#68 (1 blocks, 1 extents)</span>
Group <span class="token function">quota</span> state on /xfs333 <span class="token punctuation">(</span>/dev/sdd1<span class="token punctuation">)</span>
  Accounting: ON
  Enforcement: ON
  Inode: <span class="token comment">#69 (1 blocks, 1 extents)</span>
Project <span class="token function">quota</span> state on /xfs333 <span class="token punctuation">(</span>/dev/sdd1<span class="token punctuation">)</span>
  Accounting: OFF
  Enforcement: OFF
  Inode: <span class="token comment">#69 (1 blocks, 1 extents)</span>
Blocks grace time: <span class="token punctuation">[</span><span class="token number">7</span> days<span class="token punctuation">]</span>
Inodes grace time: <span class="token punctuation">[</span><span class="token number">7</span> days<span class="token punctuation">]</span>
Realtime Blocks grace time: <span class="token punctuation">[</span><span class="token number">7</span> days<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="针对用户和组设置-quota"><a class="markdownIt-Anchor" href="#针对用户和组设置-quota"></a> 针对用户和组设置 Quota</h2>
<p>设置使用的命令格式为：</p>
<p><code>xfs_quota -x -c &quot;limit [-ug] b[soft|hard]=限制值 i[soft|hard]=限制值 用户或组名&quot; 挂载点</code></p>
<p><code>xfs_quota -x -c &quot;timer [-ug] [-bir] Ndays&quot;</code></p>
<p>上面命令为限制 block 和 inode，下面命令为设置 grace 时间。针对用户/组设置使用<code>-u</code>/<code>-g</code>参数。</p>
<p>例如限制用户<code>user1</code>对<code>/xfs333</code>的<code>bsoft</code>为 100MB，<code>bhard</code>为 110MB：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"limit -u bsoft=100M bhard=110M user1"</span> /xfs333/
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"report -ubih"</span> /xfs333/
User <span class="token function">quota</span> on /xfs333 <span class="token punctuation">(</span>/dev/sdd1<span class="token punctuation">)</span>
                        Blocks                            Inodes              
User ID      Used   Soft   Hard Warn/Grace     Used   Soft   Hard Warn/Grace  
---------- --------------------------------- --------------------------------- 
root        <span class="token number">30</span>.0M      <span class="token number">0</span>      <span class="token number">0</span>  00 <span class="token punctuation">[</span>------<span class="token punctuation">]</span>      <span class="token number">7</span>      <span class="token number">0</span>      <span class="token number">0</span>  00 <span class="token punctuation">[</span>------<span class="token punctuation">]</span>
user1           <span class="token number">0</span>   100M   110M  00 <span class="token punctuation">[</span>------<span class="token punctuation">]</span>      <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span>  00 <span class="token punctuation">[</span>------<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>限制用户组<code>users</code>对<code>/xfs333</code>的<code>bsoft</code>为 50MB，<code>bhard</code>为 60MB：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"limit -g bsoft=50M bhard=60M users"</span> /xfs333/
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"report -gbih"</span> /xfs333/
Group <span class="token function">quota</span> on /xfs333 <span class="token punctuation">(</span>/dev/sdd1<span class="token punctuation">)</span>
                        Blocks                            Inodes              
Group ID     Used   Soft   Hard Warn/Grace     Used   Soft   Hard Warn/Grace  
---------- --------------------------------- --------------------------------- 
root        <span class="token number">30</span>.0M      <span class="token number">0</span>      <span class="token number">0</span>  00 <span class="token punctuation">[</span>------<span class="token punctuation">]</span>      <span class="token number">7</span>      <span class="token number">0</span>      <span class="token number">0</span>  00 <span class="token punctuation">[</span>------<span class="token punctuation">]</span>
<span class="token function">users</span>           <span class="token number">0</span>    50M    60M  00 <span class="token punctuation">[</span>------<span class="token punctuation">]</span>      <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span>  00 <span class="token punctuation">[</span>------<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>设置<code>/xfs333</code>的 grace time 为 14 天：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"timer -g -b 14days"</span> /xfs333/
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"timer -u -b 14days"</span> /xfs333/
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"state"</span> /xfs333/
Blocks grace time: <span class="token punctuation">[</span><span class="token number">14</span> days<span class="token punctuation">]</span>
Inodes grace time: <span class="token punctuation">[</span><span class="token number">7</span> days<span class="token punctuation">]</span>
Realtime Blocks grace time: <span class="token punctuation">[</span><span class="token number">7</span> days<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>测试一下对用户的实际限制情况：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>user1@101c7 xfs333<span class="token punctuation">]</span>$ <span class="token function">df</span>
Filesystem              1K-blocks    Used Available Use% Mounted on
/dev/sdd1                  <span class="token number">508580</span>   <span class="token number">26416</span>    <span class="token number">482164</span>   <span class="token number">6</span>% /xfs333
<span class="token punctuation">[</span>user1@101c7 test<span class="token punctuation">]</span>$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>100M <span class="token assign-left variable">bs</span><span class="token operator">=</span>1M <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">100</span>
File size limit exceeded
<span class="token punctuation">[</span>user1@101c7 test<span class="token punctuation">]</span>$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>200M <span class="token assign-left variable">bs</span><span class="token operator">=</span>1M <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">100</span>
dd: error writing â€˜200Mâ€™: Disk <span class="token function">quota</span> exceeded
<span class="token punctuation">[</span>user1@101c7 test<span class="token punctuation">]</span>$ ll <span class="token parameter variable">-h</span>
total 110M
-rw-rw-r--. <span class="token number">1</span> user1 user1 79M Sep <span class="token number">17</span> <span class="token number">14</span>:20 100M
-rw-rw-r--. <span class="token number">1</span> user1 user1 31M Sep <span class="token number">17</span> <span class="token number">14</span>:20 200M
<span class="token punctuation">[</span>root@101c7 xfs333<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"report -ubih"</span> /xfs333/
User <span class="token function">quota</span> on /xfs333 <span class="token punctuation">(</span>/dev/sdd1<span class="token punctuation">)</span>
                        Blocks                            Inodes              
User ID      Used   Soft   Hard Warn/Grace     Used   Soft   Hard Warn/Grace  
---------- --------------------------------- --------------------------------- 
root            <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span>  00 <span class="token punctuation">[</span><span class="token number">0</span> days<span class="token punctuation">]</span>      <span class="token number">3</span>      <span class="token number">0</span>      <span class="token number">0</span>  00 <span class="token punctuation">[</span>------<span class="token punctuation">]</span>
user1      <span class="token number">109</span>.1M   100M   110M  00 <span class="token punctuation">[</span><span class="token number">13</span> days<span class="token punctuation">]</span>      <span class="token number">3</span>      <span class="token number">0</span>      <span class="token number">0</span>  00 <span class="token punctuation">[</span>------<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到针对 <code>user1</code> 的限制已经生效，grace time 开始计时。</p>
<p>再看看针对组的实际限制情况，使用 gid 为 <code>users</code> 的用户 <code>user4</code> 测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>user4@101c7 test<span class="token punctuation">]</span>$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>200M <span class="token assign-left variable">bs</span><span class="token operator">=</span>1M <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">200</span>
dd: error writing â€˜200Mâ€™: Disk <span class="token function">quota</span> exceeded
<span class="token number">61</span>+0 records <span class="token keyword">in</span>
<span class="token number">60</span>+0 records out
<span class="token number">62914560</span> bytes <span class="token punctuation">(</span><span class="token number">63</span> MB<span class="token punctuation">)</span> copied, <span class="token number">0.0394094</span> s, <span class="token number">1.6</span> GB/s
<span class="token punctuation">[</span>user4@101c7 test<span class="token punctuation">]</span>$ ll <span class="token parameter variable">-h</span>
total 60M
-rw-r--r--. <span class="token number">1</span> user4 <span class="token function">users</span> 60M Sep <span class="token number">17</span> <span class="token number">14</span>:26 200M
<span class="token punctuation">[</span>root@101c7 xfs333<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"report -gbih"</span> /xfs333/
Group <span class="token function">quota</span> on /xfs333 <span class="token punctuation">(</span>/dev/sdd1<span class="token punctuation">)</span>
                        Blocks                            Inodes              
Group ID     Used   Soft   Hard Warn/Grace     Used   Soft   Hard Warn/Grace  
---------- --------------------------------- --------------------------------- 
root            <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span>  00 <span class="token punctuation">[</span><span class="token number">0</span> days<span class="token punctuation">]</span>      <span class="token number">3</span>      <span class="token number">0</span>      <span class="token number">0</span>  00 <span class="token punctuation">[</span>------<span class="token punctuation">]</span>
<span class="token function">users</span>         60M    50M    60M  00 <span class="token punctuation">[</span><span class="token number">13</span> days<span class="token punctuation">]</span>      <span class="token number">2</span>      <span class="token number">0</span>      <span class="token number">0</span>  00 <span class="token punctuation">[</span>------<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同样已经生效。</p>
<h2 id="针对目录设置-quota"><a class="markdownIt-Anchor" href="#针对目录设置-quota"></a> 针对目录设置 Quota</h2>
<p>先修改<code>/etc/fstab</code>内<code>grpquota</code>挂载参数为<code>prjquota</code>，再重新挂载目录。查看状态：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"state"</span>
Project <span class="token function">quota</span> state on /xfs333 <span class="token punctuation">(</span>/dev/sdd1<span class="token punctuation">)</span>
  Accounting: ON
  Enforcement: ON
  Inode: <span class="token comment">#69 (3 blocks, 3 extents)</span>
Blocks grace time: <span class="token punctuation">[</span><span class="token number">14</span> days<span class="token punctuation">]</span>
Inodes grace time: <span class="token punctuation">[</span><span class="token number">7</span> days<span class="token punctuation">]</span>
Realtime Blocks grace time: <span class="token punctuation">[</span><span class="token number">7</span> days<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后针对目录<code>/xfs333/test</code>设置 Project 名称和 ID 为<code>dirquo:23</code>到配置文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"23:/xfs333/test"</span> <span class="token operator">></span> /etc/projects
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"dirquo:23"</span>  <span class="token operator">>></span> /etc/projid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>下面初始化方案：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 /<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"project -s dirquo"</span>
Setting up project dirquo <span class="token punctuation">(</span>path /xfs333/test<span class="token punctuation">)</span><span class="token punctuation">..</span>.
Processed <span class="token number">1</span> <span class="token punctuation">(</span>/etc/projects and cmdline<span class="token punctuation">)</span> paths <span class="token keyword">for</span> project dirquo with recursion depth infinite <span class="token punctuation">(</span>-1<span class="token punctuation">)</span>.
<span class="token punctuation">[</span>root@101c7 /<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"print"</span> /xfs333/
Filesystem          Pathname
/xfs333             /dev/sdd1 <span class="token punctuation">(</span>uquota, pquota<span class="token punctuation">)</span>
/xfs333/test        /dev/sdd1 <span class="token punctuation">(</span>project <span class="token number">23</span>, dirquo<span class="token punctuation">)</span>
<span class="token punctuation">[</span>root@101c7 /<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"report -pbih"</span> /xfs333/
Project <span class="token function">quota</span> on /xfs333 <span class="token punctuation">(</span>/dev/sdd1<span class="token punctuation">)</span>
                        Blocks                            Inodes              
Project ID   Used   Soft   Hard Warn/Grace     Used   Soft   Hard Warn/Grace  
---------- --------------------------------- --------------------------------- 
<span class="token comment">#0              0      0      0  00 [------]      2      0      0  00 [------]</span>
dirquo        60M      <span class="token number">0</span>      <span class="token number">0</span>  00 <span class="token punctuation">[</span>------<span class="token punctuation">]</span>      <span class="token number">3</span>      <span class="token number">0</span>      <span class="token number">0</span>  00 <span class="token punctuation">[</span>------<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>开始设置对目录的容量为 20M/30M 限制：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 /<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"limit -p bsoft=20M bhard=30M dirquo"</span> /xfs333/
<span class="token punctuation">[</span>root@101c7 /<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"report -pbin"</span> /xfs333/
Project <span class="token function">quota</span> on /xfs333 <span class="token punctuation">(</span>/dev/sdd1<span class="token punctuation">)</span>
                               Blocks                                          Inodes                     
Project ID       Used       Soft       Hard    Warn/Grace           Used       Soft       Hard    Warn/ Grace     
---------- -------------------------------------------------- -------------------------------------------------- 
<span class="token comment">#0                   0          0          0     00 [--------]          2          0          0     00 [--------]</span>
<span class="token comment">#23              61440      20480      30720     00 [--none--]          3          0          0     00 [--------]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>目前容量使用已经超过配额，直接使用<code>root</code>测试：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 test<span class="token punctuation">]</span>$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span><span class="token number">44</span> <span class="token assign-left variable">bs</span><span class="token operator">=</span>1M <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">44</span>
dd: failed to <span class="token function">open</span> â€˜44â€™: Disk <span class="token function">quota</span> exceeded
<span class="token punctuation">[</span>root@101c7 test<span class="token punctuation">]</span>$ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> 200M 
<span class="token punctuation">[</span>root@101c7 test<span class="token punctuation">]</span>$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span><span class="token number">44</span> <span class="token assign-left variable">bs</span><span class="token operator">=</span>1M <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">44</span>
dd: error writing â€˜44â€™: No space left on device
<span class="token number">31</span>+0 records <span class="token keyword">in</span>
<span class="token number">30</span>+0 records out
<span class="token number">31457280</span> bytes <span class="token punctuation">(</span><span class="token number">31</span> MB<span class="token punctuation">)</span> copied, <span class="token number">0.0373182</span> s, <span class="token number">843</span> MB/s
<span class="token punctuation">[</span>root@101c7 test<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"report -pbin"</span> /xfs333/
Project <span class="token function">quota</span> on /xfs333 <span class="token punctuation">(</span>/dev/sdd1<span class="token punctuation">)</span>
                               Blocks                                          Inodes                     
Project ID       Used       Soft       Hard    Warn/Grace           Used       Soft       Hard    Warn/ Grace     
---------- -------------------------------------------------- -------------------------------------------------- 
<span class="token comment">#0                   0          0          0     00 [--------]          2          0          0     00 [--------]</span>
<span class="token comment">#23              30720      20480      30720     00 [14 days]          3          0          0     00 [--------]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>第一次<code>dd</code>直接拒绝说达到配额限制，将原文件删除后再试，跑到 33MB 提示没有空间，所以对目录限制是不挑用户的。</p>
<h2 id="管理-quota-功能"><a class="markdownIt-Anchor" href="#管理-quota-功能"></a> 管理 Quota 功能</h2>
<p>可以使用下面的指令来启停 quota 功能：</p>
<ul>
<li><strong>disable</strong>: 暂停 quota 限制</li>
<li><strong>enable</strong>: 恢复 quota 限制</li>
<li><strong>off</strong>: 完全关闭 quota 限制，需要重新挂载文件系统才能再次启用</li>
<li><strong>remove</strong>: 需要在 off 状态下执行，移除 quota 的限制设置。</li>
</ul>
<p>暂停后 quota 限制解除，但还是会继续计算用量：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 test<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"state"</span> /xfs333/
User <span class="token function">quota</span> state on /xfs333 <span class="token punctuation">(</span>/dev/sdd1<span class="token punctuation">)</span>
  Accounting: ON
  Enforcement: OFF
  Inode: <span class="token comment">#68 (2 blocks, 2 extents)</span>
Group <span class="token function">quota</span> state on /xfs333 <span class="token punctuation">(</span>/dev/sdd1<span class="token punctuation">)</span>
  Accounting: OFF
  Enforcement: OFF
  Inode: <span class="token comment">#69 (3 blocks, 3 extents)</span>
Project <span class="token function">quota</span> state on /xfs333 <span class="token punctuation">(</span>/dev/sdd1<span class="token punctuation">)</span>
  Accounting: ON
  Enforcement: OFF
  Inode: <span class="token comment">#69 (3 blocks, 3 extents)</span>
Blocks grace time: <span class="token punctuation">[</span><span class="token number">14</span> days<span class="token punctuation">]</span>
Inodes grace time: <span class="token punctuation">[</span><span class="token number">7</span> days<span class="token punctuation">]</span>
Realtime Blocks grace time: <span class="token punctuation">[</span><span class="token number">7</span> days<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>重新启用 quota：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 test<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"enable -up"</span> /xfs333/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>完全关闭 quota 并取移除 project 限制：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 test<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"off -up"</span> /xfs333/
<span class="token punctuation">[</span>root@101c7 test<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"enable -up"</span> /xfs333/
XFS_QUOTAON: Function not implemented
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"remove -p"</span> /xfs333/
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">umount</span> /xfs333/<span class="token punctuation">;</span> <span class="token function">mount</span> <span class="token parameter variable">-a</span>
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ xfs_quota <span class="token parameter variable">-x</span> <span class="token parameter variable">-c</span> <span class="token string">"report -phb"</span> /xfs333/
Project <span class="token function">quota</span> on /xfs333 <span class="token punctuation">(</span>/dev/sdd1<span class="token punctuation">)</span>
                        Blocks              
Project ID   Used   Soft   Hard Warn/Grace   
---------- --------------------------------- 
<span class="token comment">#0              0      0      0  00 [------]</span>
dirquo        30M      <span class="token number">0</span>      <span class="token number">0</span>  00 <span class="token punctuation">[</span>------<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到 dirquo 的设置已经清零了，remove 会清除所有 project 限制。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>2.系统管理</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 磁盘管理</title>
    <url>/3491093041/</url>
    <content><![CDATA[<h1 id="磁盘查询"><a class="markdownIt-Anchor" href="#磁盘查询"></a> 磁盘查询</h1>
<p>主要是 <code>df</code> 这个命令，经常用来查询系统中磁盘剩余空间。比如发现根目录 <code>/</code> 满了，说明系统危险了。</p>
<h2 id="查询磁盘容量"><a class="markdownIt-Anchor" href="#查询磁盘容量"></a> 查询磁盘容量</h2>
<p>使用 <code>df</code> 查看磁盘使用量，<code>df</code> 读取的是在 Superblock 内的信息。</p>
<p>例如查看系统内所有的文件系统：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 /<span class="token punctuation">]</span>$ <span class="token function">df</span> <span class="token parameter variable">-h</span>
Filesystem               Size  Used Avail Use% Mounted on
devtmpfs                 <span class="token number">1</span>.9G     <span class="token number">0</span>  <span class="token number">1</span>.9G   <span class="token number">0</span>% /dev
tmpfs                    <span class="token number">1</span>.9G     <span class="token number">0</span>  <span class="token number">1</span>.9G   <span class="token number">0</span>% /dev/shm
tmpfs                    <span class="token number">1</span>.9G   12M  <span class="token number">1</span>.9G   <span class="token number">1</span>% /run
tmpfs                    <span class="token number">1</span>.9G     <span class="token number">0</span>  <span class="token number">1</span>.9G   <span class="token number">0</span>% /sys/fs/cgroup
/dev/mapper/centos-root   17G  <span class="token number">2</span>.1G   15G  <span class="token number">13</span>% /
/dev/sda1               1014M  187M  828M  <span class="token number">19</span>% /boot
tmpfs                    378M     <span class="token number">0</span>  378M   <span class="token number">0</span>% /run/user/0
/dev/sdb1                991M  <span class="token number">1</span>.3M  939M   <span class="token number">1</span>% /ext333<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当查询目标是目录或文件时，<code>df</code> 会自动分析该目录所在分区，实际看到的是分区容量信息。</p>
<p>将所有特殊文件格式和名称（例如内存挂载点 <code>/proc</code>）都列出来，可以使用 <code>-aT</code> 参数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ <span class="token function">df</span> <span class="token parameter variable">-aT</span>
Filesystem              Type        1K-blocks    Used Available Use% Mounted on
sysfs                   sysfs               <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /sys
proc                    proc                <span class="token number">0</span>       <span class="token number">0</span>         <span class="token number">0</span>    - /proc
/dev/mapper/centos-root xfs          <span class="token number">17811456</span> <span class="token number">2724256</span>  <span class="token number">15087200</span>  <span class="token number">16</span>% /
/dev/sda1               xfs           <span class="token number">1038336</span>  <span class="token number">190536</span>    <span class="token number">847800</span>  <span class="token number">19</span>% /boot
/dev/mapper/VG400-LV400 ext3           <span class="token number">190145</span>   <span class="token number">63472</span>    <span class="token number">117934</span>  <span class="token number">35</span>% /ext333<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查询各分区中可用 inode 数量：</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 /<span class="token punctuation">]</span>$ <span class="token function">df</span> <span class="token parameter variable">-ih</span>
Filesystem              Inodes IUsed IFree IUse% Mounted on
/dev/mapper/centos-root   <span class="token number">8</span>.5M   46K  <span class="token number">8</span>.5M    <span class="token number">1</span>% /
/dev/sda1                 512K   <span class="token number">335</span>  512K    <span class="token number">1</span>% /boot
tmpfs                     472K     <span class="token number">1</span>  472K    <span class="token number">1</span>% /run/user/0
/dev/sdb1                  64K    <span class="token number">13</span>   64K    <span class="token number">1</span>% /ext333<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="列出分区信息"><a class="markdownIt-Anchor" href="#列出分区信息"></a> 列出分区信息</h2>
<p>可以使用命令 <code>lsblk</code> 来查询所有储存设备。</p>
<p>例如查看当前系统下所有磁盘与分区情况：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ lsblk <span class="token parameter variable">-i</span>
NAME                 MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda                    <span class="token number">8</span>:0    <span class="token number">0</span>   20G  <span class="token number">0</span> disk 
<span class="token operator">|</span>-sda1                 <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot
<span class="token variable"><span class="token variable">`</span><span class="token parameter variable">-sda2</span>                 <span class="token number">8</span>:2    <span class="token number">0</span>   19G  <span class="token number">0</span> part 
  <span class="token operator">|</span>-centos-root      <span class="token number">253</span>:0    <span class="token number">0</span>   17G  <span class="token number">0</span> lvm  /
  <span class="token variable">`</span></span>-centos-swap      <span class="token number">253</span>:1    <span class="token number">0</span>    2G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中 MAJ:MIN 代表主要 : 次要设备代码，RM 标记是否为可移动（removable）设备，RO 为是否以只读挂载。</p>
<p>也可以只单独查询某个磁盘，用 <code>-p</code> 参数显示分区全名：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ lsblk <span class="token parameter variable">-ip</span> /dev/sda
NAME                        MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
/dev/sda                      <span class="token number">8</span>:0    <span class="token number">0</span>  20G  <span class="token number">0</span> disk 
<span class="token operator">|</span>-/dev/sda1                   <span class="token number">8</span>:1    <span class="token number">0</span>   1G  <span class="token number">0</span> part /boot
<span class="token variable"><span class="token variable">`</span>-/dev/sda2                   <span class="token number">8</span>:2    <span class="token number">0</span>  19G  <span class="token number">0</span> part 
  <span class="token operator">|</span>-/dev/mapper/centos-root <span class="token number">253</span>:0    <span class="token number">0</span>  17G  <span class="token number">0</span> lvm  /
  <span class="token variable">`</span></span>-/dev/mapper/centos-swap <span class="token number">253</span>:1    <span class="token number">0</span>   2G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>UUID（Universally Unique Identifier）是全域单一识别码，也可以用 UUID 来挂载设备。使用 <code>blkid</code> 命令来查询：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ blkid
/dev/mapper/centos-root: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"bb5b6906-0dff-46c4-832e-1701522802e6"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span> 
/dev/sda2: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"0lYfzD-6Mqj-AtC4-Jgf1-LGpk-ODIk-xbJIa7"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"LVM2_member"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="磁盘分区"><a class="markdownIt-Anchor" href="#磁盘分区"></a> 磁盘分区</h1>
<p>如果是 MBR 分区表，使用 <code>fdisk</code> 分区；GPT 分区使用 <code>gdisk</code> 分区。两种工具在使用方法上没有区别。这里使用 <code>fdisk</code> 演示。</p>
<h2 id="查看分区"><a class="markdownIt-Anchor" href="#查看分区"></a> 查看分区</h2>
<p>例如，查看系统内的所有分区：</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ <span class="token function">fdisk</span> <span class="token parameter variable">-l</span>
Disk /dev/sda: <span class="token number">21.5</span> GB, <span class="token number">21474836480</span> bytes, <span class="token number">41943040</span> sectors
Units <span class="token operator">=</span> sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytes
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
I/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
Disk label type: dos
Disk identifier: 0x000a3a75

   Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *        <span class="token number">2048</span>     <span class="token number">2099199</span>     <span class="token number">1048576</span>   <span class="token number">83</span>  Linux
/dev/sda2         <span class="token number">2099200</span>    <span class="token number">41943039</span>    <span class="token number">19921920</span>   8e  Linux LVM

Disk /dev/mapper/centos-root: <span class="token number">18.2</span> GB, <span class="token number">18249416704</span> bytes, <span class="token number">35643392</span> sectors
Units <span class="token operator">=</span> sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytes
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
I/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes


Disk /dev/mapper/centos-swap: <span class="token number">2147</span> MB, <span class="token number">2147483648</span> bytes, <span class="token number">4194304</span> sectors
Units <span class="token operator">=</span> sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytes
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
I/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由上述信息可见，sda 分了两个区，其中 sda 可做启动引导。</p>
<p>对新增的磁盘 sdb 进行操作：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ <span class="token function">fdisk</span> /dev/sdb
Welcome to <span class="token function">fdisk</span> <span class="token punctuation">(</span>util-linux <span class="token number">2.23</span>.2<span class="token punctuation">)</span>.

Changes will remain <span class="token keyword">in</span> memory only, <span class="token keyword">until</span> you decide to <span class="token function">write</span> them.
Be careful before using the <span class="token function">write</span> command.


Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>进入 <code>fdisk</code> 后输入 <code>m</code> 可以查看帮助。常用命令有：<code>d</code> 删除分区，<code>n</code> 新增分区，<code>p</code> 显示分区表，<code>w</code> 写入分区信息并退出。</p>
<p>先看看分区状态：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: p

Disk /dev/sdb: <span class="token number">1073</span> MB, <span class="token number">1073741824</span> bytes, <span class="token number">2097152</span> sectors
Units <span class="token operator">=</span> sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytes
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
I/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
Disk label type: dos
Disk identifier: 0x2de15e6d

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1            <span class="token number">2048</span>     <span class="token number">2097151</span>     <span class="token number">1047552</span>   <span class="token number">83</span>  Linux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由上表中可以看到：磁盘大小 1073 MB，扇区数 2097152，每个扇区大小 512 Bytes，分区开始扇区号 2048，截止扇区号 2097151，block 数（1KB 为单位）1047552。</p>
<h2 id="删除分区"><a class="markdownIt-Anchor" href="#删除分区"></a> 删除分区</h2>
<p>假设要删除 sdb1 分区，在等待命令页面输入 <code>d</code> 会提示要删除的分区编号（sdb 后面带的数字）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: d
Selected partition <span class="token number">1</span>
Partition <span class="token number">1</span> is deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>再次查看分区已经被删除了，保存退出：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: w
The partition table has been altered<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="新增分区"><a class="markdownIt-Anchor" href="#新增分区"></a> 新增分区</h2>
<p>输入 <code>n</code> 以后会进入新建分区交互界面：</p>
<ol>
<li>选择新增的分区类型是主分区 <code>p</code>；</li>
<li>设置为 4 号；</li>
<li>起始扇区号采用默认 2048；</li>
<li>结束扇区号可以输入扇区号，也可以输入大小，这里输入 <code>+100M</code> 大小：</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: n
Partition type:
   p   primary <span class="token punctuation">(</span><span class="token number">0</span> primary, <span class="token number">0</span> extended, <span class="token number">4</span> <span class="token function">free</span><span class="token punctuation">)</span>
   e   extended
Select <span class="token punctuation">(</span>default p<span class="token punctuation">)</span>: p
Using default response p
Partition number <span class="token punctuation">(</span><span class="token number">1</span>-4, default <span class="token number">1</span><span class="token punctuation">)</span>: <span class="token number">4</span>
First sector <span class="token punctuation">(</span><span class="token number">2048</span>-2097151, default <span class="token number">2048</span><span class="token punctuation">)</span>: 
Using default value <span class="token number">2048</span>
Last sector, +sectors or +size<span class="token punctuation">&#123;</span>K,M,G<span class="token punctuation">&#125;</span> <span class="token punctuation">(</span><span class="token number">2048</span>-2097151, default <span class="token number">2097151</span><span class="token punctuation">)</span>: +100M
Partition <span class="token number">4</span> of <span class="token builtin class-name">type</span> Linux and of size <span class="token number">100</span> MiB is <span class="token builtin class-name">set</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再新增一个 200M 大小的扩展分区：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: n
Partition type:
   p   primary <span class="token punctuation">(</span><span class="token number">1</span> primary, <span class="token number">0</span> extended, <span class="token number">3</span> <span class="token function">free</span><span class="token punctuation">)</span>
   e   extended
Select <span class="token punctuation">(</span>default p<span class="token punctuation">)</span>: e
Partition number <span class="token punctuation">(</span><span class="token number">1</span>-3, default <span class="token number">1</span><span class="token punctuation">)</span>: <span class="token number">1</span>
First sector <span class="token punctuation">(</span><span class="token number">206848</span>-2097151, default <span class="token number">206848</span><span class="token punctuation">)</span>: 
Using default value <span class="token number">206848</span>
Last sector, +sectors or +size<span class="token punctuation">&#123;</span>K,M,G<span class="token punctuation">&#125;</span> <span class="token punctuation">(</span><span class="token number">206848</span>-2097151, default <span class="token number">2097151</span><span class="token punctuation">)</span>: +200M
Partition <span class="token number">1</span> of <span class="token builtin class-name">type</span> Extended and of size <span class="token number">200</span> MiB is <span class="token builtin class-name">set</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>完成后输入 <code>p</code> 查看状态：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: p

Disk /dev/sdb: <span class="token number">1073</span> MB, <span class="token number">1073741824</span> bytes, <span class="token number">2097152</span> sectors
Units <span class="token operator">=</span> sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytes
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
I/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
Disk label type: dos
Disk identifier: 0x951d99c8

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1          <span class="token number">206848</span>      <span class="token number">616447</span>      <span class="token number">204800</span>    <span class="token number">5</span>  Extended
/dev/sdb4            <span class="token number">2048</span>      <span class="token number">206847</span>      <span class="token number">102400</span>   <span class="token number">83</span>  Linux

Partition table entries are not <span class="token keyword">in</span> disk order<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到有个主分区名字为 sdb4，扩展分区名为 sdb1，是我们手动设定的样子。</p>
<p>在扩展分区上建立个 80M 大小的逻辑分区，选择类型时输入 <code>l</code>，系统会自动分配分区号：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: n
Partition type:
   p   primary <span class="token punctuation">(</span><span class="token number">1</span> primary, <span class="token number">1</span> extended, <span class="token number">2</span> <span class="token function">free</span><span class="token punctuation">)</span>
   l   logical <span class="token punctuation">(</span>numbered from <span class="token number">5</span><span class="token punctuation">)</span>
Select <span class="token punctuation">(</span>default p<span class="token punctuation">)</span>: l
Adding logical partition <span class="token number">5</span>
First sector <span class="token punctuation">(</span><span class="token number">208896</span>-616447, default <span class="token number">208896</span><span class="token punctuation">)</span>: 
Using default value <span class="token number">208896</span>
Last sector, +sectors or +size<span class="token punctuation">&#123;</span>K,M,G<span class="token punctuation">&#125;</span> <span class="token punctuation">(</span><span class="token number">208896</span>-616447, default <span class="token number">616447</span><span class="token punctuation">)</span>: +80M
Partition <span class="token number">5</span> of <span class="token builtin class-name">type</span> Linux and of size <span class="token number">80</span> MiB is <span class="token builtin class-name">set</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>完成后输入 <code>w</code> 保存更改并退出：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: w<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>提示说要重启让改动生效，可以使用 <code>partprobe</code> 命令让内核重新扫描分区表：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ partprobe <span class="token parameter variable">-s</span>
/dev/sda: msdos partitions <span class="token number">1</span> <span class="token number">2</span>
/dev/sdb: msdos partitions <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span>
/dev/sdc: msdos partitions <span class="token number">1</span>
/dev/sr0: msdos partitions <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面展示使用 <code>gdisk</code> 制作一个 500MB 大小 GPT 分区的过程：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ gdisk /dev/sdd
GPT <span class="token function">fdisk</span> <span class="token punctuation">(</span>gdisk<span class="token punctuation">)</span> version <span class="token number">0.8</span>.10

Command <span class="token punctuation">(</span>? <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: n
Partition number <span class="token punctuation">(</span><span class="token number">1</span>-128, default <span class="token number">1</span><span class="token punctuation">)</span>: <span class="token number">1</span>
First sector <span class="token punctuation">(</span><span class="token number">34</span>-2097118, default <span class="token operator">=</span> <span class="token number">2048</span><span class="token punctuation">)</span> or <span class="token punctuation">&#123;</span>+-<span class="token punctuation">&#125;</span>size<span class="token punctuation">&#123;</span>KMGTP<span class="token punctuation">&#125;</span>: 
Last sector <span class="token punctuation">(</span><span class="token number">2048</span>-2097118, default <span class="token operator">=</span> <span class="token number">2097118</span><span class="token punctuation">)</span> or <span class="token punctuation">&#123;</span>+-<span class="token punctuation">&#125;</span>size<span class="token punctuation">&#123;</span>KMGTP<span class="token punctuation">&#125;</span>: +500MB
Current <span class="token builtin class-name">type</span> is <span class="token string">'Linux filesystem'</span>
Hex code or GUID <span class="token punctuation">(</span>L to show codes, Enter <span class="token operator">=</span> <span class="token number">8300</span><span class="token punctuation">)</span>: 
Changed <span class="token builtin class-name">type</span> of partition to <span class="token string">'Linux filesystem'</span>

Command <span class="token punctuation">(</span>? <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: w

Final checks complete. About to <span class="token function">write</span> GPT data. THIS WILL OVERWRITE EXISTING
PARTITIONS<span class="token operator">!</span><span class="token operator">!</span>

Do you want to proceed? <span class="token punctuation">(</span>Y/N<span class="token punctuation">)</span>: y
OK<span class="token punctuation">;</span> writing new GUID partition table <span class="token punctuation">(</span>GPT<span class="token punctuation">)</span> to /dev/sdd.
The operation has completed successfully.
<span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ partprobe <span class="token parameter variable">-s</span>
/dev/sda: msdos partitions <span class="token number">1</span> <span class="token number">2</span>
/dev/sdb: msdos partitions <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span>
/dev/sdc: msdos partitions <span class="token number">1</span>
/dev/sdd: gpt partitions <span class="token number">1</span>
/dev/sr0: msdos partitions <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="格式化分区"><a class="markdownIt-Anchor" href="#格式化分区"></a> 格式化分区</h2>
<p>建立分区后要格式化分区才可使用，格式化通过 <code>mkfs</code> 类命令操作。</p>
<p>将 sdb4 格式化成 ext3 文件系统：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mkfs</span> <span class="token parameter variable">-t</span> ext3 /dev/sdb4 
<span class="token function">mke2fs</span> <span class="token number">1.42</span>.9 <span class="token punctuation">(</span><span class="token number">28</span>-Dec-2013<span class="token punctuation">)</span>
Filesystem <span class="token assign-left variable">label</span><span class="token operator">=</span>
OS type: Linux
Block <span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token number">1024</span> <span class="token punctuation">(</span>log<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
Fragment <span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token number">1024</span> <span class="token punctuation">(</span>log<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token assign-left variable">Stride</span><span class="token operator">=</span><span class="token number">0</span> blocks, Stripe <span class="token assign-left variable">width</span><span class="token operator">=</span><span class="token number">0</span> blocks
<span class="token number">25688</span> inodes, <span class="token number">102400</span> blocks
<span class="token number">5120</span> blocks <span class="token punctuation">(</span><span class="token number">5.00</span>%<span class="token punctuation">)</span> reserved <span class="token keyword">for</span> the super user
First data <span class="token assign-left variable">block</span><span class="token operator">=</span><span class="token number">1</span>
Maximum filesystem <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">67371008</span>
<span class="token number">13</span> block <span class="token function">groups</span>
<span class="token number">8192</span> blocks per group, <span class="token number">8192</span> fragments per group
<span class="token number">1976</span> inodes per group
Superblock backups stored on blocks: 
        <span class="token number">8193</span>, <span class="token number">24577</span>, <span class="token number">40961</span>, <span class="token number">57345</span>, <span class="token number">73729</span>

Allocating group tables: <span class="token keyword">done</span>                            
Writing inode tables: <span class="token keyword">done</span>                            
Creating journal <span class="token punctuation">(</span><span class="token number">4096</span> blocks<span class="token punctuation">)</span>: <span class="token keyword">done</span>
Writing superblocks and filesystem accounting information: <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果要指定 label，block 大小，inode 数量等参数，需要使用 <code>mke2fs</code> 命令。</p>
<p>例如将 sdb4 设定卷标 boss，block 大小 2048，每 8192 bytes 分配一个 inode 后格式化成 ext3 文件系统：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mke2fs</span> <span class="token parameter variable">-j</span> <span class="token parameter variable">-L</span> <span class="token string">"boss"</span> <span class="token parameter variable">-b</span> <span class="token number">2048</span> <span class="token parameter variable">-i</span> <span class="token number">8192</span> /dev/sdb4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>设置文件系统不区分大小写：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ mkfs.xfs <span class="token parameter variable">-L</span> datavolume <span class="token parameter variable">-f</span> <span class="token parameter variable">-n</span> <span class="token assign-left variable">version</span><span class="token operator">=</span>ci /dev/md0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>用 <code>mkfs.xfs</code> 格式化 xfs 文件系统，要设定具体分区数值可用 <code>-d</code> 参数。指定储存区群组数量为 16 并强制格式化 sdd1：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ mkfs.xfs <span class="token parameter variable">-f</span> <span class="token parameter variable">-d</span> <span class="token assign-left variable">agcount</span><span class="token operator">=</span><span class="token number">16</span> /dev/sdd1
meta-data<span class="token operator">=</span>/dev/sdd1              <span class="token assign-left variable">isize</span><span class="token operator">=</span><span class="token number">512</span>    <span class="token assign-left variable">agcount</span><span class="token operator">=</span><span class="token number">16</span>, <span class="token assign-left variable">agsize</span><span class="token operator">=</span><span class="token number">8000</span> blks
         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">attr</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">projid32bit</span><span class="token operator">=</span><span class="token number">1</span>
         <span class="token operator">=</span>                       <span class="token assign-left variable">crc</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token assign-left variable">finobt</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">sparse</span><span class="token operator">=</span><span class="token number">0</span>
data     <span class="token operator">=</span>                       <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">128000</span>, <span class="token assign-left variable">imaxpct</span><span class="token operator">=</span><span class="token number">25</span>
         <span class="token operator">=</span>                       <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span>      <span class="token assign-left variable">swidth</span><span class="token operator">=</span><span class="token number">0</span> blks
naming   <span class="token operator">=</span>version <span class="token number">2</span>              <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   ascii-ci<span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ftype</span><span class="token operator">=</span><span class="token number">1</span>
log      <span class="token operator">=</span>internal log           <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">855</span>, <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token number">2</span>
         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span> blks, lazy-count<span class="token operator">=</span><span class="token number">1</span>
realtime <span class="token operator">=</span>none                   <span class="token assign-left variable">extsz</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">rtextents</span><span class="token operator">=</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="新建-swap-分区"><a class="markdownIt-Anchor" href="#新建-swap-分区"></a> 新建 swap 分区</h2>
<p>swap 内存交换空间用来在系统内存不足时，替代内存使用的硬盘空间。虽然内存不足的情况已经很少发生，但有些旧程序会要求使用 swap 分区，或者作为出现内存溢出等异常状态时缓冲一下，还是有必要建一个的。</p>
<p>下面将在 sdb 上使用空闲容量新建一个 256MB 大小的 swap 分区（代码 82）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: n
Partition type:
   p   primary <span class="token punctuation">(</span><span class="token number">1</span> primary, <span class="token number">1</span> extended, <span class="token number">2</span> <span class="token function">free</span><span class="token punctuation">)</span>
   l   logical <span class="token punctuation">(</span>numbered from <span class="token number">5</span><span class="token punctuation">)</span>
Select <span class="token punctuation">(</span>default p<span class="token punctuation">)</span>: p
Partition number <span class="token punctuation">(</span><span class="token number">2,3</span>, default <span class="token number">2</span><span class="token punctuation">)</span>: 
First sector <span class="token punctuation">(</span><span class="token number">616448</span>-2097151, default <span class="token number">616448</span><span class="token punctuation">)</span>: 
Using default value <span class="token number">616448</span>
Last sector, +sectors or +size<span class="token punctuation">&#123;</span>K,M,G<span class="token punctuation">&#125;</span> <span class="token punctuation">(</span><span class="token number">616448</span>-2097151, default <span class="token number">2097151</span><span class="token punctuation">)</span>: +256M
Partition <span class="token number">2</span> of <span class="token builtin class-name">type</span> Linux and of size <span class="token number">256</span> MiB is <span class="token builtin class-name">set</span>

Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: t
Partition number <span class="token punctuation">(</span><span class="token number">1,2</span>,4,5, default <span class="token number">5</span><span class="token punctuation">)</span>: <span class="token number">2</span>
Hex code <span class="token punctuation">(</span>type L to list all codes<span class="token punctuation">)</span>: <span class="token number">82</span>
Changed <span class="token builtin class-name">type</span> of partition <span class="token string">'Linux'</span> to <span class="token string">'Linux swap / Solaris'</span>

Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: w
The partition table has been altered<span class="token operator">!</span>

<span class="token punctuation">[</span>root@101c7 tinycore_iso<span class="token punctuation">]</span>$ partprobe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以使用 <code>dd</code> 命令来创建一个空文件，当作 swap 分区使用。</p>
<p>使用 <code>mkswap</code> 格式化：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 tinycore_iso<span class="token punctuation">]</span>$ <span class="token function">mkswap</span> /dev/sdb2
Setting up swapspace version <span class="token number">1</span>, size <span class="token operator">=</span> <span class="token number">262140</span> KiB
no label, <span class="token assign-left variable">UUID</span><span class="token operator">=</span>2cfd898c-2b54-467b-94a4-96c29567cb7d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>接着用 <code>swapon</code> 命令加载 swap：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 tinycore_iso<span class="token punctuation">]</span>$ <span class="token function">free</span>
              total        used        <span class="token function">free</span>      shared  buff/cache   available
Mem:        <span class="token number">3861280</span>      <span class="token number">248320</span>     <span class="token number">3108468</span>       <span class="token number">11880</span>      <span class="token number">504492</span>     <span class="token number">3329556</span>
Swap:       <span class="token number">2097148</span>           <span class="token number">0</span>     <span class="token number">2097148</span>
<span class="token punctuation">[</span>root@101c7 tinycore_iso<span class="token punctuation">]</span>$ <span class="token function">swapon</span> /dev/sdb2
<span class="token punctuation">[</span>root@101c7 tinycore_iso<span class="token punctuation">]</span>$ <span class="token function">free</span>
              total        used        <span class="token function">free</span>      shared  buff/cache   available
Mem:        <span class="token number">3861280</span>      <span class="token number">248636</span>     <span class="token number">3108120</span>       <span class="token number">11880</span>      <span class="token number">504524</span>     <span class="token number">3329304</span>
Swap:       <span class="token number">2359288</span>           <span class="token number">0</span>     <span class="token number">2359288</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以查看到已经在使用的 swap 设备有哪些：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 tinycore_iso<span class="token punctuation">]</span>$ <span class="token function">swapon</span> <span class="token parameter variable">-s</span>
Filename                                Type            Size    Used    Priority
/dev/dm-1                               partition       <span class="token number">2097148</span> <span class="token number">0</span>       <span class="token parameter variable">-2</span>
/dev/sdb2                               partition       <span class="token number">262140</span>  <span class="token number">0</span>       <span class="token parameter variable">-3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果要开机启动记得修改 <code>/etc/fstab</code> 文件来开机挂载。</p>
<p>使用 <code>swapoff</code> 来关掉 swap file：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ swapoff /dev/sdb2<span class="token punctuation">;</span> <span class="token function">swapon</span> <span class="token parameter variable">-s</span>
Filename                                Type            Size    Used    Priority
/dev/dm-1                               partition       <span class="token number">2097148</span> <span class="token number">0</span>       <span class="token parameter variable">-2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="大容量磁盘分区"><a class="markdownIt-Anchor" href="#大容量磁盘分区"></a> 大容量磁盘分区</h2>
<p>由于 fdisk 无法支持 2TB 以上的分区，可以使用 <code>parted</code> 程序来分区，它同时支持 MBR 和 GPT 两种分区表格式。</p>
<p>查看当前的分区表资料：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 <span class="token number">2</span><span class="token punctuation">]</span>$ <span class="token function">parted</span> /dev/sdb print
Model: VMware, VMware Virtual S <span class="token punctuation">(</span>scsi<span class="token punctuation">)</span>
Disk /dev/sdb: 1074MB
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512B/512B
Partition Table: msdos
Disk Flags: 

Number  Start   End    Size    Type      File system     Flags
<span class="token number">4</span>      1049kB  106MB  105MB   primary   ext3
<span class="token number">1</span>      106MB   316MB  210MB   extended
<span class="token number">5</span>      107MB   191MB  <span class="token number">83</span>.9MB  logical
<span class="token number">2</span>      316MB   584MB  268MB   primary   linux-swap<span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>新建一个 ext3 格式 110M 大小的逻辑分区：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 <span class="token number">2</span><span class="token punctuation">]</span>$ <span class="token function">parted</span> /dev/sdb mkpart logical ext3 191MB 301MB
Warning: The resulting partition is not properly aligned <span class="token keyword">for</span> best performance.
Ignore/Cancel? Ignore                                                     
Information: You may need to update /etc/fstab.

<span class="token punctuation">[</span>root@101c7 <span class="token number">2</span><span class="token punctuation">]</span>$ <span class="token function">parted</span> /dev/sdb print
Model: VMware, VMware Virtual S <span class="token punctuation">(</span>scsi<span class="token punctuation">)</span>
Disk /dev/sdb: 1074MB
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512B/512B
Partition Table: msdos
Disk Flags: 

Number  Start   End    Size    Type      File system     Flags
<span class="token number">4</span>      1049kB  106MB  105MB   primary   ext3
<span class="token number">1</span>      106MB   316MB  210MB   extended
<span class="token number">5</span>      107MB   191MB  <span class="token number">83</span>.9MB  logical
<span class="token number">6</span>      191MB   301MB  110MB   logical
<span class="token number">2</span>      316MB   584MB  268MB   primary   linux-swap<span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>删除刚刚新建的 sdb6 分区：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 <span class="token number">2</span><span class="token punctuation">]</span>$ <span class="token function">parted</span> /dev/sdb <span class="token function">rm</span> <span class="token number">6</span>
Information: You may need to update /etc/fstab.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="磁盘工具"><a class="markdownIt-Anchor" href="#磁盘工具"></a> 磁盘工具</h1>
<p>主要包括一些读写性能测试，文件系统修复等工具。</p>
<h2 id="ext-磁盘扫描"><a class="markdownIt-Anchor" href="#ext-磁盘扫描"></a> Ext 磁盘扫描</h2>
<p>Ext 文件系统可使用 <code>fsck</code> 来对磁盘进行扫描，检查文件系统错误。通常情况下只有出现问题才使用这个命令。</p>
<p>例如进入到单用户模式下，被检查的分区务必不可挂载到系统上，否则可能造成部分文件系统损坏。</p>
<p>可用参数：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-C</td>
<td>检验过程中显示进度</td>
</tr>
<tr>
<td>-f</td>
<td>强制检查，将所有状态为 clean 的扇区也纳入检查范围</td>
</tr>
<tr>
<td>-D</td>
<td>针对文件系统下的目录进行优化配置</td>
</tr>
<tr>
<td>-p</td>
<td>自动修复文件系统存在的问题</td>
</tr>
<tr>
<td>-b</td>
<td>接 superblock 位置，用来恢复主 superblock。一般备份在 1K=8193 / 2K=16384 / 4k=32768 位置</td>
</tr>
<tr>
<td>-c</td>
<td>对文件系统进行坏块检查，并添加到坏块列表中。</td>
</tr>
</tbody>
</table>
<p>检查 sdb4 分区：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">fsck</span> <span class="token parameter variable">-C</span> <span class="token parameter variable">-f</span> /dev/sdb4
<span class="token function">fsck</span> from util-linux <span class="token number">2.23</span>.2
e2fsck <span class="token number">1.42</span>.9 <span class="token punctuation">(</span><span class="token number">28</span>-Dec-2013<span class="token punctuation">)</span>
Pass <span class="token number">1</span>: Checking inodes, blocks, and sizes
Pass <span class="token number">2</span>: Checking directory structure                                           
Pass <span class="token number">3</span>: Checking directory connectivity
Pass <span class="token number">4</span>: Checking reference counts
Pass <span class="token number">5</span>: Checking group summary information
boss: <span class="token number">11</span>/12800 files <span class="token punctuation">(</span><span class="token number">0.0</span>% non-contiguous<span class="token punctuation">)</span>, <span class="token number">5076</span>/51200 blocks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用备份恢复 sdb4 损坏的 superblock：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ fsck.ext3 <span class="token parameter variable">-b</span> <span class="token number">32768</span> /dev/sdb4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="xfs-磁盘扫描"><a class="markdownIt-Anchor" href="#xfs-磁盘扫描"></a> Xfs 磁盘扫描</h2>
<p>xfs 文件系统扫描使用 <code>xfs_repair</code> 工具。可用选项：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-f</td>
<td>后面接文件文件而不是磁盘</td>
</tr>
<tr>
<td>-n</td>
<td>单纯检查并不修改文件系统的任何数据</td>
</tr>
<tr>
<td>-d</td>
<td>通常用在救援模式下面对根目录进行检查与修复的动作</td>
</tr>
</tbody>
</table>
<p>修复时同样要求先卸载目标分区，例如检查 <code>/dev/sdd1</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ xfs_repair /dev/sdd1
Phase <span class="token number">1</span> - <span class="token function">find</span> and verify superblock<span class="token punctuation">..</span>.
Phase <span class="token number">2</span> - using internal log
Phase <span class="token number">3</span> - <span class="token keyword">for</span> each AG<span class="token punctuation">..</span>.
Phase <span class="token number">4</span> - check <span class="token keyword">for</span> duplicate blocks<span class="token punctuation">..</span>.
Phase <span class="token number">5</span> - rebuild AG headers and trees<span class="token punctuation">..</span>.
Phase <span class="token number">6</span> - check inode connectivity<span class="token punctuation">..</span>.
Phase <span class="token number">7</span> - verify and correct <span class="token function">link</span> counts<span class="token punctuation">..</span>.
<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="坏道扫描"><a class="markdownIt-Anchor" href="#坏道扫描"></a> 坏道扫描</h2>
<p><code>badblocks</code> 命令用来检测硬盘扇区有没有坏道。其实等于 <code>mke2fs -c</code> 在进行格式化时处理磁盘表面的读取测试。</p>
<p>例如检查 sdb4 分区：</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ badblocks <span class="token parameter variable">-sv</span> /dev/sdb4
Checking blocks <span class="token number">0</span> to <span class="token number">102399</span>
Checking <span class="token keyword">for</span> bad blocks <span class="token punctuation">(</span>read-only <span class="token builtin class-name">test</span><span class="token punctuation">)</span>: <span class="token keyword">done</span>                                                 
Pass completed, <span class="token number">0</span> bad blocks found. <span class="token punctuation">(</span><span class="token number">0</span>/0/0 errors<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="修改设备代码"><a class="markdownIt-Anchor" href="#修改设备代码"></a> 修改设备代码</h2>
<p>有时需要手动处理设备文件，可以使用 <code>mknod</code> 命令来修改设备代码。</p>
<p>可修改的设备种类有 b（外部储存，移动硬盘），c（外部输入，鼠标），p（FIFO 文件）。</p>
<p>常见磁盘设备代码如下：</p>
<table>
<thead>
<tr>
<th>磁盘文件名</th>
<th>Major</th>
<th>Minor</th>
</tr>
</thead>
<tbody>
<tr>
<td>/dev/sda</td>
<td>8</td>
<td>0-15</td>
</tr>
<tr>
<td>/dev/sdb</td>
<td>8</td>
<td>16-31</td>
</tr>
<tr>
<td>/dev/loop0</td>
<td>7</td>
<td>0</td>
</tr>
<tr>
<td>/dev/loop1</td>
<td>7</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>例如创建 sdb5 的设备代码 Maj:Min 为 8,21：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mknod</span> /dev/sdb5 b <span class="token number">8</span> <span class="token number">21</span><span class="token punctuation">;</span> ll /dev/sdb5
brw-rw----. <span class="token number">1</span> root disk <span class="token number">8</span>, <span class="token number">21</span> Sep <span class="token number">10</span> 04:08 /dev/sdb5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="修改分区卷标"><a class="markdownIt-Anchor" href="#修改分区卷标"></a> 修改分区卷标</h2>
<p>可以使用 <code>e2label</code> 来修改 ext 文件系统卷标（Label），卷标类似与 Win 中的“本地磁盘”。</p>
<p>例如修改 sdb4 的卷标为“P1”：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ e2label /dev/sdb4 <span class="token string">"P1"</span>
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ dumpe2fs <span class="token parameter variable">-h</span> /dev/sdb4 <span class="token operator">|</span> <span class="token function">grep</span> name
dumpe2fs <span class="token number">1.42</span>.9 <span class="token punctuation">(</span><span class="token number">28</span>-Dec-2013<span class="token punctuation">)</span>
Filesystem volume name:   P1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可使用 <code>tune2fs</code> 命令来修改：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ tune2fs <span class="token parameter variable">-L</span> P2 /dev/sdb4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="修改-uuid"><a class="markdownIt-Anchor" href="#修改-uuid"></a> 修改 UUID</h2>
<p>XFS 文件系统使用 UUID 作为标识符，可以使用 <code>xfs_admin</code> 命令修改 UUID 和 Label。</p>
<p>例如修改 sdd1 的 Label name 为 xfs1：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ xfs_admin <span class="token parameter variable">-L</span> xfs1 /dev/sdd1
writing all SBs
new label <span class="token operator">=</span> <span class="token string">"xfs1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>修改 UUID 需要先生成 UUID 号码，可以使用 <code>uuidgen</code> 命令生成，然后再设置到 sdd1 上：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ xfs_admin <span class="token parameter variable">-U</span> <span class="token variable"><span class="token variable">$(</span>uuidgen<span class="token variable">)</span></span> /dev/sdd1
Clearing log and setting UUID
writing all SBs
new UUID <span class="token operator">=</span> c96b6650-756a-4496-bf26-6e7286c55891<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="磁盘阵列"><a class="markdownIt-Anchor" href="#磁盘阵列"></a> 磁盘阵列</h1>
<p>使用 mdadm 软件模拟磁盘整列 RAID。如果需要监控 mdadm 建立的软磁盘阵列，可以使用 mdmonitor 服务。</p>
<h2 id="组建软磁盘阵列"><a class="markdownIt-Anchor" href="#组建软磁盘阵列"></a> 组建软磁盘阵列</h2>
<p>使用 <code>mdadm</code> 命令来设置软磁盘阵列，语法如下：</p>
<p><code>mdadm --detail /dev/md0</code></p>
<p><code>mdadm --create --auto=yes /dev/md[0-9] --raid-devices=N --level=[015] --chuck=NK --spare-devices=N /dev/sdx /dev/hdx...</code></p>
<p>主要参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>–create</td>
<td>新建 RAID 的参数</td>
</tr>
<tr>
<td>–auto=yes</td>
<td>决定新建后面接的软磁盘阵列设备，如 /dev/md0</td>
</tr>
<tr>
<td>–chunk=Nk</td>
<td>决定这个设备的 chunk 大小，一般是 64K 或 512K</td>
</tr>
<tr>
<td>–raid-devices=N</td>
<td>使用 N 个磁盘组件阵列</td>
</tr>
<tr>
<td>–spare-devices=N</td>
<td>使用 N 个磁盘作为备用设备</td>
</tr>
<tr>
<td>–level=[015]</td>
<td>设置磁盘阵列的等级</td>
</tr>
<tr>
<td>–detail</td>
<td>查询磁盘阵列设备的信息</td>
</tr>
</tbody>
</table>
<p>例如用组建 RAID 5 环境，每个分区为 10MB 大小（sdb6-9），有一块热备盘（sdb10），一块闲置盘（sdb11）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mdadm</span> <span class="token parameter variable">--create</span> <span class="token parameter variable">--auto</span><span class="token operator">=</span>yes /dev/md0 <span class="token parameter variable">--level</span><span class="token operator">=</span><span class="token number">5</span> <span class="token parameter variable">--chunk</span><span class="token operator">=</span>512K --raid-devices<span class="token operator">=</span><span class="token number">4</span> --spare-devices<span class="token operator">=</span><span class="token number">1</span> /dev/sdb<span class="token punctuation">&#123;</span><span class="token number">6,7</span>,8,9,10<span class="token punctuation">&#125;</span>
mdadm: Defaulting to version <span class="token number">1.2</span> metadata
mdadm: array /dev/md0 started.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果设置错误，可以使用 <code>mdadm --zero-superblock DEVICE</code> 命令来清空每个组成磁盘的超级块区。</p>
<p>查看组建好的软 RAID 5 设备 <code>/dev/md0</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mdadm</span> <span class="token parameter variable">--detail</span> /dev/md0
/dev/md0:
           Version <span class="token builtin class-name">:</span> <span class="token number">1.2</span>
     Creation Time <span class="token builtin class-name">:</span> Mon Sep <span class="token number">13</span> <span class="token number">15</span>:24:49 <span class="token number">2021</span>
        Raid Level <span class="token builtin class-name">:</span> raid5
        Array Size <span class="token builtin class-name">:</span> <span class="token number">24576</span> <span class="token punctuation">(</span><span class="token number">24.00</span> MiB <span class="token number">25.17</span> MB<span class="token punctuation">)</span>
     Used Dev Size <span class="token builtin class-name">:</span> <span class="token number">8192</span> <span class="token punctuation">(</span><span class="token number">8.00</span> MiB <span class="token number">8.39</span> MB<span class="token punctuation">)</span>
      Raid Devices <span class="token builtin class-name">:</span> <span class="token number">4</span>
     Total Devices <span class="token builtin class-name">:</span> <span class="token number">5</span>
       Persistence <span class="token builtin class-name">:</span> Superblock is persistent

       Update Time <span class="token builtin class-name">:</span> Mon Sep <span class="token number">13</span> <span class="token number">15</span>:24:50 <span class="token number">2021</span>
             State <span class="token builtin class-name">:</span> clean 
    Active Devices <span class="token builtin class-name">:</span> <span class="token number">4</span>
   Working Devices <span class="token builtin class-name">:</span> <span class="token number">5</span>
    Failed Devices <span class="token builtin class-name">:</span> <span class="token number">0</span>
     Spare Devices <span class="token builtin class-name">:</span> <span class="token number">1</span>

            Layout <span class="token builtin class-name">:</span> left-symmetric
        Chunk Size <span class="token builtin class-name">:</span> 512K

Consistency Policy <span class="token builtin class-name">:</span> resync

              Name <span class="token builtin class-name">:</span> 101c7:0  <span class="token punctuation">(</span>local to <span class="token function">host</span> 101c7<span class="token punctuation">)</span>
              UUID <span class="token builtin class-name">:</span> f64354f8:cf945331:eee97c66:84776736
            Events <span class="token builtin class-name">:</span> <span class="token number">18</span>

    Number   Major   Minor   RaidDevice State
       <span class="token number">0</span>       <span class="token number">8</span>       <span class="token number">22</span>        <span class="token number">0</span>      active <span class="token function">sync</span>   /dev/sdb6
       <span class="token number">1</span>       <span class="token number">8</span>       <span class="token number">23</span>        <span class="token number">1</span>      active <span class="token function">sync</span>   /dev/sdb7
       <span class="token number">2</span>       <span class="token number">8</span>       <span class="token number">24</span>        <span class="token number">2</span>      active <span class="token function">sync</span>   /dev/sdb8
       <span class="token number">5</span>       <span class="token number">8</span>       <span class="token number">25</span>        <span class="token number">3</span>      active <span class="token function">sync</span>   /dev/sdb9

       <span class="token number">4</span>       <span class="token number">8</span>       <span class="token number">26</span>        -      spare   /dev/sdb10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以通过 <code>/proc/mdstat</code> 文件查看磁盘阵列情况：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /proc/mdstat 
Personalities <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>raid6<span class="token punctuation">]</span> <span class="token punctuation">[</span>raid5<span class="token punctuation">]</span> <span class="token punctuation">[</span>raid4<span class="token punctuation">]</span> 
md0 <span class="token builtin class-name">:</span> active raid5 sdb9<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> sdb10<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span> sdb8<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> sdb7<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> sdb6<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
      <span class="token number">24576</span> blocks super <span class="token number">1.2</span> level <span class="token number">5</span>, 512k chunk, algorithm <span class="token number">2</span> <span class="token punctuation">[</span><span class="token number">4</span>/4<span class="token punctuation">]</span> <span class="token punctuation">[</span>UUUU<span class="token punctuation">]</span>
      
unused devices: <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>格式化并挂载 RAID 到 <code>/mnt/raid</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mkfs</span> <span class="token parameter variable">-t</span> ext3 /dev/md0
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> /mnt/raid <span class="token punctuation">;</span> <span class="token function">mount</span> /dev/md0 /mnt/raid <span class="token punctuation">;</span> <span class="token function">df</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'md0'</span>
/dev/md0                    <span class="token number">22773</span>     <span class="token number">209</span>     <span class="token number">21336</span>   <span class="token number">1</span>% /mnt/raid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果格式化成 xfs 格式，可以手动设置 su 和 sw 值：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ mkfs.xfs <span class="token parameter variable">-f</span> <span class="token parameter variable">-d</span> <span class="token assign-left variable">su</span><span class="token operator">=</span>512k, <span class="token assign-left variable">sw</span><span class="token operator">=</span><span class="token number">3</span> <span class="token parameter variable">-r</span> <span class="token assign-left variable">extsize</span><span class="token operator">=</span>1536k /dev/md0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="恢复磁盘阵列数据"><a class="markdownIt-Anchor" href="#恢复磁盘阵列数据"></a> 恢复磁盘阵列数据</h2>
<p><code>mdadm</code> 命令救援模式语法为：</p>
<p><code>mdadm --manage /dev/md[0-9] [--add 设备] [--remove 设备] [--fail 设备]</code></p>
<p>模拟磁盘出错可以使用 <code>--fail</code> 参数，模拟 sdb6 出错：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 mnt<span class="token punctuation">]</span>$ <span class="token function">mdadm</span> <span class="token parameter variable">--manage</span> /dev/md0 <span class="token parameter variable">--fail</span> /dev/sdb6
mdadm: <span class="token builtin class-name">set</span> /dev/sdb6 faulty <span class="token keyword">in</span> /dev/md0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>再次查看 RAID 状态：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 mnt<span class="token punctuation">]</span>$ <span class="token function">cat</span> /proc/mdstat
Personalities <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>raid6<span class="token punctuation">]</span> <span class="token punctuation">[</span>raid5<span class="token punctuation">]</span> <span class="token punctuation">[</span>raid4<span class="token punctuation">]</span> 
md0 <span class="token builtin class-name">:</span> active raid5 sdb9<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> sdb10<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> sdb8<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> sdb7<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> sdb6<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span>F<span class="token punctuation">)</span>
      <span class="token number">24576</span> blocks super <span class="token number">1.2</span> level <span class="token number">5</span>, 512k chunk, algorithm <span class="token number">2</span> <span class="token punctuation">[</span><span class="token number">4</span>/4<span class="token punctuation">]</span> <span class="token punctuation">[</span>UUUU<span class="token punctuation">]</span>
      
unused devices: <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>磁盘阵列已经自动恢复好了。将闲置磁盘 sdb11 替换掉损坏的 sdb6：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 mnt<span class="token punctuation">]</span>$ <span class="token function">mdadm</span> <span class="token parameter variable">--manage</span> /dev/md0 <span class="token parameter variable">--add</span> /dev/sdb11 <span class="token parameter variable">--remove</span> /dev/sdb6
mdadm: added /dev/sdb11
mdadm: hot removed /dev/sdb6 from /dev/md0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="自动挂载-raid"><a class="markdownIt-Anchor" href="#自动挂载-raid"></a> 自动挂载 RAID</h2>
<p>设置 <code>/etc/mdadm.conf</code> 文件来将 RAID 设备自动挂载：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 mnt<span class="token punctuation">]</span>$ <span class="token function">mdadm</span> <span class="token parameter variable">--detail</span> /dev/md0 <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> uuid
              UUID <span class="token builtin class-name">:</span> f64354f8:cf945331:eee97c66:84776736
<span class="token punctuation">[</span>root@101c7 mnt<span class="token punctuation">]</span>$ <span class="token function">vi</span> /etc/mdadm.conf
ARRAY /dev/md0 <span class="token assign-left variable">UUID</span><span class="token operator">=</span>f64354f8:cf945331:eee97c66:84776736
<span class="token punctuation">[</span>root@101c7 mnt<span class="token punctuation">]</span>$ <span class="token function">vi</span> /etc/fstab
/dev/md0        /mnt/raid       ext3    defaults        <span class="token number">1</span>       <span class="token number">2</span>
<span class="token punctuation">[</span>root@101c7 mnt<span class="token punctuation">]</span>$ <span class="token function">umount</span> /dev/md0<span class="token punctuation">;</span> <span class="token function">mount</span> <span class="token parameter variable">-a</span>
<span class="token punctuation">[</span>root@101c7 mnt<span class="token punctuation">]</span>$ <span class="token function">df</span> /mnt/raid
Filesystem     1K-blocks  Used Available Use% Mounted on
/dev/md0           <span class="token number">22773</span>   <span class="token number">212</span>     <span class="token number">21333</span>   <span class="token number">1</span>% /mnt/raid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="关闭软-raid"><a class="markdownIt-Anchor" href="#关闭软-raid"></a> 关闭软 RAID</h2>
<p>先删除配置文件 <code>/etc/fstab</code> 中 <code>/dev/md0</code> 的挂载行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 mnt<span class="token punctuation">]</span>$ <span class="token function">vi</span> /etc/fstab
<span class="token comment"># /dev/md0      /mnt/raid       ext3    defaults        1       2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>卸载 <code>/dev/md0</code> 并关闭：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 mnt<span class="token punctuation">]</span>$ <span class="token function">umount</span> /dev/md0
<span class="token punctuation">[</span>root@101c7 mnt<span class="token punctuation">]</span>$ <span class="token function">mdadm</span> <span class="token parameter variable">--stop</span> /dev/md0
mdadm: stopped /dev/md0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果要重新启用使用 <code>mdadm --assemble --scan /dev/md0</code> 命令。</p>
<p>最后删除 <code>/etc/mdadm.conf</code> 中与 md0 有关的内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 mnt<span class="token punctuation">]</span>$ <span class="token function">vi</span> /etc/mdadm.conf 
<span class="token comment"># ARRAY /dev/md0 UUID=f64354f8:cf945331:eee97c66:84776736</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="lvm"><a class="markdownIt-Anchor" href="#lvm"></a> LVM</h1>
<p>如果安装系统分区使用默认配置，系统会自动建立 LVM 格式。</p>
<h2 id="建立-pv"><a class="markdownIt-Anchor" href="#建立-pv"></a> 建立 PV</h2>
<p>首先用 <code>fdisk</code> 建立分区，假设四个分区为 <code>sdb1-4</code>，然后用 <code>fdisk</code> 依次更改 <code>system ID</code> 为 <code>8e</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">fdisk</span> /dev/sdb
Welcome to <span class="token function">fdisk</span> <span class="token punctuation">(</span>util-linux <span class="token number">2.23</span>.2<span class="token punctuation">)</span>.

Changes will remain <span class="token keyword">in</span> memory only, <span class="token keyword">until</span> you decide to <span class="token function">write</span> them.
Be careful before using the <span class="token function">write</span> command.


Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: p

Disk /dev/sdb: <span class="token number">1073</span> MB, <span class="token number">1073741824</span> bytes, <span class="token number">2097152</span> sectors
Units <span class="token operator">=</span> sectors of <span class="token number">1</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">512</span> bytes
Sector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
I/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">512</span> bytes
Disk label type: dos
Disk identifier: 0x0006fb94

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1            <span class="token number">2048</span>      <span class="token number">206847</span>      <span class="token number">102400</span>   8e  Linux LVM
/dev/sdb2          <span class="token number">206848</span>      <span class="token number">411647</span>      <span class="token number">102400</span>   8e  Linux LVM
/dev/sdb3          <span class="token number">411648</span>      <span class="token number">616447</span>      <span class="token number">102400</span>   8e  Linux LVM
/dev/sdb4          <span class="token number">616448</span>      <span class="token number">821247</span>      <span class="token number">102400</span>   8e  Linux LVM

Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: t
Partition number <span class="token punctuation">(</span><span class="token number">1</span>-4, default <span class="token number">4</span><span class="token punctuation">)</span>: <span class="token number">1</span>
Hex code <span class="token punctuation">(</span>type L to list all codes<span class="token punctuation">)</span>: 8e
Changed <span class="token builtin class-name">type</span> of partition <span class="token string">'Linux LVM'</span> to <span class="token string">'Linux LVM'</span>

Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: w
The partition table has been altered<span class="token operator">!</span>

Calling ioctl<span class="token punctuation">(</span><span class="token punctuation">)</span> to re-read partition table.
Syncing disks.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>配置好后更新系统：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ partprobe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>PV 有关的命令有下面这些：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>pvcreate</td>
<td>将物理分区新建成 PV</td>
</tr>
<tr>
<td>pvscan</td>
<td>查询目前系统里的 PV</td>
</tr>
<tr>
<td>pvdisplay</td>
<td>显示出目前系统上面的 PV 状态</td>
</tr>
<tr>
<td>pvremove</td>
<td>将 PV 属性删除</td>
</tr>
</tbody>
</table>
<p>先使用 <code>pvcreate</code> 命令将 <code>sdb1-4</code> 转换成 PV：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ pvcreate /dev/sdb<span class="token punctuation">&#123;</span><span class="token number">1,2</span>,3,4<span class="token punctuation">&#125;</span>
WARNING: ext3 signature detected on /dev/sdb1 at offset <span class="token number">1080</span>. Wipe it? <span class="token punctuation">[</span>y/n<span class="token punctuation">]</span>: y
  Wiping ext3 signature on /dev/sdb1.
WARNING: dos signature detected on /dev/sdb2 at offset <span class="token number">510</span>. Wipe it? <span class="token punctuation">[</span>y/n<span class="token punctuation">]</span>: y
  Wiping dos signature on /dev/sdb2.
WARNING: swap signature detected on /dev/sdb4 at offset <span class="token number">4086</span>. Wipe it? <span class="token punctuation">[</span>y/n<span class="token punctuation">]</span>: y
  Wiping swap signature on /dev/sdb4.
  Physical volume <span class="token string">"/dev/sdb1"</span> successfully created.
  Physical volume <span class="token string">"/dev/sdb2"</span> successfully created.
  Physical volume <span class="token string">"/dev/sdb3"</span> successfully created.
  Physical volume <span class="token string">"/dev/sdb4"</span> successfully created.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后使用 <code>pvscan</code> 查询已存在的 PV：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ pvscan
  PV /dev/sda2   VG centos          lvm2 <span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token number">19.00</span> GiB / <span class="token number">0</span>    free<span class="token punctuation">]</span>
  PV /dev/sdb2                      lvm2 <span class="token punctuation">[</span><span class="token number">100.00</span> MiB<span class="token punctuation">]</span>
  PV /dev/sdb1                      lvm2 <span class="token punctuation">[</span><span class="token number">100.00</span> MiB<span class="token punctuation">]</span>
  PV /dev/sdb3                      lvm2 <span class="token punctuation">[</span><span class="token number">100.00</span> MiB<span class="token punctuation">]</span>
  PV /dev/sdb4                      lvm2 <span class="token punctuation">[</span><span class="token number">100.00</span> MiB<span class="token punctuation">]</span>
  Total: <span class="token number">5</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token number">19.39</span> GiB<span class="token punctuation">]</span> / <span class="token keyword">in</span> use: <span class="token number">1</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token number">19.00</span> GiB<span class="token punctuation">]</span> / <span class="token keyword">in</span> no VG: <span class="token number">4</span> <span class="token punctuation">[</span><span class="token number">400.00</span> MiB<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后 <code>pvdisplay</code> 查看每个 PV 的详细信息，确认准确无误：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ pvdisplay
<span class="token string">"/dev/sdb2"</span> is a new physical volume of <span class="token string">"100.00 MiB"</span>
  --- NEW Physical volume ---
  PV Name               /dev/sdb2
  VG Name               
  PV Size               <span class="token number">100.00</span> MiB
  Allocatable           NO
  PE Size               <span class="token number">0</span>   
  Total PE              <span class="token number">0</span>
  Free PE               <span class="token number">0</span>
  Allocated PE          <span class="token number">0</span>
  PV UUID               0pMJ0Q-1h7w-1fMb-OTKS-Xqa5-sjQj-XSUdSi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="建立-vg"><a class="markdownIt-Anchor" href="#建立-vg"></a> 建立 VG</h2>
<p>与 VG 相关的命令有下面这些：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>vgcreate</td>
<td>新建 VG 的命令</td>
</tr>
<tr>
<td>vgscan</td>
<td>查找系统上的 VG</td>
</tr>
<tr>
<td>vgdisplay</td>
<td>显示系统上的 VG 状态</td>
</tr>
<tr>
<td>vgextend</td>
<td>在 VG 内增加额外 PV</td>
</tr>
<tr>
<td>vgreduce</td>
<td>在 VG 内删除 PV</td>
</tr>
<tr>
<td>vgchange</td>
<td>设置 VG 是否启动 (active)</td>
</tr>
<tr>
<td>vgremove</td>
<td>删除一个 VG</td>
</tr>
</tbody>
</table>
<p>新建 VG 使用 <code>vgcreate</code> 命令的语法如下：</p>
<p><code>vgcreate [-s PE大小[MGT]] VG名称 PV名称</code></p>
<p>将 <code>/dev/sdb1-3</code> 新建成一个 VG 名为 VG400，并指定 PE 为 4MB：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ vgcreate <span class="token parameter variable">-s</span> 4M VG400 /dev/sdb<span class="token punctuation">&#123;</span><span class="token number">1,2</span>,3<span class="token punctuation">&#125;</span>
  Volume group <span class="token string">"VG400"</span> successfully created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>查看 VG 和 PV 的信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ vgscan
  Reading volume <span class="token function">groups</span> from cache.
  Found volume group <span class="token string">"centos"</span> using metadata <span class="token builtin class-name">type</span> lvm2
  Found volume group <span class="token string">"VG400"</span> using metadata <span class="token builtin class-name">type</span> lvm2
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ pvscan
  PV /dev/sda2   VG centos          lvm2 <span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token number">19.00</span> GiB / <span class="token number">0</span>    free<span class="token punctuation">]</span>
  PV /dev/sdb1   VG VG400           lvm2 <span class="token punctuation">[</span><span class="token number">96.00</span> MiB / <span class="token number">96.00</span> MiB free<span class="token punctuation">]</span>
  PV /dev/sdb2   VG VG400           lvm2 <span class="token punctuation">[</span><span class="token number">96.00</span> MiB / <span class="token number">96.00</span> MiB free<span class="token punctuation">]</span>
  PV /dev/sdb3   VG VG400           lvm2 <span class="token punctuation">[</span><span class="token number">96.00</span> MiB / <span class="token number">96.00</span> MiB free<span class="token punctuation">]</span>
  PV /dev/sdb4                      lvm2 <span class="token punctuation">[</span><span class="token number">100.00</span> MiB<span class="token punctuation">]</span>
  Total: <span class="token number">5</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token number">19.38</span> GiB<span class="token punctuation">]</span> / <span class="token keyword">in</span> use: <span class="token number">4</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token number">19.28</span> GiB<span class="token punctuation">]</span> / <span class="token keyword">in</span> no VG: <span class="token number">1</span> <span class="token punctuation">[</span><span class="token number">100.00</span> MiB<span class="token punctuation">]</span>
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ vgdisplay
--- Volume group ---
  VG Name               VG400
  System ID             
  Format                lvm2
  Metadata Areas        <span class="token number">3</span>
  Metadata Sequence No  <span class="token number">1</span>
  VG Access             read/write
  VG Status             resizable
  MAX LV                <span class="token number">0</span>
  Cur LV                <span class="token number">0</span>
  Open LV               <span class="token number">0</span>
  Max PV                <span class="token number">0</span>
  Cur PV                <span class="token number">3</span>
  Act PV                <span class="token number">3</span>
  VG Size               <span class="token number">288.00</span> MiB
  PE Size               <span class="token number">4.00</span> MiB
  Total PE              <span class="token number">72</span>
  Alloc PE / Size       <span class="token number">0</span> / <span class="token number">0</span>   
  Free  PE / Size       <span class="token number">72</span> / <span class="token number">288.00</span> MiB
  VG UUID               mWWhO0-wuDl-z62s-BPZZ-L1Ck-0Pbs-DNTCIf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到 3 个 PV 已经加入到 VG400 当中了，VG 容量 288MB，PE 大小 4MB，总共有 72 个 PV。</p>
<p>要给 VG 扩容，将剩下的 <code>sdb4</code> 加入到 <code>VG400</code> 中可以使用 <code>vgextend</code> 命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ vgextend VG400 /dev/sdb4
  Volume group <span class="token string">"VG400"</span> successfully extended<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="建立-lv"><a class="markdownIt-Anchor" href="#建立-lv"></a> 建立 LV</h2>
<p>和 LV 有关的命令如下：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>lvcreate</td>
<td>新建 LV</td>
</tr>
<tr>
<td>lvscan</td>
<td>查询系统上的 LV</td>
</tr>
<tr>
<td>lvdisplay</td>
<td>显示系统上的 LV 状态</td>
</tr>
<tr>
<td>lvextend</td>
<td>在 LV 里面增加容量</td>
</tr>
<tr>
<td>lvreduce</td>
<td>在 LV 里面减少容量</td>
</tr>
<tr>
<td>lvremove</td>
<td>删除一个 LV</td>
</tr>
<tr>
<td>lvresize</td>
<td>对 LV 进行容量大小调整</td>
</tr>
</tbody>
</table>
<p>建立 LV 使用命令 <code>lvcreate</code> 基本语法如下：</p>
<p><code>lvcreate [-L 容量[MGT]] [-n LV名称] VG名称</code></p>
<p><code>lvcreate [-l PE个数] [-n LV名称] VG名称</code></p>
<p>将整个 <code>VG400</code> 分配给 <code>LV400</code>（不带 <code>-l</code> 参数默认会分配全部容量）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ lvcreate <span class="token parameter variable">-l</span> <span class="token number">96</span> <span class="token parameter variable">-n</span> LV400 VG400
  Logical volume <span class="token string">"LV400"</span> created.
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ lvdisplay
  --- Logical volume ---
  LV Path                /dev/VG400/LV400
  LV Name                LV400
  VG Name                VG400
  LV UUID                21Hgtc-LzS0-2XvL-XiXD-3DPd-94Cu-zQfcvU
  LV Write Access        read/write
  LV Creation host, <span class="token function">time</span> 101c7, <span class="token number">2021</span>-09-13 <span class="token number">17</span>:26:08 <span class="token parameter variable">-0400</span>
  LV Status              available
  <span class="token comment"># open                 0</span>
  LV Size                <span class="token number">384.00</span> MiB
  Current LE             <span class="token number">96</span>
  Segments               <span class="token number">4</span>
  Allocation             inherit
  Read ahead sectors     auto
  - currently <span class="token builtin class-name">set</span> to     <span class="token number">8192</span>
  Block device           <span class="token number">253</span>:2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将 <code>LV400</code> 格式化成 <code>ext3</code> 并挂载到 <code>/ext333</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ mkfs.ext3 /dev/VG400/LV400 
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mount</span> /dev/VG400/LV400 /ext333/
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">df</span>
Filesystem              1K-blocks    Used Available Use% Mounted on
devtmpfs                  <span class="token number">1918780</span>       <span class="token number">0</span>   <span class="token number">1918780</span>   <span class="token number">0</span>% /dev
tmpfs                     <span class="token number">1930640</span>       <span class="token number">0</span>   <span class="token number">1930640</span>   <span class="token number">0</span>% /dev/shm
tmpfs                     <span class="token number">1930640</span>   <span class="token number">11924</span>   <span class="token number">1918716</span>   <span class="token number">1</span>% /run
tmpfs                     <span class="token number">1930640</span>       <span class="token number">0</span>   <span class="token number">1930640</span>   <span class="token number">0</span>% /sys/fs/cgroup
/dev/mapper/centos-root  <span class="token number">17811456</span> <span class="token number">2598096</span>  <span class="token number">15213360</span>  <span class="token number">15</span>% /
/dev/sda1                 <span class="token number">1038336</span>  <span class="token number">190536</span>    <span class="token number">847800</span>  <span class="token number">19</span>% /boot
tmpfs                      <span class="token number">386128</span>       <span class="token number">0</span>    <span class="token number">386128</span>   <span class="token number">0</span>% /run/user/0
/dev/mapper/VG400-LV400    <span class="token number">372615</span>    <span class="token number">2095</span>    <span class="token number">350860</span>   <span class="token number">1</span>% /ext333<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="lvm-扩容"><a class="markdownIt-Anchor" href="#lvm-扩容"></a> LVM 扩容</h2>
<p>扩容分为以下步骤:</p>
<ol>
<li>用 <code>fdisk</code> 设置新分区 system ID 为 8e；</li>
<li>利用 <code>pvcreate</code> 构建 PV；</li>
<li>利用 <code>vgextend</code> 将 PV 加入 VG；</li>
<li>利用 <code>lvresize</code> 将新加入 VG 内的 PE 加入到 LV 中；</li>
<li>利用 <code>resize2fs</code> 将文件系统容量增加。</li>
</ol>
<p>先扫描新增加的 SCSI 接口硬盘：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"- - -"</span> <span class="token operator">></span> /sys/class/scsi_host/host0/scan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>对新扫描到的硬盘 <code>/dev/sdc</code> 进行分区，并设置 8e 标志：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">fdisk</span> /dev/sdc
Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: n
Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: t
Hex code <span class="token punctuation">(</span>type L to list all codes<span class="token punctuation">)</span>: 8e
Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> <span class="token builtin class-name">help</span><span class="token punctuation">)</span>: w
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ partprobe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过 <code>sdc1</code> 建立 PV：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ pvcreate /dev/sdc1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>将 <code>sdc1</code> 加入到 <code>VG400</code> 中：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ vgextend VG400 /dev/sdc1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用 <code>lvresize</code> 命令对 <code>LV400</code> 进行扩容。如果要使用所有空闲容量可以使用 <code>+100%FREE</code> 参数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ lvresize <span class="token parameter variable">-l</span> +255 /dev/VG400/LV400 
  Size of logical volume VG400/LV400 changed from <span class="token number">384.00</span> MiB <span class="token punctuation">(</span><span class="token number">96</span> extents<span class="token punctuation">)</span> to <span class="token number">1.37</span> GiB <span class="token punctuation">(</span><span class="token number">351</span> extents<span class="token punctuation">)</span>.
  Logical volume VG400/LV400 successfully resized.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>最后使用 <code>resize2fs</code> 扩容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ resize2fs /dev/VG400/LV400 
resize2fs <span class="token number">1.42</span>.9 <span class="token punctuation">(</span><span class="token number">28</span>-Dec-2013<span class="token punctuation">)</span>
Filesystem at /dev/VG400/LV400 is mounted on /ext333<span class="token punctuation">;</span> on-line resizing required
old_desc_blocks <span class="token operator">=</span> <span class="token number">2</span>, new_desc_blocks <span class="token operator">=</span> <span class="token number">6</span>
The filesystem on /dev/VG400/LV400 is now <span class="token number">1437696</span> blocks long.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>xfs</code> 文件系统使用的是 <code>xfs_growfs</code> 命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ xfs_growfs /dev/VG400/LV400<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="lvm-缩容"><a class="markdownIt-Anchor" href="#lvm-缩容"></a> LVM 缩容</h2>
<p>XFS 文件系统不支持缩容。如果要进行缩容，需要将 <code>/dev/sdc1</code> 抽出来，首先需要 <code>umount</code> 挂载点：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">umount</span> /ext333/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后对 <code>LV400</code> 运行磁盘检查：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ e2fsck <span class="token parameter variable">-f</span> /dev/VG400/LV400<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>用 <code>resize2fs</code> 命令对 <code>LV400</code> 的容量进行缩减 <code>sdc1</code> 的大小：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ resize2fs /dev/VG400/LV400 200M<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>重新挂载 <code>LV400</code> 到 <code>/ext333</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mount</span> /dev/VG400/LV400 /ext333/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>去除 <code>sdc1</code> 上的 PE 数 <code>255</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ lvresize <span class="token parameter variable">-l</span> <span class="token parameter variable">-255</span> /dev/VG400/LV400<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>转移 <code>sdc1</code> 上 PE 的数据到 <code>sdb2</code>。<code>pvmove</code> 同样可以用来在想要更换物理磁盘时使用：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ pvmove /dev/sdc1 /dev/sdb2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>将 <code>sdc1</code> 移出 <code>VG400</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ vgreduce VG400 /dev/sdc1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>最后删除 <code>sdc1</code> 上的 <code>pv</code> 标记：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ pvremove /dev/sdc1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="lvm-thin-volume"><a class="markdownIt-Anchor" href="#lvm-thin-volume"></a> LVM Thin Volume</h2>
<p>LVM Thin Volume 先创建一个磁盘容量储存池（Thin Pool），再由这个储存池去产生一个指定要固定容量大小的 LV 设备，它可以设定任意大小，但在需要用到时才从储存池划取所需容量。只要实际用量不超过储存池总容量就行。</p>
<p>先从 <code>VG400</code> 的剩余容量中取出 100 MB 来创建储存池 <code>vpool</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ lvcreate <span class="token parameter variable">-L</span> 100M <span class="token parameter variable">-T</span> /dev/VG400/vpool
  Thin pool volume with chunk size <span class="token number">64.00</span> KiB can address at <span class="token function">most</span> <span class="token number">15.81</span> TiB of data.
  Logical volume <span class="token string">"vpool"</span> created.
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ lvdisplay /dev/VG400/vpool
  --- Logical volume ---
  LV Name                vpool
  VG Name                VG400
  LV UUID                Zl8N7t-SiIF-edLi-COKJ-PrVx-Ma7H-vA1e2U
  LV Write Access        read/write
  LV Creation host, <span class="token function">time</span> 101c7, <span class="token number">2021</span>-09-17 <span class="token number">16</span>:43:00 <span class="token parameter variable">-0400</span>
  LV Pool metadata       vpool_tmeta
  LV Pool data           vpool_tdata
  LV Status              available
  <span class="token comment"># open                 0</span>
  LV Size                <span class="token number">100.00</span> MiB
  Allocated pool data    <span class="token number">0.00</span>%
  Allocated metadata     <span class="token number">10.84</span>%
  Current LE             <span class="token number">25</span>
  Segments               <span class="token number">1</span>
  Allocation             inherit
  Read ahead sectors     auto
  - currently <span class="token builtin class-name">set</span> to     <span class="token number">8192</span>
  Block device           <span class="token number">253</span>:8
  <span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ lvs VG400
  LV     VG    Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  LV400  VG400 owi-aos--- <span class="token number">384</span>.00m                                                    
  VG400m VG400 swi-I-s---  <span class="token number">96</span>.00m      LV400  <span class="token number">100.00</span>                                 
  vpool  VG400 twi-a-tz-- <span class="token number">100</span>.00m             <span class="token number">0.00</span>   <span class="token number">10.84</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建 <code>vthin1</code> 设备，大小定为 1 GB：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ lvcreate <span class="token parameter variable">-V</span> 1G <span class="token parameter variable">-T</span> /dev/VG400/vpool <span class="token parameter variable">-n</span> vthin1
  WARNING: Sum of all thin volume sizes <span class="token punctuation">(</span><span class="token number">34.00</span> GiB<span class="token punctuation">)</span> exceeds the size of thin pool VG400/vpool and the size of whole volume group <span class="token punctuation">(</span><span class="token number">1.37</span> GiB<span class="token punctuation">)</span>.
  WARNING: You have not turned on protection against thin pools running out of space.
  WARNING: Set activation/thin_pool_autoextend_threshold below <span class="token number">100</span> to trigger automatic extension of thin pools before they get full.
  Logical volume <span class="token string">"vthin1"</span> created.
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ lvs VG400
  LV     VG    Attr       LSize   Pool  Origin Data%  Meta%  Move Log Cpy%Sync Convert
  LV400  VG400 owi-aos--- <span class="token number">384</span>.00m                                                     
  VG400m VG400 swi-I-s---  <span class="token number">96</span>.00m       LV400  <span class="token number">100.00</span>                                 
  vpool  VG400 twi-aotzD- <span class="token number">100</span>.00m              <span class="token number">100.00</span> <span class="token number">12.11</span>                           
  vthin1 VG400 Vwi-a-tz--  <span class="token number">34</span>.00g vpool        <span class="token number">0.29</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>格式化成 xfs 文件系统并挂载到 <code>/root/thin1</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ mkfs.xfs /dev/VG400/vthin1
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">mount</span> /dev/VG400/vthin1 /root/thin1/
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">df</span> <span class="token parameter variable">-hT</span>
/dev/mapper/VG400-LV400  ext3      186M   62M  116M  <span class="token number">35</span>% /ext333
/dev/sdd1                xfs       497M   56M  441M  <span class="token number">12</span>% /xfs333
/dev/mapper/VG400-vthin1 xfs      1014M   33M  982M   <span class="token number">4</span>% /root/thin1
<span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ lvs
  LV     VG     Attr       LSize   Pool  Origin Data%  Meta%  Move Log Cpy%Sync Convert
  LV400  VG400  owi-aos--- <span class="token number">384</span>.00m                                                     
  VG400m VG400  swi-I-s---  <span class="token number">96</span>.00m       LV400  <span class="token number">100.00</span>                                 
  vpool  VG400  twi-aotz-- <span class="token number">100</span>.00m              <span class="token number">10.69</span>  <span class="token number">10.94</span>                           
  vthin1 VG400  Vwi-aotz--   <span class="token number">1</span>.00g vpool        <span class="token number">1.04</span>         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用储存池一定要注意容量问题，否则超容量使用会造成数据损毁，并且没有系统提示。</p>
<h2 id="lvm-快照"><a class="markdownIt-Anchor" href="#lvm-快照"></a> LVM 快照</h2>
<p>LVM 可以使用系统快照（snapshot）功能来备份需要的原始数据。快照区与被快照区为不同 LV 中，但要在同一个 VG 上面。</p>
<p>这里使用 <code>sdc1</code> 作为快照区使用。使用 <code>lvcreate -s</code> 来新建系统快照区 <code>VG400m</code>，并给予一个 PV 占用的 PE 数量 24：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ lvcreate <span class="token parameter variable">-l</span> <span class="token number">24</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-n</span> VG400m /dev/VG400/LV400 
  Logical volume <span class="token string">"VG400m"</span> created.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>使用 <code>lvdisplay</code> 查看一下新建的快照区 <code>snap_lv400</code> 信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ lvdisplay
  --- Logical volume ---
  LV Path                /dev/VG400/VG400m
  LV Name                VG400m
  VG Name                VG400
  LV UUID                cNZB7T-8D2u-IlRt-05sP-e8We-R4ox-WDNqW1
  LV Write Access        read/write
  LV Creation host, <span class="token function">time</span> 101c7, <span class="token number">2021</span>-09-13 <span class="token number">18</span>:22:45 <span class="token parameter variable">-0400</span>
  LV snapshot status     active destination <span class="token keyword">for</span> LV400
  LV Status              available
  <span class="token comment"># open                 0</span>
  LV Size                <span class="token number">384.00</span> MiB
  Current LE             <span class="token number">96</span>
  COW-table size         <span class="token number">96.00</span> MiB
  COW-table LE           <span class="token number">24</span>
  Allocated to snapshot  <span class="token number">0.01</span>%
  Snapshot chunk size    <span class="token number">4.00</span> KiB
  Segments               <span class="token number">1</span>
  Allocation             inherit
  Read ahead sectors     auto
  - currently <span class="token builtin class-name">set</span> to     <span class="token number">8192</span>
  Block device           <span class="token number">253</span>:5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中 COW-table size 是快照区的实际容量。可以将快照区挂载后查看内容，取出里面数据。</p>
<p>如果是 xfs 文件系统挂载时得使用 <code>nouuid</code> 参数。</p>
<p>要想建立快照区，必须注意快照区剩余容量要能装得下原始数据，如果快照区容纳不了，快照功能会失效。</p>
<p>也可以将快照挂载后卸载原先 LV，使用快照区作为测试环境在上面测试，测试完毕后直接将快照区删除。</p>
<p>要删除快照，先 <code>umount</code> 再使用 <code>lvremove</code> 命令即可。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>2.系统管理</category>
      </categories>
  </entry>
  <entry>
    <title>Awk 命令简单用法</title>
    <url>/1712308461/</url>
    <content><![CDATA[<h1 id="命令语法"><a class="markdownIt-Anchor" href="#命令语法"></a> 命令语法</h1>
<p>awk 用于处理每一行的字段内的数据，默认字段的分隔符为空格或 <code>[Tab]</code>。</p>
<p>awk 的命令语法如下：</p>
<p><code>awk '条件类型1&#123;动作1&#125; 条件类型2&#123;动作2&#125; ...' 文件名</code></p>
<p>awk 后面接两个单引号 ‘’ 并加上大括号 {} 来设置想要对数据进行的处理操作。</p>
<p><code>$0</code> 代表整个输入行，<code>$n</code> 表示第 n 个字段。在应用脚本之前，awk 会先拆分输入记录。</p>
<p>每次从一个或多个文件中读入一行或从标准输入中读入一行，指令包含在小括号对中。</p>
<p>awk 将每个输入行解释为一条记录，行中的每个单词由空格或制表符分割解释为一个字段。</p>
<h1 id="awk-处理流程"><a class="markdownIt-Anchor" href="#awk-处理流程"></a> awk 处理流程</h1>
<p>整个 <code>awk</code> 的处理流程是：</p>
<ol>
<li>读入第一行，并将第一行的数据填入 <code>$0</code>, <code>$1</code>, <code>$2</code> 等变量中；</li>
<li>依据条件类型的限制，判断是否需要进行后面的动作；</li>
<li>完成所有动作与条件类型；</li>
<li>重复以上流程步骤，直到所有数据读完为止。</li>
</ol>
<h1 id="awk-内置变量"><a class="markdownIt-Anchor" href="#awk-内置变量"></a> awk 内置变量</h1>
<p><code>awk</code> 常用的内置变量如下表：</p>
<table>
<thead>
<tr>
<th><strong>变量名</strong></th>
<th><strong>代表意义</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>NF</td>
<td>每一行(<code>$0</code>)拥有的字段总数(列数)</td>
</tr>
<tr>
<td>NR</td>
<td>目前 <code>awk</code> 所正在处理数据的行号</td>
</tr>
<tr>
<td>FS</td>
<td>输入字段分隔字符</td>
</tr>
<tr>
<td>OFS</td>
<td>输出字段分隔符</td>
</tr>
<tr>
<td>RS</td>
<td>输入记录分隔符</td>
</tr>
<tr>
<td>ORS</td>
<td>输出记录分隔符</td>
</tr>
<tr>
<td>FIELDWIDTHS</td>
<td>定义分割数据字段依据的宽度</td>
</tr>
</tbody>
</table>
<h1 id="格式化打印"><a class="markdownIt-Anchor" href="#格式化打印"></a> 格式化打印</h1>
<p><code>printf</code> 可以帮我们将数据输出的结果格式化，并且支持一些特殊字符。</p>
<p>命令格式：</p>
<p><code>printf '打印样式' 实际内容</code></p>
<p>特殊样式：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>样式</th>
</tr>
</thead>
<tbody>
<tr>
<td>\a</td>
<td>警告声音；</td>
</tr>
<tr>
<td>\b</td>
<td>退格键；</td>
</tr>
<tr>
<td>\f</td>
<td>清除屏幕；</td>
</tr>
<tr>
<td>\n</td>
<td>输出到新一行；</td>
</tr>
<tr>
<td>\r</td>
<td>回车键；</td>
</tr>
<tr>
<td>\t</td>
<td>水平 [tab] 按键；</td>
</tr>
<tr>
<td>\v</td>
<td>垂直 [tab] 按键；</td>
</tr>
<tr>
<td>\xNN</td>
<td>NN 为两位数的数字，可以转为字符；</td>
</tr>
<tr>
<td>%ns</td>
<td>n 为数字，s 表示字符串数量；</td>
</tr>
<tr>
<td>%ni</td>
<td>n 为数字，i 表示整数位数；</td>
</tr>
<tr>
<td>%<a href="http://N.nf">N.nf</a></td>
<td>n 与 N 为数字，f 代表多少位小数；</td>
</tr>
</tbody>
</table>
<h1 id="分割数据"><a class="markdownIt-Anchor" href="#分割数据"></a> 分割数据</h1>
<p>例如取出 <code>last</code> 命令结果中用户名（第一列）与登录 IP（第三列）地址：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ last <span class="token parameter variable">-n</span> <span class="token number">5</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1 "--" $3&#125;'</span>
root--Sat
root--192.168.2.101
root--192.168.2.101
root--192.168.2.101
root--192.168.2.101<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用 <code>print</code> 将结果打印出来是 <code>awk</code> 最常用功能。</p>
<p>将内置变量打印出来：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ last <span class="token parameter variable">-n</span> <span class="token number">5</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1 "  lines:" NR "   columes:" NF&#125;'</span>
root  lines:1   columes:9
root  lines:2   columes:10
root  lines:3   columes:10
root  lines:4   columes:10
root  lines:5   columes:10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>awk</code> 可以使用逻辑运算符来写判断条件。例如查找 UID 小于 10 的用户：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ <span class="token function">cat</span> b.cfg <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'BEGIN &#123;FS=":"&#125; $3&lt;10&#123;print $1 "\t" $3&#125;'</span>
root    <span class="token number">0</span>
bin     <span class="token number">1</span>
daemon  <span class="token number">2</span>
adm     <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>命令由两个组成，前面一个命令定义了分隔符 <code>FS</code> 的值为：（也可以使用 <code>-F</code> 参数），同时使用 <code>BEGIN</code> 这个关键字，预先设置 <code>awk</code> 的变量。第二部分做逻辑判断 <code>$3</code> 小于 10 的才运行后面 <code>print</code> 命令。</p>
<p>同时使用 <code>FS</code> 和 <code>OFS</code> 格式化输出：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 bin<span class="token punctuation">]</span>$ <span class="token function">awk</span> <span class="token string">'BEGIN&#123;FS=","; OFS="--"&#125; &#123;print $1,$2&#125;'</span> user.csv 
user6--user6
user7--user7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>自定义按字符数来分割：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 bin<span class="token punctuation">]</span>$ <span class="token function">awk</span> <span class="token string">'BEGIN&#123;FIELDWIDTHS="5 1"&#125; &#123;print $1,$2,$0&#125;'</span> user.csv 
user6 , user6,user6
user7 , user7,user7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果数据是多行形式，可以指定分隔符为 <code>\n</code>，以空行为界定新记录的分隔符：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server1 bin<span class="token punctuation">]</span>$ <span class="token function">awk</span> <span class="token string">'BEGIN&#123;FS="\n"; RS=""&#125; &#123;print $0 $2&#125;'</span> user.csv 
user6,user6
<span class="token number">403403</span>
user7,user7
<span class="token number">404404</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>awk</code> 还可以使用正则表达式来进行模式匹配。例如只显示 <code>$1</code> 含有 <code>root</code> 字符串的用户：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 sdb4m<span class="token punctuation">]</span>$ <span class="token function">cat</span> b.cfg <span class="token operator">|</span> <span class="token function">awk</span> -F: <span class="token string">'/root/&#123;print $1 "\t" $3&#125;'</span>
root    <span class="token number">0</span>
operator        <span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux</category>
        <category>3.脚本编程</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 中文件属性详解</title>
    <url>/1872252014/</url>
    <content><![CDATA[<h1 id="查看文件属性"><a class="markdownIt-Anchor" href="#查看文件属性"></a> 查看文件属性</h1>
<p>执行 <code>ls -la</code> 命令后，可以看到当前目录下所有文件的权限和属性：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ ll <span class="token parameter variable">-la</span>
total <span class="token number">32</span>
dr-xr-x---.  <span class="token number">4</span> root root  <span class="token number">175</span> Sep  <span class="token number">8</span> <span class="token number">22</span>:48 <span class="token builtin class-name">.</span>
dr-xr-xr-x. <span class="token number">17</span> root root  <span class="token number">224</span> Sep  <span class="token number">7</span> <span class="token number">13</span>:37 <span class="token punctuation">..</span>
-rw-------.  <span class="token number">1</span> root root <span class="token number">1260</span> Sep  <span class="token number">7</span> <span class="token number">13</span>:38 anaconda-ks.cfg
-rw-------.  <span class="token number">1</span> root root  <span class="token number">847</span> Sep  <span class="token number">8</span> <span class="token number">12</span>:32 .bash_history
-rw-r--r--.  <span class="token number">1</span> root root   <span class="token number">18</span> Dec <span class="token number">28</span>  <span class="token number">2013</span> .bash_logout
-rw-r--r--.  <span class="token number">1</span> root root  <span class="token number">176</span> Dec <span class="token number">28</span>  <span class="token number">2013</span> .bash_profile
-rw-r--r--.  <span class="token number">1</span> root root  <span class="token number">176</span> Dec <span class="token number">28</span>  <span class="token number">2013</span> .bashrc
-rw-r--r--.  <span class="token number">1</span> root root  <span class="token number">100</span> Dec <span class="token number">28</span>  <span class="token number">2013</span> .cshrc
drwxr-xr-x.  <span class="token number">2</span> root root    <span class="token number">6</span> Sep  <span class="token number">8</span> <span class="token number">22</span>:48 dir1
drwxr-----.  <span class="token number">3</span> root root   <span class="token number">19</span> Sep  <span class="token number">7</span> 05:51 .pki
-rw-r--r--.  <span class="token number">1</span> root root  <span class="token number">129</span> Dec <span class="token number">28</span>  <span class="token number">2013</span> .tcshrc
-rw-------.  <span class="token number">1</span> root root  <span class="token number">508</span> Sep  <span class="token number">7</span> 05:52 .viminfo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>total 为该目录下的所有数据所占用的实际块数量乘以块大小的值。</p>
<p>从左到右以空格分隔成七列，分别代表：类型和权限、连接、所有者、所有组、大小、修改时间、文件名。</p>
<h1 id="文件类型"><a class="markdownIt-Anchor" href="#文件类型"></a> 文件类型</h1>
<p>第一列第一个字段用来表示文件的类型，文件类型有下面几种：</p>
<table>
<thead>
<tr>
<th><strong>标记</strong></th>
<th><strong>类型</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>-</td>
<td>普通文件</td>
<td>文本文件、数据文件、可执行程序等都作为普通文件存储</td>
</tr>
<tr>
<td>d</td>
<td>目录</td>
<td>目录不存放常规数据，它用来组织访问其他文件</td>
</tr>
<tr>
<td>c</td>
<td>字符设备文件</td>
<td>指处理数据时每次只能处理一个字符的设备，例如鼠标、键盘（一次性读取设备）</td>
</tr>
<tr>
<td>b</td>
<td>块设备文件</td>
<td>指处理数据时每次能处理大块数据的设备，例如硬盘</td>
</tr>
<tr>
<td>s</td>
<td>本地域套接字</td>
<td>实现进程间通信的连接，本地域套接字由系统调用 socket 创建</td>
</tr>
<tr>
<td>p</td>
<td>有名管道(FIFO)</td>
<td>让运行在同一主机上的两个进程相互通信，和 socket 文件相似</td>
</tr>
<tr>
<td>l</td>
<td>符号链接</td>
<td>也叫做软链接（Linkfile），通过名字指向文件</td>
</tr>
</tbody>
</table>
<p><code>ls</code> 命令结果展示文件颜色含义：</p>
<table>
<thead>
<tr>
<th><strong>颜色</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>灰色</td>
<td>普通文件</td>
</tr>
<tr>
<td>蓝色</td>
<td>目录</td>
</tr>
<tr>
<td>绿色</td>
<td>可执行文件</td>
</tr>
<tr>
<td>黄色</td>
<td>特殊文件</td>
</tr>
<tr>
<td>红色</td>
<td>压缩文件</td>
</tr>
</tbody>
</table>
<h1 id="文件权限"><a class="markdownIt-Anchor" href="#文件权限"></a> 文件权限</h1>
<p>第一列后九个字段以三个为一组，分别表示：</p>
<ul>
<li>文件所有者权限</li>
<li>同用户组权限</li>
<li>其他用户权限</li>
</ul>
<p>权限为&quot;rwx&quot;的三个参数组合，没有权限显示为&quot;-&quot;减号。</p>
<h1 id="连接节点"><a class="markdownIt-Anchor" href="#连接节点"></a> 连接节点</h1>
<p>第二列数字表示节点，每个文件都会将它的权限与属性记录到文件系统的 inode 中。</p>
<p>这个属性记录的就是有多少不同的文件名连接到相同的一个 inode 号码。</p>
<h1 id="所有者所有组"><a class="markdownIt-Anchor" href="#所有者所有组"></a> 所有者/所有组</h1>
<p>第三列和第四列分别表示文件所属的用户和用户组。</p>
<h1 id="文件大小"><a class="markdownIt-Anchor" href="#文件大小"></a> 文件大小</h1>
<p>第五列表示文件的容量大小，默认单位为 Bytes。</p>
<p>目录显示的大小不是文件夹大小，而是目录元数据的大小。</p>
<h1 id="修改日期"><a class="markdownIt-Anchor" href="#修改日期"></a> 修改日期</h1>
<p>第六列为文件的创建日期或最近修改时间。</p>
<p>如果修改时间距离太久，那时间部分会显示成年份。</p>
<h1 id="文件名"><a class="markdownIt-Anchor" href="#文件名"></a> 文件名</h1>
<p>第七列为文件名或文件夹名。</p>
<p>Linux 的文件名是大小写敏感的。</p>
<p>文件或目录名的第一个字母是&quot;.&quot;表示隐藏文件。</p>
<p><strong>文件名规则</strong>：</p>
<ul>
<li>由大写字母、小写字母、数字和一些特殊符号组成；</li>
<li>不可以包含 * ? &lt; &gt; ( ) [ ] { } / \ | &quot;  ` ＆ ;  ! 等符号；</li>
<li>＋-可以出现在文件名中，但是不能作为文件名中的第一个字母；</li>
<li>文件名中一般不应该包含空格；</li>
<li>使用 Ext 文件系统时，文件名最长 255 个字符，路径最长 4096 个字符。</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 文件与目录权限</title>
    <url>/46662635/</url>
    <content><![CDATA[<h1 id="基本权限"><a class="markdownIt-Anchor" href="#基本权限"></a> 基本权限</h1>
<p>基础权限有三种，分别是：读（r，Read）、写（w，Write）、执行（x，eXecute）。</p>
<p>同样的权限标记对于文件和目录代表不同的意义。</p>
<h2 id="文件权限"><a class="markdownIt-Anchor" href="#文件权限"></a> 文件权限</h2>
<p>文件包括一般文本文件、数据库和二进制可执行文件。文件权限只针对文件内容而言，和改名、删除等操作无关。</p>
<table>
<thead>
<tr>
<th>数字</th>
<th>字符</th>
<th>权限</th>
</tr>
</thead>
<tbody>
<tr>
<td>4</td>
<td>r</td>
<td><strong>读取文件内容</strong>。例如使用 <code>cat</code> 命令查看，使用 <code>vim</code> 以<strong>只读</strong>方式打开。</td>
</tr>
<tr>
<td>2</td>
<td>w</td>
<td><strong>编辑修改</strong>文件内容，但<strong>不包括删除</strong>文件。例如使用 <code>vim</code>、<code>sed</code> 等对文件内容进行修改并保存。</td>
</tr>
<tr>
<td>1</td>
<td>x</td>
<td>文件具有可以被系统<strong>执行</strong>的权限。例如命令和脚本必须拥有此权限才能直接执行。</td>
</tr>
</tbody>
</table>
<h2 id="目录权限"><a class="markdownIt-Anchor" href="#目录权限"></a> 目录权限</h2>
<p>目录主要的内容是记录文件名清单，所以目录权限实际关联的是目录下文件属性查看与更改。</p>
<table>
<thead>
<tr>
<th>数字</th>
<th>字符</th>
<th>权限</th>
</tr>
</thead>
<tbody>
<tr>
<td>4</td>
<td>r</td>
<td><strong>仅查询</strong>目录下的文件或目录<strong>名称</strong>，无法看到属性，相当于执行不加参数的 <code>ls</code> 命令。</td>
</tr>
<tr>
<td>2</td>
<td>w</td>
<td>改变目录结构清单权限，也就是在目录下<strong>新建、删除、重命名</strong>文件或目录。</td>
</tr>
<tr>
<td>1</td>
<td>x</td>
<td><strong>进入目录</strong>的权限，<strong>查询</strong>目录下的文件<strong>属性</strong>。</td>
</tr>
</tbody>
</table>
<h1 id="权限参考"><a class="markdownIt-Anchor" href="#权限参考"></a> 权限参考</h1>
<p>根据使用场景来配置权限。</p>
<p><strong>用户进入目录所需权限</strong>：</p>
<ul>
<li>目录需要 x 权限，来运行 <code>cd</code> 切换目录。</li>
<li>目录需要 r 权限，来使用 <code>ls</code> 命令查看目录中文件列表。</li>
</ul>
<p><strong>用户读取目录内文件所需权限</strong>：</p>
<ul>
<li>目录需要 x 权限来进入目录。</li>
<li>文件需要 r 权限来运行 <code>cat</code>、<code>more</code> 等读取文件命令。</li>
</ul>
<p><strong>用户修改目录内文件所需权限</strong>：</p>
<ul>
<li>目录需要 x 权限来进入目录。</li>
<li>文件需要 r 和 w 权限来使用 <code>vi</code> 等工具进行文件读写。</li>
</ul>
<p><strong>用户创建一个文件所需权限</strong>：</p>
<ul>
<li>目录需要 w 和 x 权限来创建文件。</li>
</ul>
<p><strong>用户执行目录下的命令所需权限</strong>：</p>
<ul>
<li>目录需要 x 权限来进入目录。</li>
<li>文件需要 x 权限来运行命令。</li>
</ul>
<h1 id="特殊权限"><a class="markdownIt-Anchor" href="#特殊权限"></a> 特殊权限</h1>
<p>在 Linux 系统中，还有一些特殊权限。</p>
<h2 id="suid"><a class="markdownIt-Anchor" href="#suid"></a> SUID</h2>
<p>当 s 标志出现在文件所有者的 x 权限上时，被称为 Set UID，其含义为：</p>
<ul>
<li>SUID 权限<strong>仅对二进制程序有效</strong>，不能用在脚本上；</li>
<li>执行者对该程序需要具有 x 的可执行权限；</li>
<li>本权限仅在执行该程序的过程中（run-time）有效；</li>
<li><strong>执行者将具有该程序所有者的权限</strong>。</li>
</ul>
<p>例如一般用户运行 <code>passwd</code> 命令修改密码，需要修改 <code>/etc/shadow</code> 文件。但是该文件的权限只有 root 可读写，而用户运行 passwd 程序时，会暂时获得 passwd 程序的 root 权限，从而可以通过 <code>passwd</code> 命令修改 <code>/etc/shadow</code> 文件。</p>
<p>这是因为运行 <code>passwd</code> 后会启动一个新的进程，该进程会产生一个新的 PID。在该 PID 产生时，SUID 会给予该 PID 特殊的权限设置，使得执行者在该进程中具有该程序所有者的权限。</p>
<h2 id="sgid"><a class="markdownIt-Anchor" href="#sgid"></a> SGID</h2>
<p>当 s 标志出现在文件所属组的 x 权限上时，被称为 Set GID。SGID 可以针对文件或目录来设置。</p>
<p><strong>针对文件</strong>，SGID 有以下功能：</p>
<ul>
<li>SGID 对二进制程序有效；</li>
<li>程序执行者对该程序来说，需要具备 x 的权限；</li>
<li><strong>执行者在执行的过程中将会获得该程序所属组的权限</strong>。</li>
</ul>
<p>例如，一般用户使用 <code>locate</code> 这个程序可以查询 <code>/var/lib/mlocate/mlocate.db</code> 文件的内容，会暂时获得 slocate 用户组的权限。</p>
<p><strong>针对目录</strong>，SGID 有以下功能：</p>
<ul>
<li>用户若对此目录具有 r 和 x 的权限时，该用户能够进入此目录；</li>
<li>用户在此目录下的有效用户组将会变成该目录的用户组；</li>
<li><strong>若用户在此目录下具有 w 的权限，则用户所创建的新文件的所属组与此目录的所属组相同。</strong></li>
</ul>
<h2 id="sbit"><a class="markdownIt-Anchor" href="#sbit"></a> SBIT</h2>
<p>当 t 出现在文件所有者的其他用户 x 权限上时，被称为 Sticky Bit。其含义为：</p>
<ul>
<li>SBIT 权限<strong>仅对目录有效</strong>；</li>
<li>当用户对该目录具有 w 和 x 权限时，即具有写入权限时；</li>
<li><strong>当用户在该目录下创建文件或目录时，仅有自己与 root 才有权力删除该文件。</strong></li>
</ul>
<p>例如，用户 1 对目录 A 具有 w 的权限，里面还有其他用户的文件。此时，目录 A 加上了 SBIT 权限时，用户 1 只能修改自己创建的文件，无法删除他人文件。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 主流文件系统</title>
    <url>/2794564793/</url>
    <content><![CDATA[<h1 id="查看文件系统支持"><a class="markdownIt-Anchor" href="#查看文件系统支持"></a> 查看文件系统支持</h1>
<p>Linux 系统现支持的文件系统格式如下：</p>
<table>
<thead>
<tr>
<th><strong>文件系统</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>ext</td>
<td>Linux 扩展文件系统（Extended Filesystem），最早的 Linux 文件系统。。</td>
</tr>
<tr>
<td>ext2</td>
<td>第 2 代扩展文件系统，在 ext 的基础上提供了更多的功能。ext2 支持 undelete（反删除）和大文件。</td>
</tr>
<tr>
<td>ext3</td>
<td>第 3 代扩展文件系统，支持日志功能。ext3 支持大文件。但不支持反删除（undelete）操作。</td>
</tr>
<tr>
<td>ext4</td>
<td>第 4 代扩展文件系统，支持高级日志功能。</td>
</tr>
<tr>
<td>hpfs</td>
<td>OS/2 高性能文件系统</td>
</tr>
<tr>
<td>jfs</td>
<td>IBM 日志文件系统。</td>
</tr>
<tr>
<td>iso9660</td>
<td>ISO 9660 文件系统（CD-ROM）。</td>
</tr>
<tr>
<td>minix</td>
<td>MINIX 文件系统。</td>
</tr>
<tr>
<td>msdos</td>
<td>微软的 FAT16。</td>
</tr>
<tr>
<td>ncp</td>
<td>Netware 文件系统。</td>
</tr>
<tr>
<td>nfs</td>
<td>网络文件系统。</td>
</tr>
<tr>
<td>ntfs</td>
<td>支持 Microsoft NT 文件系统。</td>
</tr>
<tr>
<td>proc</td>
<td>访问系统信息。</td>
</tr>
<tr>
<td>ReiserFS</td>
<td>高级 Linux 文件系统，支持大文件，支持反删除，几乎能恢复 90%以上的数据，有时能恢复到 100%。</td>
</tr>
<tr>
<td>smb</td>
<td>支持网络访问的 Samba SMB 文件系统。</td>
</tr>
<tr>
<td>sysv</td>
<td>较早期的 Unix 文件系统。</td>
</tr>
<tr>
<td>ufs</td>
<td>BSD 文件系统。</td>
</tr>
<tr>
<td>umsdos</td>
<td>建立在 msdos 上的类 Unix 文件系统。</td>
</tr>
<tr>
<td>vfat</td>
<td>Windows 95 文件系统（FAT32）。</td>
</tr>
<tr>
<td>XFS</td>
<td>高性能 64 位日志文件系统。</td>
</tr>
</tbody>
</table>
<p>可以通过查看 fs 目录了解支持的文件系统有哪些：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 /<span class="token punctuation">]</span>$ <span class="token function">ls</span> <span class="token parameter variable">-l</span> /lib/modules/<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token variable">)</span></span>/kernel/fs
total <span class="token number">20</span>
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">5992</span> Aug <span class="token number">31</span> <span class="token number">11</span>:05 binfmt_misc.ko.xz
drwxr-xr-x. <span class="token number">2</span> root root   <span class="token number">25</span> Sep  <span class="token number">7</span> 05:54 btrfs
drwxr-xr-x. <span class="token number">2</span> root root   <span class="token number">30</span> Sep  <span class="token number">7</span> 05:54 cachefiles
drwxr-xr-x. <span class="token number">2</span> root root   <span class="token number">24</span> Sep  <span class="token number">7</span> 05:54 ceph<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>查看系统目前已加载到内存中支持的文件系统：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 /<span class="token punctuation">]</span>$ <span class="token function">cat</span> /proc/filesystems 
nodev   sysfs
nodev   rootfs
nodev   ramfs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>整个 Linux 系统都是通过虚拟文件系统（VFS，Virtual Filesystem Switch）的内核功能来读取文件系统。虚拟文件系统会管理各种文件系统中的数据，并统一提供给系统调用使用。</p>
<h1 id="日志式文件系统"><a class="markdownIt-Anchor" href="#日志式文件系统"></a> 日志式文件系统</h1>
<p>Linux 中有三种广泛使用的日志文件方法，每种的保护等级都不相同：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据模式</td>
<td>索引节点和文件都会被写入日志。所有写入储存设备的数据都要写两次，因此数据安全但性能较差。</td>
</tr>
<tr>
<td>有序模式</td>
<td>只有索引节点数据会被写入日志，数据写入成功后立即删除。</td>
</tr>
<tr>
<td>回写模式</td>
<td>只有索引节点数据会被写入日志，但不控制文件数据何时写入。</td>
</tr>
</tbody>
</table>
<h2 id="异步处理"><a class="markdownIt-Anchor" href="#异步处理"></a> 异步处理</h2>
<p>当系统加载一个文件到内存后，如果长时间没有改动，则内存区段中的文件数据会被设置为 clean。如果更改了，则设置为 dirty。系统会不定时将内存中设置为 dirty 的数据写回磁盘。这个过程叫做异步处理（Asynchronously）。</p>
<ul>
<li>系统会将常用的文件数据放置在主储存器的缓冲区，以加速文件系统的读写；</li>
<li>可以通过 <code>sync</code> 命令将 dirty 数据写回到硬盘；</li>
<li>正常关机时会调用 <code>sync</code> 将内存中数据写回到硬盘；</li>
<li>非正常关机时可能会造成数据损毁。日志文件系统下次启动时会读取日志文件并处理上次留下的未写入的数据。</li>
</ul>
<h2 id="数据不一致状态"><a class="markdownIt-Anchor" href="#数据不一致状态"></a> 数据不一致状态</h2>
<p>假如文件写入过程中突然断电，写入的数据仅有 inode table 和 data block，最后一个同步更新中间数据的步骤没有完成就会发生数据不一致状态（Inconsistent）。</p>
<p>在 Ext2 文件系统中发生这个问题，系统在重启后会通过 Super Block 当中记录的 valid bit（是否有挂载）与文件系统的 state 等状态判断是否强制进行数据一致性的检查，需要的话运行磁盘扫描程序。</p>
<h2 id="日志文件系统种类"><a class="markdownIt-Anchor" href="#日志文件系统种类"></a> 日志文件系统种类</h2>
<p>日志式文件系统（Journaling file system）是为了避免文件系统不一致的情况发生，在文件系统中规划出一个块，用来记录写入或修改文件时的步骤。</p>
<ul>
<li>当系统要写入一个文件时，会先在日志记录块中记录某个文件准备要写入的信息；</li>
<li>当完成数据与元数据更新后，在日志记录块中完成该文件的记录；</li>
<li>这样当出现问题时，系统只要去检查日志记录块就知道哪个文件发生了问题，针对该问题做一致性检查即可。</li>
</ul>
<p>在上面的 <code>/dev/sdb1</code> 中，journal 块指向 inode 8 号记录，具有 16MB 容量处理日志。</p>
<p>常见日志文件系统如下：</p>
<ul>
<li>
<p><strong>ext3 文件系统</strong></p>
<p>采用和 ext2 文件系统相同的索引节点表结构，但给每个存储设备增加了一个日志文件，以将准备写入存储设备的数据先记入日志。</p>
<p>默认情况下，ext3 文件系统用有序模式的日志功能。也可以在创建文件系统时加入选项，将日志方法改成数据模式或回写模式。</p>
</li>
<li>
<p><strong>ext4 文件系统</strong></p>
<p>除了支持数据压缩和加密，ext4 文件系统还支持一个称为区段（Extent）的特性，区段在存储设备上按块分配空间，但在索引节点表中只保留起始块的位置。</p>
<p>另外一个特性是块预分配技术（Block Preallocation）。如果要给存储一个会变大的文件预留空间，ext4 文件系统可以为文件预分配所有需要的块用 0 填满。</p>
</li>
<li>
<p><strong>Reiser 文件系统</strong></p>
<p>ReiserFS 文件系统只支持回写日志模式，它具有两个特性。一个是可以在线调整已有文件系统的大小。另一个被称为尾部压缩处理（Tailpacking），它能将一个文件的数据填进另一个文件的数据块中空白空间，以此节省容量。</p>
</li>
<li>
<p><strong>JFS 文件系统</strong></p>
<p>JFS 文件系统采用有序日志方法。特点是采用基于区段的文件分配，即为每个写入存储设备的文件分配一组块，这样可以减少存储设备上的碎片。</p>
</li>
<li>
<p><strong>XFS 文件系统</strong></p>
<p>XFS 文件系统采用回写日志模式。和 Reiser 一样支持在线调整文件系统大小，但它<strong>只能扩容，不能缩容</strong>。</p>
</li>
</ul>
<h1 id="ext-文件系统结构"><a class="markdownIt-Anchor" href="#ext-文件系统结构"></a> Ext 文件系统结构</h1>
<p>Linux 中，分区格式化的意义在于选择文件系统，按照文件系统标准将数据初始化。</p>
<p>在选择 ext 文件系统格式化后，磁盘结构变为一个引导扇区（有装系统）+多个块组（Block Group）。如下图所示：</p>
<p><img data-src="../../../images/Ext%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84.gif" alt="Ext文件系统结构" /></p>
<p>启动扇区占大小为 1KB，所以如果 block 大小设为 1024B 的话，启动扇区会存在 0 号 block。而在 block 大小大于 1024B 时，0 号 block 前面是启动扇区，后面跟着 superblock 占用 1K。</p>
<p>每个块组又包含分为六个区域：</p>
<ul>
<li>
<p><strong>超级块</strong>（SuperBlock）</p>
<p>记录文件系统的整体信息，包括 inode/block 的总量、使用量、剩余量，以及文件系统的格式与相关信息。</p>
</li>
<li>
<p><strong>文件系统描述</strong>（File System Description）</p>
<p>这个区段可以描述每个块组的起止 block 号码。</p>
<p>说明块组每个区段（superblock、inode、data、bitmap）的 block 起止号码。</p>
</li>
<li>
<p><strong>块对照表</strong>（Block Bitmap）</p>
<p>块对照表用来辅助块组找到可用的 block 写数据。</p>
<p>删除文件时将对应 block 号码标记为未使用。</p>
</li>
<li>
<p><strong>Inode 对照表</strong>（Inode Bitmap）</p>
<p>与块对照表功能类似，用来记录已使用与未使用的 inode 号码。</p>
</li>
<li>
<p><strong>Inode 表格</strong>（Inode Table）</p>
<p>记录文件的属性，一个文件占用一个 inode，同时记录此文件的数据所在的 block 号码。</p>
</li>
<li>
<p><strong>数据块</strong>（Data Block）</p>
<p>实际记录文件的内容，如果文件太大时，会占用多个 block。</p>
</li>
</ul>
<p>与 FAT 文件系统对比：</p>
<ul>
<li>Linux 文件系统每个 inode 与 block 都有编号，读取文件时先读取 inode 记录，得到文件实际存放的 block 号码，将整个文件读取出来。这种数据访问方法称为索引式文件系统（indexed allocation）。</li>
<li>FAT 格式没有 inode 存在，每个 block 号码都记录在前一个 block 当中。读取文件时必须一个个追踪，硬盘转很多圈才能读到最后一个 block。因此需要磁盘碎片整理，将同一个文件所属的 block 汇合在一起提升磁头搜寻效率。</li>
</ul>
<h2 id="数据块"><a class="markdownIt-Anchor" href="#数据块"></a> 数据块</h2>
<p>数据块是放置文件内容的地方，在 Ext2 中支持的块大小有 1KB、2KB 和 4KB，格式化时可选择块大小，每个块都有编号。</p>
<p>不同块大小支持的分区大小和单文件大小有所不同：</p>
<table>
<thead>
<tr>
<th>块大小</th>
<th>1KB</th>
<th>2KB</th>
<th>4KB</th>
</tr>
</thead>
<tbody>
<tr>
<td>最大单一文件限制</td>
<td>16GB</td>
<td>256GB</td>
<td>2TB</td>
</tr>
<tr>
<td>最大文件系统总容量</td>
<td>2TB</td>
<td>8TB</td>
<td>16TB</td>
</tr>
</tbody>
</table>
<p>每个 block 内最多放置一个文件的数据，如果文件超过 block 大小，会占用多个 block。文件大小小于 block 大小时，block 内剩余容量也不能再被利用。</p>
<h2 id="inode-表格"><a class="markdownIt-Anchor" href="#inode-表格"></a> Inode 表格</h2>
<p>inode 的内容主要记录文件的属性及文件实际数据存放的 block 号码。</p>
<p>inode 记录的文件数据有下面这些：</p>
<ul>
<li>该文件的访问模式（read/write/execute）；</li>
<li>该文件的所有者与组（owner/group）；</li>
<li>该文件的大小；</li>
<li>该文件创建或状态改变的时间（ctime）；</li>
<li>最近一次读取的时间（atime）；</li>
<li>最近修改的时间（mtime）；</li>
<li>定义文件特性的标志（flag），比如 SUID 等；</li>
<li>该文件真正内容的指向（pointer）。</li>
</ul>
<p>inode 的特点：</p>
<ul>
<li>每个 inode 大小均固定为 128Bytes（ext4 和 xfs 可设置到 256Bytes）；</li>
<li>每个文件都仅占用一个 inode；</li>
<li>文件系统能创建的文件数量与 inode 数量有关；</li>
<li>系统读取 inode 时，会匹配 inode 上记录权限与用户是否符合，符合才继续读取 block 内容。</li>
</ul>
<p>inode 记录方式：</p>
<ul>
<li>每个 inode 记录 block 号码的区域定义为：12 个直接，1 个间接，1 个双间接和 1 个三间接记录区；</li>
<li>12 个直接记录能直接取得 block 号码，间接则是再拿一个 block 来当作记录 block 号码的记录区。双间接和三间接则是 block 再次指向下一个记录编号的 block 号码，以此最多三层指向；</li>
<li>以 1k 大小 block 块计算，总共能记录的文件大小为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>12</mn><mo>×</mo><mn>1</mn><mi>K</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mi>K</mi><mi mathvariant="normal">/</mi><mn>4</mn><mi>B</mi><mo>=</mo><mn>256</mn><mi>K</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>256</mn><mo>×</mo><mn>256</mn><mi>K</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>256</mn><mo>×</mo><mn>256</mn><mo>×</mo><mn>256</mn><mi>K</mi><mo stretchy="false">)</mo><mo>=</mo><mn>16</mn><mi>G</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">(12\times1K)+(1K/4B=256K)+(256\times256K)+(256\times256\times256K)=16GB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord">/</span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>；</li>
<li>现在使用 256Bytes 容量大小的 inode，还可以记录更多文件系统信息，包括 ACL 及 SELinux 类型等。记录的单一文件大小达 16TB，且单一文件系统总容量可达 1EB；</li>
</ul>
<h2 id="超级块"><a class="markdownIt-Anchor" href="#超级块"></a> 超级块</h2>
<p>超级块是记录整个文件系统相关信息的地方，一般超级块的大小为 1024 字节。</p>
<p>超级块记录的信息有：</p>
<ul>
<li>block 与 inode 的总量；</li>
<li>未使用与已使用的 inode/block 数量；</li>
<li>block 与 inode 的大小；</li>
<li>文件系统的挂载时间、最近一次写入数据的时间、最近一次检验磁盘（fsck）的时间等；</li>
<li>一个 valid bit 数值，若此文件系统已被挂载则值为 0，未挂载为 1。</li>
</ul>
<p>因为超级块非常重要，所以除了第一个块组中含有超级块外，其他块组中可能存在超级块备份，用来在关键时进行救援修复。</p>
<h2 id="查询文件系统详情"><a class="markdownIt-Anchor" href="#查询文件系统详情"></a> 查询文件系统详情</h2>
<p>使用 <code>dumpe2fs</code> 命令可以查询 ext 文件系统信息.例如查询设备 sdb1：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 /<span class="token punctuation">]</span>$ dumpe2fs /dev/sdb1
dumpe2fs <span class="token number">1.42</span>.9 <span class="token punctuation">(</span><span class="token number">28</span>-Dec-2013<span class="token punctuation">)</span>
Filesystem volume name:   <span class="token operator">&lt;</span>none<span class="token operator">></span>
Last mounted on:          <span class="token operator">&lt;</span>not available<span class="token operator">></span>
Filesystem UUID:          3789ee36-8f38-441c-ac01-c0a9ca8171a1
Filesystem magic number:  0xEF53
Filesystem revision <span class="token comment">#:    1 (dynamic)</span>
Filesystem features:      has_journal ext_attr resize_inode dir_index filetype needs_recovery sparse_super large_file
Filesystem flags:         signed_directory_hash 
Default <span class="token function">mount</span> options:    user_xattr acl
Filesystem state:         clean
Errors behavior:          Continue
Filesystem OS type:       Linux
Inode count:              <span class="token number">65536</span>
Block count:              <span class="token number">261888</span>
Reserved block count:     <span class="token number">13094</span>
Free blocks:              <span class="token number">253344</span>
Free inodes:              <span class="token number">65525</span>
First block:              <span class="token number">0</span>
Block size:               <span class="token number">4096</span>
Fragment size:            <span class="token number">4096</span>
Reserved GDT blocks:      <span class="token number">63</span>
Blocks per group:         <span class="token number">32768</span>
Fragments per group:      <span class="token number">32768</span>
Inodes per group:         <span class="token number">8192</span>
Inode blocks per group:   <span class="token number">512</span>
Filesystem created:       Thu Sep  <span class="token number">9</span> <span class="token number">15</span>:10:34 <span class="token number">2021</span>
Last <span class="token function">mount</span> time:          Thu Sep  <span class="token number">9</span> <span class="token number">15</span>:11:11 <span class="token number">2021</span>
Last <span class="token function">write</span> time:          Thu Sep  <span class="token number">9</span> <span class="token number">15</span>:11:11 <span class="token number">2021</span>
Mount count:              <span class="token number">1</span>
Maximum <span class="token function">mount</span> count:      <span class="token parameter variable">-1</span>
Last checked:             Thu Sep  <span class="token number">9</span> <span class="token number">15</span>:10:34 <span class="token number">2021</span>
Check interval:           <span class="token number">0</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>none<span class="token operator">></span><span class="token punctuation">)</span>
Reserved blocks uid:      <span class="token number">0</span> <span class="token punctuation">(</span>user root<span class="token punctuation">)</span>
Reserved blocks gid:      <span class="token number">0</span> <span class="token punctuation">(</span>group root<span class="token punctuation">)</span>
First inode:              <span class="token number">11</span>
Inode size:               <span class="token number">256</span>
Required extra isize:     <span class="token number">28</span>
Desired extra isize:      <span class="token number">28</span>
Journal inode:            <span class="token number">8</span>
Default directory hash:   half_md4
Directory Hash Seed:      32744b35-d887-4ba9-9431-c5a9d63b9474
Journal backup:           inode blocks
Journal features:         <span class="token punctuation">(</span>none<span class="token punctuation">)</span>
Journal size:             16M
Journal length:           <span class="token number">4096</span>
Journal sequence:         0x00000002
Journal start:            <span class="token number">1</span>


Group <span class="token number">0</span>: <span class="token punctuation">(</span>Blocks <span class="token number">0</span>-32767<span class="token punctuation">)</span>
  Primary superblock at <span class="token number">0</span>, Group descriptors at <span class="token number">1</span>-1
  Reserved GDT blocks at <span class="token number">2</span>-64
  Block bitmap at <span class="token number">65</span> <span class="token punctuation">(</span>+65<span class="token punctuation">)</span>, Inode bitmap at <span class="token number">66</span> <span class="token punctuation">(</span>+66<span class="token punctuation">)</span>
  Inode table at <span class="token number">67</span>-578 <span class="token punctuation">(</span>+67<span class="token punctuation">)</span>
  <span class="token number">32183</span> <span class="token function">free</span> blocks, <span class="token number">8181</span> <span class="token function">free</span> inodes, <span class="token number">2</span> directories
  Free blocks: <span class="token number">585</span>-32767
  Free inodes: <span class="token number">12</span>-8192
Group <span class="token number">1</span>: <span class="token punctuation">(</span>Blocks <span class="token number">32768</span>-65535<span class="token punctuation">)</span>
  Backup superblock at <span class="token number">32768</span>, Group descriptors at <span class="token number">32769</span>-32769
  Reserved GDT blocks at <span class="token number">32770</span>-32832
  Block bitmap at <span class="token number">32833</span> <span class="token punctuation">(</span>+65<span class="token punctuation">)</span>, Inode bitmap at <span class="token number">32834</span> <span class="token punctuation">(</span>+66<span class="token punctuation">)</span>
  Inode table at <span class="token number">32835</span>-33346 <span class="token punctuation">(</span>+67<span class="token punctuation">)</span>
  <span class="token number">32189</span> <span class="token function">free</span> blocks, <span class="token number">8192</span> <span class="token function">free</span> inodes, <span class="token number">0</span> directories
  Free blocks: <span class="token number">33347</span>-65535
  Free inodes: <span class="token number">8193</span>-16384
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到这块磁盘格式化成了 ext3 文件系统后的 inode/block 数量，目前状态为 clean 正常等，这些就是 superblock 所记录的内容。后面以 Group 开头的段为一个个块组信息。</p>
<h1 id="xfs-文件系统结构"><a class="markdownIt-Anchor" href="#xfs-文件系统结构"></a> XFS 文件系统结构</h1>
<p>由于 Ext 文件系统在格式化时采用的是预先规划出所有 inode/block/metadata 等数据，当磁盘容量很小时问题不大，但处理按 TB 计的大硬盘时，仅格式化就需要花费很长时间。</p>
<p>而 XFS 是针对大文件和数据设计的日志式文件系统。XFS 具备了 Ext 文件系统的所有功能，因此被作为 CentOS 7 中的默认文件系统。</p>
<p>XFS 文件系统在数据分布上主要划分为三部分：数据区、文件系统活动登录区和实时运行区。</p>
<h2 id="数据区"><a class="markdownIt-Anchor" href="#数据区"></a> 数据区</h2>
<p>数据区(Data Section)结构基本与 Ext 文件系统相同，包括 inode/data block/superblock 等数据，并且也是分为多个存储区组（Allocation Groups）来分别放置文件系统所需数据。</p>
<p>每个存储区组都包含了：</p>
<ul>
<li>整个文件系统的 superblock；</li>
<li>剩余空间管理机制；</li>
<li>inode 的分配与追踪。</li>
</ul>
<p>此外，inode 与 block 都是系统需要用时才动态配置产生。block 容量可以设置成 512 字节到 64KB，inode 的容量可以设置成 256 字节到 2MB。这是与 Ext 文件系统的主要区别。</p>
<h2 id="文件系统活动日志区"><a class="markdownIt-Anchor" href="#文件系统活动日志区"></a> 文件系统活动日志区</h2>
<p>在文件系统活动日志区（Log Section）中，主要被用来记录文件系统的变化，有点像日志系统。文件的变化会在这里记录下来，直到变化完整写入到硬盘后，记录才会终止。</p>
<p>在遇到突发情况而造成文件系统损毁时，系统会检查日志区，看系统之前正在操作的文件，再检查文件是否正确，依次修复文件系统。</p>
<p>由于此区块读写频繁，因此可以指定单独的磁盘作为 XFS 文件系统的日志区。</p>
<h2 id="实时运行区"><a class="markdownIt-Anchor" href="#实时运行区"></a> 实时运行区</h2>
<p>当有文件要被创建时，XFS 会在实时运行区（Realtime Section）找一到多个 extent 区块，将文件放置在这个区块内，等到分配完成再写入到数据区的 inode 和 block 中。</p>
<p>extent 区块在格式化时可以指定，范围从 4KB 到 1GB，一般默认设置为 64KB 容量。</p>
<h2 id="查询文件系统详情-2"><a class="markdownIt-Anchor" href="#查询文件系统详情-2"></a> 查询文件系统详情</h2>
<p>在 XFS 文件系统中，使用 <code>xfs_info</code> 命令来查看分区详情：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ xfs_info /dev/mapper/centos-root
meta-data<span class="token operator">=</span>/dev/mapper/centos-root <span class="token assign-left variable">isize</span><span class="token operator">=</span><span class="token number">512</span>    <span class="token assign-left variable">agcount</span><span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">agsize</span><span class="token operator">=</span><span class="token number">1113856</span> blks
         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">attr</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">projid32bit</span><span class="token operator">=</span><span class="token number">1</span>
         <span class="token operator">=</span>                       <span class="token assign-left variable">crc</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token assign-left variable">finobt</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">spinodes</span><span class="token operator">=</span><span class="token number">0</span>
data     <span class="token operator">=</span>                       <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">4455424</span>, <span class="token assign-left variable">imaxpct</span><span class="token operator">=</span><span class="token number">25</span>
         <span class="token operator">=</span>                       <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span>      <span class="token assign-left variable">swidth</span><span class="token operator">=</span><span class="token number">0</span> blks
naming   <span class="token operator">=</span>version <span class="token number">2</span>              <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   ascii-ci<span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ftype</span><span class="token operator">=</span><span class="token number">1</span>
log      <span class="token operator">=</span>internal               <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">2560</span>, <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token number">2</span>
         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span> blks, lazy-count<span class="token operator">=</span><span class="token number">1</span>
realtime <span class="token operator">=</span>none                   <span class="token assign-left variable">extsz</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">rtextents</span><span class="token operator">=</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面简单解释下字段含义：</p>
<ul>
<li>第 1 行：
<ul>
<li>isize=512 指定 inode 的容量每个 512 字节大小。</li>
<li>agcount=4 是储存区群组的个数 4 个。可以设置成 CPU 核心的数量来搭配。</li>
<li>agsize=1113856 blks 每个储存区群组具有 1113856 个 block。</li>
</ul>
</li>
<li>第 2 行：
<ul>
<li>sectsz=512 指逻辑扇区容量设置为 512 字节。</li>
</ul>
</li>
<li>第 4 行：
<ul>
<li>bsize=4096 指每个 block 大小为 4KB，可以用 bsize*blocks 得到分区总容量 17821696KB ≈ 16GB。</li>
<li>blocks=4455424 指系统总共有 4455424 个 blocks，可以由 agsize*agcount 算得。</li>
</ul>
</li>
<li>第 5 行：
<ul>
<li>sunit=0 和 RAID 的 stripe 设置有关。</li>
<li>swidth=0 和 RAID 的工作盘数量有关。</li>
</ul>
</li>
<li>第 7 行：
<ul>
<li>internal 表示这个日志区的位置在文件系统内，而不是外部设备。</li>
<li>bsize=4096 日志区 block 大小为 4KB。</li>
<li>blocks=2560 日志区 block 总数 2560，可以算得日志区大小为 10MB。</li>
</ul>
</li>
<li>第 9 行：
<ul>
<li>extsz=4096 指 extent 大小为 4KB。</li>
</ul>
</li>
</ul>
<h1 id="文件与目录数据结构"><a class="markdownIt-Anchor" href="#文件与目录数据结构"></a> 文件与目录数据结构</h1>
<p>每个文件或目录都会占用一个 inode，且可依据文件内容的大小来分配多个 block 给该文件使用。</p>
<h2 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h2>
<p>当在系统中新建一个目录时，至少会分配一个 inode 与一个 block 给该目录。</p>
<ul>
<li><strong>inode 记录本目录相关权限、属性与本目录 block 号码</strong>。</li>
<li><strong>block 记录在这个目录下的文件名与该文件（或目录）对应的 inode 号码</strong>。</li>
</ul>
<p>例如使用 <code>ls -i</code> 查看目录 ext333 内文件所占用 inode 号码：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ <span class="token function">ls</span> <span class="token parameter variable">-li</span>
total <span class="token number">16</span>
<span class="token number">12</span> -rw-r--r--. <span class="token number">1</span> root root     <span class="token number">0</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:37 fist.log
<span class="token number">11</span> drwx------. <span class="token number">2</span> root root <span class="token number">16384</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:10 lost+found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>fist.log 文件的 inode 号码是 12，lost+found 目录的 inode 号码是 11，这些就是记录在 ext333 目录 block 中的数据。</p>
<p>再查看一下目录占用的大小：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ ll <span class="token parameter variable">-dh</span> /ext333/lost+found/ /ext333/
drwxr-xr-x. <span class="token number">3</span> root root <span class="token number">4</span>.0K Sep  <span class="token number">9</span> <span class="token number">15</span>:37 /ext333/
drwx------. <span class="token number">2</span> root root  16K Sep  <span class="token number">9</span> <span class="token number">15</span>:10 /ext333/lost+found/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>可以看到 ext333 目录大小为 4KB，而分区时设置的一个 block 大小也是 4KB，因此它使用了 1 个 block 来记录文件和目录 inode 号码信息。另外 lost+found 目录大小 16KB，说明记录信息太多 1 个 block 不够用，分配了 4 个 block 来记录。</p>
<h2 id="文件"><a class="markdownIt-Anchor" href="#文件"></a> 文件</h2>
<p>当新建一个一般文件时，系统会分配一个 inode 与相对于该文件大小的 block 数量给该文件。</p>
<p>假设 block 大小为 4KB，inode 大小为 128B，要新建 100KB 大小的文件，那么会分配到 1 个 inode 与 25 个 block 来储存该文件。由于 inode 只有 12 个直接指向，因此还要额外分配 1 个 block 来作为 block 号码记录用，文件实际上需要 26 个 block 来储存。</p>
<h2 id="目录树读取"><a class="markdownIt-Anchor" href="#目录树读取"></a> 目录树读取</h2>
<p>inode 本身并不记录文件名，文件名的记录在目录的 block 当中。所以给目录写权限，实际上操作的是修改目录的 block 数据。</p>
<p>删除文件记录（<code>rm</code> 命令），修改文件指向 inode 记录（<code>mv</code> 命令），或者新增文件指向 inode 记录（<code>cp</code> 命令），对应的就是在目录下进行删除、重命名、新增操作。</p>
<p>以下面记录为例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ext333<span class="token punctuation">]</span>$ ll <span class="token parameter variable">-di</span> /ext333/ /ext333/lost+found/ /ext333/lost+found/pass 
<span class="token number">2</span>  drwxr-xr-x. <span class="token number">3</span> root root  <span class="token number">4096</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:37 /ext333/
<span class="token number">11</span> drwx------. <span class="token number">2</span> root root <span class="token number">16384</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:54 /ext333/lost+found/
<span class="token number">14</span> -rw-r--r--. <span class="token number">1</span> root root     <span class="token number">5</span> Sep  <span class="token number">9</span> <span class="token number">15</span>:54 /ext333/lost+found/pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>假设 root 要读取 <code>/ext333/lost+found/pass</code> 这个文件，顺序是这样的：</p>
<ol>
<li>通过挂载点的信息找到 inode 号码为 2 的 ext333 目录，查询 2 号 inode 内容，得到目录权限配置为 755。由于存在 x 权限，因此用户可以进入到 ext333 目录中。由于存在 r 权限，因此用户可以读取目录 ext333 的 block 内容。</li>
<li>通过读取 ext333 目录的 block 内容，得到 lost+found 目录的 inode 号码为 11。继续查询 11 号 inode 内容，得知权限为 rwx，因此继续进入 lost+found 目录，并读取目录的 block 内容。</li>
<li>通过读取目录 lost+found 的 block 内容得知 pass 文件的 inode 号码为 14。继续查询 14 号 inode 内容，得到权限为 rw。由于存在 r 权限，因此获得数据实际存放的 block 地址。</li>
<li>读取 pass 文件的 block 内容。</li>
</ol>
<h2 id="新增文件"><a class="markdownIt-Anchor" href="#新增文件"></a> 新增文件</h2>
<p>新增一个文件或目录时，文件系统的行为如下：</p>
<ol>
<li>首先确定用户是否对欲添加文件的目录拥有 w 和 x 权限，只有具备这两个权限才能进行添加操作；</li>
<li>根据 inode bitmap 寻找一个未使用的 inode 号码，并将新文件的权限和属性写入该 inode 中；</li>
<li>根据 block bitmap 寻找一个未使用的 block 号码，将实际数据写入该 block 中，并更新 inode 的 block 指向数据；</li>
<li>同步更新 inode bitmap 和 block bitmap 中的写入的 inode 与 block 数据，并更新 superblock 的内容。</li>
</ol>
<p>inode table 与 data block 被称为数据存储区域，而其他区域，如 superblock、block bitmap 和 inode bitmap 等，被称为 metadata（中间区域）。</p>
<h1 id="写时复制文件系统"><a class="markdownIt-Anchor" href="#写时复制文件系统"></a> 写时复制文件系统</h1>
<p>写时复制（COW，copy-on-write）利用快照兼顾了安全性和性能。如果要修改数据，会使用克隆或可写快照，修改过的数据并不会直接覆盖当前数据，而是被放入文件系统中的另一个位置。即使数据修改已经完成，之前的旧数据也不会被重写。最流行的 COW 文件系统有下面两种：</p>
<ul>
<li>
<p><strong>ZFS 文件系统</strong></p>
<p>ZFS（Z File System）是一个稳定的文件系统，用在 Sun 公司的 OpenSolaris 系统中，但它并非开源。开源版本叫做 OpenZFS 项目。</p>
</li>
<li>
<p><strong>Btrfs 文件系统</strong></p>
<p>Btrfs 文件系统也被称为 B 树文件系统，它稳定易用，能够动态调整已挂载文件系统的大小。目前 OpenSUSE Linux 把 Btrfs 作为其默认文件系统。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
  <entry>
    <title>计算机硬件基础</title>
    <url>/3847559470/</url>
    <content><![CDATA[<h1 id="计算机简介"><a class="markdownIt-Anchor" href="#计算机简介"></a> 计算机简介</h1>
<p>计算机是一种拥有输入和输出设备的机器，它可以通过输入设备接受用户的输入，并经过中央处理器的数学与逻辑单元的处理，将这些输入转换成有用的信息进行生成或储存。因此，计算机可以说是一种具有高度智能化的信息处理工具。</p>
<h2 id="计算机组成"><a class="markdownIt-Anchor" href="#计算机组成"></a> 计算机组成</h2>
<p>计算机通常由五大部分组成，它们分别是输入单元、输出单元、中央处理器（CPU）内部的控制单元、算术逻辑单元和内存。这些部分协同工作，使得计算机能够完成复杂的计算和数据处理任务。其中，输入单元用于接收用户的输入信息，输出单元用于向用户展示计算机处理结果，控制单元则负责控制计算机的整个运作过程，算术逻辑单元则处理计算机的算术和逻辑运算，而内存则用于储存数据和程序。这五大部分共同构成了现代计算机的核心。</p>
<h2 id="计算机分类"><a class="markdownIt-Anchor" href="#计算机分类"></a> 计算机分类</h2>
<p>根据用途的不同，计算机可以被分为以下几类：</p>
<ul>
<li>
<p><strong>超级计算机</strong>（Supercomputer）：</p>
<p>这是最快也最贵的计算机，通常用于需要进行高速计算的项目中，比如军事、气象、太空、模拟等。</p>
</li>
<li>
<p><strong>大型计算机</strong>（Mainframe Computer）：</p>
<p>这种计算机用于处理大规模的数据和复杂的运算，常见于证券、银行、大型企业数据库服务器等场所。</p>
</li>
<li>
<p><strong>迷你计算机</strong>（Minicomputer）：</p>
<p>迷你计算机是低配版的大型计算机，适用于那些场所环境要求不那么严格的场合，比如科研、工程分析、工厂等。</p>
</li>
<li>
<p><strong>工作站</strong>（Workstation）：</p>
<p>工作站是专门针对特定用途而设计的计算机，比如图形工作站、机器学习等。与个人电脑相比，工作站更强调稳定性。</p>
</li>
<li>
<p><strong>微型计算机</strong>（Microcomputer）：</p>
<p>微型计算机也称为个人计算机（PC），包括移动设备和桌面型电脑等。它们是普及度最高的计算机类型，广泛应用于个人和办公场所，具有性价比高和易于携带的优点。</p>
</li>
</ul>
<h1 id="cpu"><a class="markdownIt-Anchor" href="#cpu"></a> CPU</h1>
<p>中央处理器（CPU，Central Processing Unit）是计算机中最重要的组成部分之一，它是一个集成了微指令集和特定功能的芯片。CPU 通过执行指令来控制计算机的操作，包括算术逻辑运算、数据存储和检索等核心功能。因此，CPU 可以被认为是计算机的” 大脑 “，它的性能直接影响计算机的整体运行速度和效率。</p>
<h2 id="cpu-的组成单元"><a class="markdownIt-Anchor" href="#cpu-的组成单元"></a> CPU 的组成单元</h2>
<ul>
<li>
<p><strong>算术逻辑单元</strong></p>
<p>算术逻辑单元（ALU）是 CPU 中的一个重要组成部分，它主要负责执行算术运算和逻辑运算，如加、减、乘、除、与、或、非等。ALU 的运算结果将被存储在寄存器中，供其他单元继续使用。</p>
</li>
<li>
<p><strong>控制单元</strong></p>
<p>控制单元（CU）是 CPU 中的另一个重要组成部分，它主要负责协调和控制 CPU 各个单元之间的工作。CU 从内存中读取指令，并解析指令，然后根据指令的要求控制其他单元的操作。CU 还可以将运算结果写回内存或输出到外设。</p>
</li>
</ul>
<p>通过 ALU 和 CU 的紧密配合，CPU 能够实现各种复杂的计算和操作，从而实现计算机的各种功能。</p>
<h2 id="cpu-指令集"><a class="markdownIt-Anchor" href="#cpu-指令集"></a> CPU 指令集</h2>
<p>CPU 的指令集根据设计理念的不同，可以分为精简指令集（RISC）和复杂指令集（CISC）两种类型：</p>
<ul>
<li>
<p><strong>精简指令集</strong>（RISC，Reduced Instruction Set Computing）</p>
<p>精简指令集的微指令集比较简单明了，每个指令的执行时间都很短，完成的操作比较单一，执行效率高。常见的 RISC CPU 包括 Sun 公司的 SPARC 系列（主要用于学术和银行等大型工作站）、IBM 公司的 Power Architecture（包括 PowerPC，例如索尼 PS 游戏机）和 ARM 系列（主要用于手机、网络设备等嵌入式系统）。</p>
</li>
<li>
<p><strong>复杂指令集</strong>（CISC，Complex Instruction Set Computer）</p>
<p>复杂指令集的每个小指令可以执行一些较低阶的硬件操作，指令数目多而复杂，每条指令的长度不同，执行时间较长，但每个指令可以处理的工作较为丰富。常见的 CISC CPU 包括 AMD 和 Intel 的 x86、x64 架构处理器，其中 “x86” 是因为最早的 Intel 元组型号 8086 发展而来，架构从 8 位升级到 32 位，现在普遍使用的是 64 位 CPU，称为 x86_64 架构。</p>
</li>
</ul>
<p>不同的指令集在硬件设计和编程语言的选择上有所区别，选择适合自己需求的 CPU 和指令集对于系统的性能和稳定性有着重要的影响。</p>
<h2 id="微指令集"><a class="markdownIt-Anchor" href="#微指令集"></a> 微指令集</h2>
<p>除了硬件参数差异（比如二级缓存大小）外，不同 x86 架构的 CPU 还有微指令集的区别。例如，Intel 处理器具有独特的指令集，如用于虚拟化（Intel-VT）、视频硬解码（MMX，SSE）等，可以有效提高特定工作的运行效率。</p>
<p>选择适合自己需求的 CPU 和指令集对于系统的性能和稳定性都有着重要的影响。特定的微指令集能够支持特定的操作，例如 SSE 指令集可以提高多媒体应用程序的性能，因此在开发需要高性能计算的应用程序时需要仔细选择微指令集。</p>
<h2 id="多核心"><a class="markdownIt-Anchor" href="#多核心"></a> 多核心</h2>
<p>多核心是指将两个或更多的运算核心嵌入到一颗 CPU 封装中。与单核 CPU 相比，多核 CPU 可以同时执行更多的指令，从而提高系统的运行效率。多核心处理器广泛应用于需要高性能计算的领域，如科学研究、金融分析、人工智能等。同时，多核心处理器也可以提高普通用户在运行多任务时的体验，例如同时打开多个应用程序或运行多个虚拟机。</p>
<h2 id="cpu-频率"><a class="markdownIt-Anchor" href="#cpu-频率"></a> CPU 频率</h2>
<p>CPU 频率是指 CPU 每秒钟所执行的时钟周期数，通常以赫兹（Hz）为单位。频率越高表示 CPU 单位时间内可以执行更多的指令和计算任务。例如，CPU 的频率为 4.0 GHz 表示这颗 CPU 在一秒内可以执行 4 × 10^9 次时钟周期。</p>
<p>但是，CPU 频率并不是衡量 CPU 性能的唯一指标，还需要考虑 CPU 架构、核心数量、缓存大小、指令集支持等因素。相同频率的 CPU 在性能上可能存在巨大差异。因此，在选择 CPU 时需要全面考虑性能、功耗和预算等因素。</p>
<h2 id="南桥和北桥"><a class="markdownIt-Anchor" href="#南桥和北桥"></a> 南桥和北桥</h2>
<p>南桥和北桥是主板芯片组中的两个核心部件，它们起到协调 CPU 和其他系统组件之间通信的作用。</p>
<ul>
<li>
<p><strong>北桥</strong></p>
<p>北桥是主板芯片组中的一部分，负责连接 CPU 和内存、显卡等高速设备，以及提供系统总线。早期，北桥还包含了内存控制器等重要的子系统，但随着技术的进步，现在内存控制器已经整合到了 CPU 封装中，因此北桥的功能逐渐减弱。</p>
</li>
<li>
<p><strong>南桥</strong></p>
<p>南桥则负责连接低速设备接口，如硬盘、USB、网卡等，提供输入输出总线。此外，南桥还包括了一些重要的子系统，如硬盘控制器、USB 控制器、声卡等。</p>
</li>
</ul>
<p>在现代 CPU 架构中，北桥的功能已经被整合到了 CPU 封装中，因此南北桥已经不再是主板设计的必要组成部分。但是，南北桥的功能仍然存在于芯片组中，并且是支持 CPU 和其他系统组件之间通信的关键组件之一。</p>
<h2 id="32-位与-64-位"><a class="markdownIt-Anchor" href="#32-位与-64-位"></a> 32 位与 64 位</h2>
<p>CPU 的字组大小，也被称为 word size，指的是 CPU 每次能够处理的数据量。32 位 CPU 的字组大小基于 CPU 解析的大小，即 4 个字节。而 64 位 CPU 能够一次性读写 8 个字节（64 位）的数据。</p>
<p>通常情况下，CPU 的字组大小会影响总线宽度和内存读写能力。由于 32 位 CPU 的字组大小为 4 个字节，其最大寻址能力为 2^32 个字节，相当于 4GB。因此，最多只能支持 4GB 内存大小。相比之下，64 位 CPU 的字组大小为 8 个字节，其最大寻址能力为 2^64 个字节，相当于 16EB。因此，64 位 CPU 能够支持更大的内存容量。</p>
<h2 id="外频与倍频"><a class="markdownIt-Anchor" href="#外频与倍频"></a> 外频与倍频</h2>
<p>在早期的 CPU 架构中，北桥用于连接 CPU、内存和显卡设备，因此每个设备都必须与北桥连接，并且具有相同的工作频率。为了解决这个问题，前端总线（FSB，Front Side Bus）应运而生。然而，由于 CPU 的运算速度远远超过其他设备，因此需要使用外频和倍频来满足 FSB 的频率要求。</p>
<p>外频指的是 CPU 与外部元件进行数据传输时的速度。而倍频是 CPU 内部用来加速工作性能的一个倍数。</p>
<p>CPU 的实际频率可以通过以下公式计算：CPU 频率 = 外频 x 倍频。通过调整外频和倍频的值，可以提高 CPU 的性能。</p>
<h2 id="超线程"><a class="markdownIt-Anchor" href="#超线程"></a> 超线程</h2>
<p>超线程（HT，Hyper-Threading）是一种在 CPU 内部将重要的寄存器（register）分为两组的技术，使得每组寄存器都可以供程序使用。因此，两个程序可以同时竞争 CPU 的运算单元，而不需要通过操作系统的多任务切换。</p>
<p>通过 HT 机制，操作系统可以使用实际核心的两倍数量，并且让每个核心逻辑上分离。在支持多核心运行的程序时，只要运算达不到 100% 的 CPU 使用率，超线程确实能帮助提升执行速度，更好地利用 CPU 性能。</p>
<p>在某些情况下，超线程可能会降低性能，例如在 CPU 达到 100% 使用率时，超线程可能会增加 CPU 的开销并导致性能下降。</p>
<h2 id="多级缓存"><a class="markdownIt-Anchor" href="#多级缓存"></a> 多级缓存</h2>
<p>一般 CPU 拥有二级 (L2 Cache) 或更多级缓存，由比 DRAM 速度更快的静态随机访问内存 (SRAM, Static Random Access Memory) 组成，用于存放一些常用的数据。这样，数据可以不通过内存读取，从而大幅提升性能。</p>
<h1 id="内存"><a class="markdownIt-Anchor" href="#内存"></a> 内存</h1>
<p>CPU 处理的数据来源于内存，而处理完毕的数据也要先写回内存，再从内存传输到输出单元。</p>
<p>内存的主要组件是动态随机访问内存 (DRAM, Dynamic Random Access Memory)，只有在通电时才能记录和使用。由于断电后数据会消失，因此也被称为挥发性内存。</p>
<h2 id="内存类型"><a class="markdownIt-Anchor" href="#内存类型"></a> 内存类型</h2>
<p>内存从 SDRAM 发展为 DDR（Double Data Rate），也就是所谓的双倍数据传输速度 SDRAM，它可以在一次工作周期中进行两次数据传输。</p>
<p>例如 DDR400 的内存，代表数据宽度为 64bit，外频为 200MHz，频率为 400MHz，频宽为 3.2GB/s。</p>
<h2 id="内存速度"><a class="markdownIt-Anchor" href="#内存速度"></a> 内存速度</h2>
<p>内存工作频率由 CPU 内的内存控制器决定。例如，假如内存频率为 1600MHz，总线宽度为 64bit，理论最大传输速度为：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1600</mn><mi>M</mi><mi>H</mi><mi>z</mi><mo>∗</mo><mn>64</mn><mi>b</mi><mi>i</mi><mi>t</mi><mo>=</mo><mn>1600</mn><mi>M</mi><mi>H</mi><mi>z</mi><mo>∗</mo><mn>8</mn><mi>B</mi><mi>y</mi><mi>t</mi><mi>e</mi><mi>s</mi><mo>=</mo><mn>12800</mn><mi>M</mi><mi>B</mi><mi mathvariant="normal">/</mi><mi>s</mi><mo>=</mo><mn>12.8</mn><mi>G</mi><mi>B</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">1600MHz * 64bit = 1600MHz * 8Bytes = 12800MB/s = 12.8GB/s
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">4</span><span class="mord mathnormal">b</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">8</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">8</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">/</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">.</span><span class="mord">8</span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">/</span><span class="mord mathnormal">s</span></span></span></span></span></p>
<h2 id="多通道设计"><a class="markdownIt-Anchor" href="#多通道设计"></a> 多通道设计</h2>
<p>当两条同样的内存插入支持内存双通道的主板中时，总线宽度由 64bit 升级到 128bit，传输速度翻倍。这是双通道内存的设计理念。</p>
<p>除了双通道外，服务器提供三信道甚至四信道的内存环境。</p>
<h2 id="物理地址扩展"><a class="markdownIt-Anchor" href="#物理地址扩展"></a> 物理地址扩展</h2>
<p>物理地址扩展（PAE）是基于 x86 服务器的一种功能，它使运行 Windows Server 版本的计算机可以支持 4GB 以上物理内存。物理地址扩展允许将最多 64GB 的物理内存用作常规的 4 KB 页面，并扩展内核能使用的位数以将物理内存地址从 32 位扩展到 36 位。</p>
<h1 id="主板"><a class="markdownIt-Anchor" href="#主板"></a> 主板</h1>
<p>主板（Mainboard）是一种电脑硬件，由芯片组构成，用于沟通和连接各种设备，为 CPU 提供支持和资源。</p>
<p>现代主板一般集成了许多设备元件，如声卡、网卡、显卡、磁盘整合卡等。</p>
<h2 id="cmos-芯片"><a class="markdownIt-Anchor" href="#cmos-芯片"></a> CMOS 芯片</h2>
<p>CMOS 芯片是一种低功耗的、非易失性的芯片，它用于记录主板的重要参数，例如系统时间、CPU 频率、设备 I/O 地址和 IRQ 等信息。由于这些参数需要在断电后仍能保持，CMOS 芯片需要额外的电子供电来保存这些设置。</p>
<h2 id="bios"><a class="markdownIt-Anchor" href="#bios"></a> BIOS</h2>
<p>BIOS (Basic Input Output System) 是一种固化在主板上的程序，用于初始化和测试硬件设备，加载操作系统，并提供各种底层服务和功能。BIOS 存储在闪存（Flash Memory）或 EEPROM 中，可以在开机时被执行。主要用途是加载和修改 CMOS（Complementary Metal-Oxide Semiconductor）中的参数，例如系统时间、CPU 频率、设备 I/O 地址和 IRQ 等。同时，BIOS 也尝试调用存储设备中的开机程序，以启动操作系统。</p>
<p>通常在开机时按下 [del] 键或 [F1] 键可以进入 BIOS 设置界面，进行各种参数设置和硬件配置。</p>
<h2 id="uefi"><a class="markdownIt-Anchor" href="#uefi"></a> UEFI</h2>
<p>UEFI (Unified Extensible Firmware Interface) 是新一代的固件接口标准，相比于传统的 BIOS 更加先进。UEFI 可以使用一个特制的 shell 来做一些管理工作。</p>
<h2 id="固件"><a class="markdownIt-Anchor" href="#固件"></a> 固件</h2>
<p>固件 (firmware) 是绑定在硬件上的控制软件，例如磁盘阵列卡、网卡等。通常储存在只读存储器 (Read Only Memory, ROM) 中，以保证固件的安全性。</p>
<h2 id="pci-插槽"><a class="markdownIt-Anchor" href="#pci-插槽"></a> PCI 插槽</h2>
<p>主板上的扩展插槽主要有 PCI 和 PCI-E 两种类型，它们的速度和频宽如下：</p>
<table>
<thead>
<tr>
<th>规格</th>
<th>宽度 (bit)</th>
<th>速度 (MHz)</th>
<th>频宽</th>
</tr>
</thead>
<tbody>
<tr>
<td>PCI</td>
<td>32</td>
<td>33</td>
<td>133MB/s</td>
</tr>
<tr>
<td>PCI 2.2</td>
<td>64</td>
<td>66</td>
<td>533MB/s</td>
</tr>
<tr>
<td>PCI-X</td>
<td>64</td>
<td>133</td>
<td>1064MB/s</td>
</tr>
<tr>
<td>AGP 4x</td>
<td>32</td>
<td>66x4</td>
<td>1066MB/s</td>
</tr>
<tr>
<td>AGP 8x</td>
<td>32</td>
<td>66x8</td>
<td>2133MB/s</td>
</tr>
<tr>
<td>PCI-E 1.0 x4</td>
<td></td>
<td></td>
<td>1GB/s</td>
</tr>
<tr>
<td>PCI-E 2.0 x2</td>
<td></td>
<td></td>
<td>1GB/s</td>
</tr>
<tr>
<td>PCI-E 3.0 x1</td>
<td></td>
<td></td>
<td>1GB/s</td>
</tr>
<tr>
<td>PCI-E 4.0 x1</td>
<td></td>
<td></td>
<td>2GB/s</td>
</tr>
<tr>
<td>PCI-E 5.0 x1</td>
<td></td>
<td></td>
<td>4GB/s</td>
</tr>
</tbody>
</table>
<p>一般来说，PCI-E 的规格由插槽的长度决定，PCI-E 插槽的工作模式可以参考主板的说明书。如果将一个速度为 x16 的设备插在一个速度为 x8 的 PCI-E 插槽上，该设备将以 x8 的速度运行。</p>
<p>例如，一个 CPU 通常支持 16 个信道（PCI-E 3.0 x16），如果主板上有三个 PCI-E 插槽，那么 PCI-E 插槽的速度可以工作在以下模式：1 x16，2 x8，1 x8 + 2 x4，具体取决于插入的设备数量。</p>
<h2 id="usb-接口"><a class="markdownIt-Anchor" href="#usb-接口"></a> USB 接口</h2>
<p>USB 接口一般用来连接 U 盘、移动硬盘盒、键盘、鼠标等设备。各版本的带宽与速度对比如下：</p>
<table>
<thead>
<tr>
<th>版本</th>
<th>带宽</th>
<th>速度 (MB/s)</th>
</tr>
</thead>
<tbody>
<tr>
<td>USB 1.0</td>
<td>12 Mbit/s</td>
<td>1.5</td>
</tr>
<tr>
<td>USB 2.0</td>
<td>480 Mbit/s</td>
<td>60</td>
</tr>
<tr>
<td>USB 3.0</td>
<td>5 Gbit/s</td>
<td>500</td>
</tr>
<tr>
<td>USB 3.1</td>
<td>10 Gbit/s</td>
<td>1000</td>
</tr>
</tbody>
</table>
<p>为了方便区分版本，主板给 USB 接口采用不同颜色进行显示：白色代表 USB 2.0，蓝色代表 USB 3.0，红色代表 USB 3.1。</p>
<h2 id="其他接口"><a class="markdownIt-Anchor" href="#其他接口"></a> 其他接口</h2>
<p>主板上常见的其他接口如下：</p>
<ul>
<li>
<p><strong>音频输入与输出</strong></p>
<p>一些 3.5mm 圆形插孔，一般用绿色表示耳机插孔，粉红色表示麦克风输入插孔。</p>
</li>
<li>
<p><strong>RJ-45 网络接口</strong></p>
<p>方形接口，用来插入网线。</p>
</li>
<li>
<p><strong>HDMI 接口</strong></p>
<p>HDMI 接口一般用于视频输出。如果主板上有板载显卡，一般会提供该接口。</p>
</li>
</ul>
<h2 id="设备-io-地址与-irq-中断信道"><a class="markdownIt-Anchor" href="#设备-io-地址与-irq-中断信道"></a> 设备 I/O 地址与 IRQ 中断信道</h2>
<p>主板芯片组通过 I/O 地址和 IRQ 中断信道来控制设备。</p>
<ul>
<li>
<p><strong>I/O 地址</strong></p>
<p>I/O 地址用来标识对应的设备，如果两个设备使用相同的 I/O 地址会造成地址冲突，导致设备无法正常工作。</p>
</li>
<li>
<p><strong>IRQ 中断信道</strong></p>
<p>IRQ 用来标识设备工作状态，以方便 CPU 分配工作任务。每个设备都有自己的 IRQ 中断信道，当设备需要 CPU 处理时，会通过 IRQ 向 CPU 发出中断请求。CPU 会停止当前的任务，处理中断请求，并在完成处理后返回原先的任务。</p>
</li>
</ul>
<h1 id="显卡"><a class="markdownIt-Anchor" href="#显卡"></a> 显卡</h1>
<p>显卡是计算机中的一种重要的组件，主要负责图像和影像的显示，也被称为视频显卡（Video Card）或图形加速卡（Graphics Card）。</p>
<h2 id="显存"><a class="markdownIt-Anchor" href="#显存"></a> 显存</h2>
<p>由于每个图像需要占用内存空间来存储颜色信息，因此显卡上有一个专门用于存储图像信息的内存，称为显存。</p>
<h2 id="gpu"><a class="markdownIt-Anchor" href="#gpu"></a> GPU</h2>
<p>除了负责图像显示，显卡上还有一个专门用于进行 3D 运算的加速芯片，称为 GPU。</p>
<h2 id="显卡插槽"><a class="markdownIt-Anchor" href="#显卡插槽"></a> 显卡插槽</h2>
<p>由于显卡需要大量的数据传输，因此使用能提供高带宽的 PCI-E 插槽。</p>
<h2 id="显卡接口"><a class="markdownIt-Anchor" href="#显卡接口"></a> 显卡接口</h2>
<p>常见显卡上用来连接显示器的接口如下:</p>
<ul>
<li>
<p><strong>D-Sub(VGA)</strong></p>
<p>是较早之前的连接接口，主要为 15 针的连接，用于模拟信号传输。</p>
</li>
<li>
<p><strong>DVI</strong></p>
<p>有提供数字传输的 DVI-D 和整合数字和模拟传输的 DVI-I 两种类型。</p>
</li>
<li>
<p><strong>HDMI</strong></p>
<p>可以同时传输图像和声音。</p>
</li>
<li>
<p><strong>DP(DisplayPort)</strong></p>
<p>类似于 HDMI。</p>
</li>
</ul>
<h1 id="硬盘"><a class="markdownIt-Anchor" href="#硬盘"></a> 硬盘</h1>
<p>硬盘是计算机中用于存储数据的设备，一般分为机械硬盘和固态硬盘。</p>
<h2 id="机械硬盘的组成"><a class="markdownIt-Anchor" href="#机械硬盘的组成"></a> 机械硬盘的组成</h2>
<p>传统机械硬盘（HDD，Hard Disk Drive）的物理结构如下：</p>
<ul>
<li>
<p><strong>盘片</strong></p>
<p>数据记录介质，可以有一个或多个盘片。</p>
</li>
<li>
<p><strong>主轴电机</strong></p>
<p>带动盘片旋转，转速越高，读写速度越快。常见的转速有 7200 rpm（转 / 分钟）和 5400 rpm。</p>
</li>
<li>
<p><strong>读写磁头</strong></p>
<p>读取和写入数据，每个盘片面都有一个磁头。</p>
</li>
<li>
<p><strong>机械臂</strong></p>
<p>控制磁头的位置，使其能够读取或写入指定的盘片面。</p>
</li>
</ul>
<p>此外，硬盘电路板上还有一个小容量的闪存用作缓冲内存，用于临时提高硬盘性能。</p>
<p>机械硬盘非常脆弱，因此在通电状态下绝对不要发生碰撞或直接拔插电源线。否则可能会导致逻辑坏道（文件系统损坏）或物理坏道。</p>
<h2 id="机械硬盘盘片"><a class="markdownIt-Anchor" href="#机械硬盘盘片"></a> 机械硬盘盘片</h2>
<p>机械硬盘盘片的表面结构如下：</p>
<ul>
<li>
<p><strong>扇区（sector）</strong></p>
<p>盘片同心圆上切出的小块区域，是硬盘的最小物理存储单元。传统硬盘的扇区容量为 512 字节，而现代硬盘则采用了 4KB 扇区设计。</p>
</li>
<li>
<p><strong>磁道（track）</strong></p>
<p>盘片同心圆上的一个圆环，由一系列相同半径的扇区组成。</p>
</li>
<li>
<p><strong>柱面（cylinder）</strong></p>
<p>所有盘片同心圆上的同一磁道就构成一个柱面。</p>
</li>
</ul>
<p>由于同心圆外圈的扇区比内圈的扇区多，因此硬盘的数据读写是从外向内进行的。</p>
<p>传统机械硬盘的容量计算公式为：磁头数 * 柱面 * 扇区数 * 512Bytes</p>
<h2 id="硬盘传输接口"><a class="markdownIt-Anchor" href="#硬盘传输接口"></a> 硬盘传输接口</h2>
<p>硬盘与主板连接接口经过多次改版，目前主流的有 SATA 和 SAS 接口。</p>
<ul>
<li>
<p><strong>IDE 接口</strong></p>
<p>使用的平行线可以连接两个设备，因此有主 / 从 (Master/Slave) 构架，可以通过跳针设置。</p>
<p>接口传输速度为 Ultra 133 规格，理论速度最高 133MB/s。</p>
</li>
<li>
<p><strong>SATA 接口</strong></p>
<p>在家用机上 IDE 接口的替代接口。SATA 的平行线将数据传输和供电分开。一条平行线对应一个设备，没有跳针设计。</p>
<p>目前主流使用的 SATA 3.0 版本传输速度为 600MB/s。</p>
</li>
<li>
<p><strong>SCSI 接口</strong></p>
<p>在以前服务器硬盘常用接口。硬盘在控制器上含有一块处理器，用来支持一些高级功能。</p>
</li>
<li>
<p><strong>SAS 接口</strong></p>
<p>SAS（Serial Attached SCSI）是串行式 SCSI 的意思，目前已在服务器领域全面取代了 SCSI。</p>
<p>SAS 3.0 的传输速度能达到 1200MB/s。</p>
</li>
</ul>
<h2 id="固态硬盘"><a class="markdownIt-Anchor" href="#固态硬盘"></a> 固态硬盘</h2>
<p>固态硬盘 (SSD, Solid State Disk) 以 NAND 闪存作为储存介质，因此不存在机械硬盘的磁头、盘片等结构，也没有数据分散的问题，读写速度和延迟时间比机械硬盘更优秀。</p>
<p>固态硬盘的寿命和速度取决于使用的内存颗粒类型，常见的类型从好到差分别为 SLC、MLC、TLC、QLC。</p>
<p>一般而言，电脑使用固态硬盘作为系统盘，数据储存在机械硬盘上，可以有效提升整个系统性能。</p>
<h1 id="电源"><a class="markdownIt-Anchor" href="#电源"></a> 电源</h1>
<p>电源供应器（Power Supply Unit，PSU）用于给主板、CPU、显卡和硬盘等硬件供电。选择质量好的电源可以有效降低硬件意外损坏的概率。</p>
<p>如果使用诸如 AIDA 等软件对未超频的电脑进行测试时，在测试过程中出现中途断电或重启等情况，说明电源的额定功率不够或者不稳定。需要减少设备连接或者更换更高功率的电源。</p>
<p>在选购电源时，除了考虑电源的额定功率之外，还需要考虑能源转换率，也就是 $ 输入功率 / 输出功率 $ 的值。转换率值越大越好。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 中磁盘分区基础知识</title>
    <url>/3200821655/</url>
    <content><![CDATA[<h1 id="磁盘设备名"><a class="markdownIt-Anchor" href="#磁盘设备名"></a> 磁盘设备名</h1>
<p>在新版 Linux 中，IDE 和 SATA 的磁盘命名没有区别。</p>
<h2 id="ide-接口硬盘"><a class="markdownIt-Anchor" href="#ide-接口硬盘"></a> IDE 接口硬盘</h2>
<p>由于一个 IDE 接口可以连接两个 IDE 设备，一般主板可以接 4 个 IDE 设备。在系统中，IDE 设备的命名如下：</p>
<table>
<thead>
<tr>
<th><strong>IDE(Jumper)</strong></th>
<th><strong>Master</strong></th>
<th><strong>Slave</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>IDE1(Primary)</td>
<td>/dev/hda</td>
<td>/dev/hdb</td>
</tr>
<tr>
<td>IDE2(Secondary)</td>
<td>/dev/hdc</td>
<td>/dev/hdd</td>
</tr>
</tbody>
</table>
<h2 id="sata-接口硬盘"><a class="markdownIt-Anchor" href="#sata-接口硬盘"></a> SATA 接口硬盘</h2>
<p>SATA 接口设备名由 Linux 内核检测到磁盘的顺序从 a 开始排列，与插槽号无关。例如，两块磁盘插到 SATA1 和 SATA5 插槽上，系统中识别为 sda 和 sdb。</p>
<h1 id="磁盘阵列"><a class="markdownIt-Anchor" href="#磁盘阵列"></a> 磁盘阵列</h1>
<p>磁盘阵列（RAID，Redundant Arrays of Inexpensive Disks）即容错廉价磁盘阵列，指通过一些技术（软件或硬件）将多个较小的磁盘整合成一个较大的磁盘设备，并且具有一定数据保护的功能。</p>
<h2 id="磁盘阵列类型"><a class="markdownIt-Anchor" href="#磁盘阵列类型"></a> 磁盘阵列类型</h2>
<p>磁盘整列有两种组建方式。</p>
<h3 id="硬件磁盘阵列"><a class="markdownIt-Anchor" href="#硬件磁盘阵列"></a> 硬件磁盘阵列</h3>
<p>硬件（hardware）磁盘阵列通过磁盘阵列卡完成组建任务，拥有专门芯片来处理 RAID 任务。性能比较好，例如用来处理 RAID 5 的同位检查码计算，并不会重复消耗原本系统的 I/O 总线。硬件磁盘阵列的设备文件名为/dev/sd[a-p]。</p>
<h3 id="软件磁盘阵列"><a class="markdownIt-Anchor" href="#软件磁盘阵列"></a> 软件磁盘阵列</h3>
<p>软件（software）磁盘阵列利用软件来仿真磁盘阵列功能，与 CPU 运算和 I/O 总线速度关系很大。在 CentOS 中提供的软件磁盘阵列软件为 mdadm，支持以分区为单位组建 RAID0/1/5 等。软件磁盘阵列使用的设备文件名是系统的设备文件/dev/md[0-1]。</p>
<h2 id="磁盘阵列等级"><a class="markdownIt-Anchor" href="#磁盘阵列等级"></a> 磁盘阵列等级</h2>
<p>常见磁盘阵列等级有 4 种：RAID 0（等量模式，stripe）、RAID 1（映像模式，mirror）、RAID 0+1 或 RAID 1+0、RAID 5。</p>
<h3 id="raid-0"><a class="markdownIt-Anchor" href="#raid-0"></a> RAID 0</h3>
<p>此模式下，RAID 会将磁盘先切出等量的区块（名为 chunk，大小 4KB ~ 1MB），写入文件时，该文件依据块大小切割好，依序放到各个磁盘中去。</p>
<p>磁盘可用容量为所有磁盘容量之和。</p>
<p>读写性能最佳。</p>
<p>安全性最糟，任意一块磁盘损坏，所有文件数据将缺损，所有数据都会丢失。</p>
<h3 id="raid-1"><a class="markdownIt-Anchor" href="#raid-1"></a> RAID 1</h3>
<p>此模式让同一份数据完整保存在两块磁盘上面，写入文件时，该文件复制为两份，并分别写入到各个磁盘中去。</p>
<p>磁盘可用容量为所有磁盘容量之和的一半。</p>
<p>写性能在使用软阵列时不好，因为南桥芯片的 I/O 性能有限，同时写入会导致带宽不够。读取性能和 RAID 0 一样。</p>
<p>安全性最好。</p>
<h3 id="raid-01raid-10"><a class="markdownIt-Anchor" href="#raid-01raid-10"></a> RAID 0+1，RAID 1+0</h3>
<p>所谓 RAID 0+1 就是先让两块磁盘组成 RAID 0，再将两组 RAID 0 组成一组 RAID 1。RAID 1+0 则是先组 RAID 0，再组成 RAID 1。</p>
<p>磁盘可用容量和 RAID 1 一样只有一半可用。</p>
<p>读写性能和 RAID 0 一样。</p>
<p>安全性和 RAID 1 一样。</p>
<h3 id="raid-5"><a class="markdownIt-Anchor" href="#raid-5"></a> RAID 5</h3>
<p>至少需要三块以上磁盘才能组建。在每个循环的写入过程中，每块磁盘还加入一个同位检查数据（Parity），这个数据会记录其他磁盘的备份数据，用于磁盘损坏时的恢复。</p>
<p>磁盘可用容量为总磁盘容量减一块磁盘容量。</p>
<p>读写取性能介于 RAID 1 和 RAID 0 之间。</p>
<p>安全性能方面，只接受损坏不超过一块的硬盘情况下恢复数据。</p>
<h2 id="预备磁盘"><a class="markdownIt-Anchor" href="#预备磁盘"></a> 预备磁盘</h2>
<p>磁盘阵列中的磁盘损坏时，可更换坏掉的磁盘并插入新的磁盘，磁盘阵列会主动重建数据。这通常需要在关机重启时进行，但 SAS 支持热插拔，可以避免重启。</p>
<p>为实现系统实时主动重建，需要预备磁盘。预备磁盘是指一块或多块未包含在原磁盘阵列等级中的磁盘。只有在磁盘阵列中出现磁盘损坏时，才会主动将预备磁盘引入磁盘阵列中进行数据重建。</p>
<h1 id="逻辑卷管理器"><a class="markdownIt-Anchor" href="#逻辑卷管理器"></a> 逻辑卷管理器</h1>
<p>逻辑卷管理器（LVM，Logical Volume Manager）通过软件组合几个物理分区（PV），将它们称为一块看起来是独立的大磁盘（VG），然后再将这块大磁盘分成可使用分区（LV），最终挂载使用。</p>
<h2 id="物理卷"><a class="markdownIt-Anchor" href="#物理卷"></a> 物理卷</h2>
<p>物理卷（PV，Physical Volume）分区需要通过 <code>fdisk</code> 调整系统标识符（system ID）为 8e（LVM 的标识符），然后通过 <code>pvcreate</code> 命令将其转换为 LVM 的最底层物理卷（PV），才能利用这些 PV。</p>
<h2 id="卷用户组"><a class="markdownIt-Anchor" href="#卷用户组"></a> 卷用户组</h2>
<p>LVM 将许多 PV 整合成卷用户组(VG，Volume Group)，在 32 位系统下每个 VG 最多仅能包含 65534 个 PE。如果使用 LVM 默认参数，则一个 VG 最大可达 256GB 容量。在 64 位系统下已不存在限制。</p>
<h2 id="物理扩展块"><a class="markdownIt-Anchor" href="#物理扩展块"></a> 物理扩展块</h2>
<p>LVM 默认使用 4MB 的物理扩展块（PE，即 Physical Extent），它是整个 LVM 中最小的存储块，类似于文件系统中的 block 大小。</p>
<h2 id="逻辑卷"><a class="markdownIt-Anchor" href="#逻辑卷"></a> 逻辑卷</h2>
<p>VG 会被切分成逻辑卷（LV，即 Logical Volume），这个 LV 就是最后可以被格式化使用的分区。</p>
<p>LV 的大小与此 LV 内的 PE 总数有关。</p>
<p>为了方便用户利用 LVM 管理其系统，LV 的设备文件名通常指定为 <code>/dev/vgname/lvname</code> 的样式。</p>
<p>更改文件系统容量本质是通过交换 PE 来进行数据转换，将原本 LV 内的 PE 转移到其他设备中以降低 LV 容量，或将其他设备的 PE 加到此 LV 中以增大容量。</p>
<p>对 LV 数据写入机制有两种：</p>
<ul>
<li>
<p><strong>线性模式</strong>（linear）：如果有两个分区 sdb1 和 sdb2 加入到 VG 中，并且整个 VG 只有一个 LV 时，数据会先将 sdb1 写满，再开始写 sdb2。</p>
</li>
<li>
<p><strong>交错模式</strong>（striped）：类似于 RAID 0 的模式，同时向两个分区内写入数据。</p>
</li>
</ul>
<p>LVM 的重点在于可以弹性调整文件系统容量，而不是性能优先，因此默认使用线性模式进行读写。</p>
<h1 id="mbr-分区表"><a class="markdownIt-Anchor" href="#mbr-分区表"></a> MBR 分区表</h1>
<p>目前主流分区表格式有 MBR 和 GPT。早期的 Linux 系统为了兼容 Windows 磁盘，使用的是支持 Windows 的 MBR。</p>
<p>MBR 分区表无法支持 2T 以上容量的硬盘。</p>
<h2 id="第一个扇区"><a class="markdownIt-Anchor" href="#第一个扇区"></a> 第一个扇区</h2>
<p>MBR 分区表第一个扇区（512Bytes）用来记录三个重要的信息：</p>
<ul>
<li>
<p><strong>主引导分区</strong>（MBR，Master Boot Record）：用来安装引导加载程序的地方，有 446Bytes 大小。</p>
</li>
<li>
<p><strong>分区表</strong>（Partition Table）：记录整块硬盘的分区状态，有 64Bytes 大小。</p>
</li>
<li>
<p><strong>引导记录标识</strong>（BRID）：用来判断设备是否可以用于启动，只有 2 Bytes 大小。值为 55 或 AA 表示可引导。</p>
</li>
</ul>
<p>如果第一个扇区出现物理坏道，整块硬盘都不可用。</p>
<h2 id="主引导分区"><a class="markdownIt-Anchor" href="#主引导分区"></a> 主引导分区</h2>
<p>MBR 只有 446Bytes，主要提供以下功能：</p>
<ul>
<li>提供菜单，可以选择不同开机选项，实现多重引导；</li>
<li>载入内核文件，指向可开机的程序区段开启动系统；</li>
<li>转交其他 Loader，将引导加载功能转交给其他 Loader 负责。</li>
</ul>
<h2 id="分区表"><a class="markdownIt-Anchor" href="#分区表"></a> 分区表</h2>
<p>分区表记录了每个分区的起始柱面号，分区只是针对那 64Bytes 的分区表进行设置。由于只有 64Bytes 大小，所以仅能写入四组分区信息。这四组分区信息分为主（Primary）或扩展（Extended）分区。</p>
<p>主分区和扩展分区在 Linux 系统中表示为 <code>sda[1-4]</code>。</p>
<p>分区的最小单位为柱面（Cylinder），通常每个分区都包含一个或多个柱面。</p>
<h2 id="扩展分区"><a class="markdownIt-Anchor" href="#扩展分区"></a> 扩展分区</h2>
<p>扩展分区是指利用额外的扇区来记录分区信息，但无法进行格式化。可以在扩展分区中创建逻辑分区，具体做法是在每个逻辑分区的最前面几个扇区记录分区信息。需要注意的是，一个磁盘最多只能有一个扩展分区，这是操作系统的限制。</p>
<p>为了确保磁盘的连续性，通常将扩展分区的柱面号分配在所有主分区之后。这样可以更好地利用磁盘空间，并有助于提高磁盘读写效率。</p>
<h2 id="逻辑分区"><a class="markdownIt-Anchor" href="#逻辑分区"></a> 逻辑分区</h2>
<p>从扩展分区分出的分区也称为逻辑分区（Logical Partition）。在 Linux 系统中，逻辑分区从 hda5 开始计算。</p>
<p>在一个扩展分区内，相邻的逻辑分区可以合并。如果不相邻，则只能重建扩展分区。</p>
<p>需要注意的是，如果扩展分区被破坏，所有的逻辑分区将被删除，因为逻辑分区的信息都记录在扩展分区中。</p>
<h1 id="gpt-分区表"><a class="markdownIt-Anchor" href="#gpt-分区表"></a> GPT 分区表</h1>
<p>GPT 分区表是为了适应 4K 扇区的硬盘和固态硬盘而设计的，它抛弃了原先以柱面为单位的计算法，改用逻辑区块位址（LBA，Logical Block Address）来规划分区。默认大小为 512Bytes，第一个 LBA 为 LBA0。</p>
<p>GPT 分区表使用前 34 个 LBA 区块来记录分区信息。此外，磁盘最后 33 个 LBA 区块会用于存储分区表备份，以保障分区信息的安全。</p>
<h2 id="mbr-兼容区块"><a class="markdownIt-Anchor" href="#mbr-兼容区块"></a> MBR 兼容区块</h2>
<p>GPT 分区表中的 LBA0 用来兼容 MBR 格式。不同之处在于，原本分区表记录段仅放入一个特殊标志的分区，用来表示此磁盘为 GPT 磁盘。</p>
<h2 id="gpt-表头记录"><a class="markdownIt-Anchor" href="#gpt-表头记录"></a> GPT 表头记录</h2>
<p>GPT 分区表中的 LBA1 记录了分区表本身的位置和大小，备份分区表存放位置，以及分区表校验机制码（CRC32）。如果系统检测到分区表有错误，可以通过这个记录区来获取备份分区表并进行恢复。</p>
<h2 id="分区表-2"><a class="markdownIt-Anchor" href="#分区表-2"></a> 分区表</h2>
<p>分区表存放在 LBA2-33 位置。从 LBA2 开始，每个 LBA 都可以记录 4 笔分区记录，所以默认可以记录 128 个分区记录。</p>
<p>每笔记录占用 128 字节空间，具体内容如下表：</p>
<table>
<thead>
<tr>
<th>起始字节</th>
<th>长度</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>16 字节</td>
<td>分区类型 GUID</td>
</tr>
<tr>
<td>16</td>
<td>16 字节</td>
<td>分区 GUID</td>
</tr>
<tr>
<td>32</td>
<td>8 字节</td>
<td>起始 LBA（小端序）</td>
</tr>
<tr>
<td>40</td>
<td>8 字节</td>
<td>末尾 LBA</td>
</tr>
<tr>
<td>48</td>
<td>8 字节</td>
<td>属性标签（如 bit60 表示“只读”）</td>
</tr>
<tr>
<td>56</td>
<td>72 字节</td>
<td>分区名，可以包括 36 个 UTF-16（小端序）字符</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 命令行使用基础</title>
    <url>/1784829336/</url>
    <content><![CDATA[<h1 id="终端类型"><a class="markdownIt-Anchor" href="#终端类型"></a> 终端类型</h1>
<p>只使用文本的终端被称为字符终端（Character Terminal）或基于文本的终端（Text-Based Terminal），统称命令行界面（CLI，Command Line Interface）。其硬件设备标准代表是 DEC 公司 1978 年生产的 VT100。</p>
<p>图形终端（Graphics Terminal）不仅可以处理文本，还可以显示任何能使用小点在屏幕上进行绘制的内容，也就是可以通过图形用户界面（GUI，Graphical User Interface）和服务端交互。Unix 的 GUI 都基于 X Window System。在图形终端中，用户可以通过鼠标、键盘和触摸屏等设备进行交互操作，相比于命令行界面，图形终端更加直观和易用。</p>
<p>在现代计算机系统中，通常都同时支持命令行界面和图形界面。命令行界面通常用于系统维护、编程和高级用户操作等任务，而图形界面则主要用于日常应用程序的操作和交互。</p>
<p>可以通过查看 <code>$TERM</code> 变量来了解当前使用的终端配置文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server3 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token environment constant">$TERM</span>
vt100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="常用组合快捷键"><a class="markdownIt-Anchor" href="#常用组合快捷键"></a> 常用组合快捷键</h1>
<p>在终端中常用的快捷键如下：</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>【Tab】</td>
<td>命令补全/文件名补齐。</td>
</tr>
<tr>
<td>【Ctrl】+C</td>
<td>中断操作，停止程序运行。</td>
</tr>
<tr>
<td>【Ctrl】+D</td>
<td>键盘输入结束/退出终端/删除光标后字符。</td>
</tr>
<tr>
<td>【Ctrl】+Z</td>
<td>暂停当前进程并丢入后台。</td>
</tr>
<tr>
<td>【Ctrl】+S</td>
<td>暂停当前程序，暂停后按下任意键恢复运行。</td>
</tr>
<tr>
<td>【Ctrl】+A</td>
<td>将光标移动到命令行首。</td>
</tr>
<tr>
<td>【Ctrl】+E</td>
<td>将光标移动到命令行尾。</td>
</tr>
<tr>
<td>【Ctrl】+L</td>
<td>清屏。</td>
</tr>
<tr>
<td>【Ctrl】+【Shift】+N</td>
<td>新建终端窗口。</td>
</tr>
</tbody>
</table>
<h1 id="命令提示符"><a class="markdownIt-Anchor" href="#命令提示符"></a> 命令提示符</h1>
<p>成功登录系统后，终端会显示如下命令提示符：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>各字段的含义如下：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>root</td>
<td>标识当前登录的用户身份</td>
</tr>
<tr>
<td>101c7</td>
<td>表示当前主机的名称</td>
</tr>
<tr>
<td>~</td>
<td>表示当前所在的目录。其中，~表示当前用户的主目录，是一个变量。</td>
</tr>
<tr>
<td>#</td>
<td>如果当前用户为 root，命令提示符为 #；如果为普通用户，则为 $。</td>
</tr>
</tbody>
</table>
<h1 id="命令格式"><a class="markdownIt-Anchor" href="#命令格式"></a> 命令格式</h1>
<p>一般命令格式如下，中括号 [] 表示非必须输入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">命令名称 <span class="token punctuation">[</span>-选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>参数1<span class="token punctuation">]</span> <span class="token punctuation">[</span>参数2<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="命令名称"><a class="markdownIt-Anchor" href="#命令名称"></a> 命令名称</h2>
<p>一行命令第一个输入的部分绝对是命令（command）或可执行文件。</p>
<p>当命令太长时，可以使用反斜杠 \ 来转义回车（必须立刻接特殊字符才能转义），使命令输入连续到下一行。</p>
<p>命令严格区分大小写，通常由小写字母构成。</p>
<h2 id="选项"><a class="markdownIt-Anchor" href="#选项"></a> 选项</h2>
<p>选项（options）前通常会加 - 号，例如 -h。</p>
<p>有时表示输入选项完整全名，则使用 – 符号，例如 <code>--help</code>。</p>
<p>多个选项可以用一个 - 连接起来，例如 -abc，表示同时使用 a、b、c 三个选项。</p>
<h2 id="参数"><a class="markdownIt-Anchor" href="#参数"></a> 参数</h2>
<p>参数（parameter）用于向希望运行的程序传递信息，通常是一些文件名，告诉命令从哪里可以得到输入，以及把输出送到什么地方。</p>
<p>参数之间用空格隔开，多个空格会被视为一个空格。如果参数中含有空格，应该使用双引号或单引号将其括起来，例如：<code>&quot;file name&quot;</code>。</p>
<h1 id="执行命令"><a class="markdownIt-Anchor" href="#执行命令"></a> 执行命令</h1>
<p>在命令行执行命令时，通常有以下两种情况：</p>
<ul>
<li>按下回车键后，命令立即运行并显示结果，等待下一条命令输入。</li>
<li>进入到该命令的环境中，直到结束该命令才回到命令提示符的环境。</li>
</ul>
<p>在命令正常执行完毕后，会返回一个值。如果命令执行成功，则返回值为 0。如果命令执行过程中出错没有完成全部工作，则返回一个非零值（可以通过变量$?查看）。</p>
<h2 id="命令执行顺序"><a class="markdownIt-Anchor" href="#命令执行顺序"></a> 命令执行顺序</h2>
<p>命令的执行顺序按照以下优先级排列：</p>
<ol>
<li>以相对/绝对路径执行命令，例如 <code>/bin/ls</code> 或 <code>ls</code>。</li>
<li>由别名（alias）找到该命令来执行。</li>
<li>由 bash 内置的（builtin）命令来执行。</li>
<li>通过$PATH 变量的顺序找到的第一个命令来执行。</li>
</ol>
<h2 id="执行多条命令"><a class="markdownIt-Anchor" href="#执行多条命令"></a> 执行多条命令</h2>
<p>可以用分号将多条命令写在同一行，这些命令将会依次执行。</p>
<p>例如：查看 root.txt 文件属性；修改其权限为 6755；再次查看 root.txt 的属性：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ ll root.txt <span class="token punctuation">;</span> <span class="token function">chmod</span> <span class="token number">6775</span> root.txt <span class="token punctuation">;</span> ll root.txt 
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">7549</span> Sep <span class="token number">11</span> <span class="token number">11</span>:59 root.txt
-rwsrwsr-x. <span class="token number">1</span> root root <span class="token number">7549</span> Sep <span class="token number">11</span> <span class="token number">11</span>:59 root.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="报错信息"><a class="markdownIt-Anchor" href="#报错信息"></a> 报错信息</h2>
<p>以下是两条报错信息:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>user1@101c7 root<span class="token punctuation">]</span>$ <span class="token function">cat</span> nohup.out <span class="token punctuation">;</span> catt
cat: nohup.out: Permission denied
bash: catt: <span class="token builtin class-name">command</span> not found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>上面的报错信息使用冒号 : 分隔成了三段，分别表示：命令、参数和报错原因。</p>
<h1 id="命令别名"><a class="markdownIt-Anchor" href="#命令别名"></a> 命令别名</h1>
<p>使用<code>alias</code>命令可以为命令或一组命令指定自定义名称。例如，将命令<code>ll -a | more</code>设置为<code>lm</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">alias</span> <span class="token assign-left variable">lm</span><span class="token operator">=</span><span class="token string">'ll -a | more'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>要查询已定义的别名，可以使用<code>-p</code>参数：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">alias</span> <span class="token parameter variable">-p</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">cp</span><span class="token operator">=</span><span class="token string">'cp -i'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">egrep</span><span class="token operator">=</span><span class="token string">'egrep --color=auto'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果要取消别名，使用<code>unalias</code>命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">unalias</span> lm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果要临时挂起别名，例如想要使用原始的<code>ls</code>命令而不是带有<code>--color=auto</code>参数的别名<code>ls</code>，可以在命令前面加上反斜杠\字符：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@server3 ~<span class="token punctuation">]</span>$ <span class="token punctuation">\</span>ls <span class="token parameter variable">-la</span>
total <span class="token number">64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="历史命令"><a class="markdownIt-Anchor" href="#历史命令"></a> 历史命令</h1>
<p>使用快捷键 [Ctrl]+r 可以搜索历史命令记录。搜索结果继续按 [Ctrl]+r 显示上一个找到的命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>reverse-i-search<span class="token punctuation">)</span>`history': <span class="token function">history</span> <span class="token operator">|</span> <span class="token function">grep</span> dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以使用 <code>history</code> 命令查询输入过的历史命令列表。默认情况下，历史命令保存在 <code>~/.bash_history</code> 中。只有在注销登录后，此次会话所执行的命令才会写入文件中。</p>
<p>可用参数:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-c</td>
<td>清除所有记录。</td>
</tr>
<tr>
<td>-d</td>
<td>删除指定编号的命令记录。</td>
</tr>
<tr>
<td>-a</td>
<td>插入当前历史记录到指定文件末尾，默认会将此次会话的历史记录写入到 .bash_history 文件中。</td>
</tr>
<tr>
<td>-w</td>
<td>写入当前的历史记录到指定文件中。</td>
</tr>
</tbody>
</table>
<p>例如，要显示最近的 5 条历史记录：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">history</span> <span class="token number">5</span>
  <span class="token number">888</span>  <span class="token function">date</span>
  <span class="token number">889</span>  <span class="token function">time</span>
  <span class="token number">890</span>  w <span class="token parameter variable">-i</span>
  <span class="token number">891</span>  <span class="token function">cat</span> .bash_history 
  <span class="token number">892</span>  <span class="token function">history</span> <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-n5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以通过<code>!记录编号</code>直接执行对应的命令。例如，要重新运行第 890 条记录，可以输入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token operator">!</span><span class="token number">890</span>
w <span class="token parameter variable">-i</span>
<span class="token number">23</span>:41:23 up <span class="token number">1</span> day,  <span class="token number">8</span>:32,  <span class="token number">2</span> users,  load average: <span class="token number">0.00</span>, <span class="token number">0.01</span>, <span class="token number">0.05</span>
<span class="token environment constant">USER</span>     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
root     pts/0    <span class="token number">192.168</span>.2.101    04:01    <span class="token number">3</span>.00s  <span class="token number">0</span>.84s  <span class="token number">0</span>.00s w <span class="token parameter variable">-i</span>
root     pts/1    <span class="token number">192.168</span>.2.101    <span class="token number">15</span>:12    <span class="token number">8</span>:28m  <span class="token number">0</span>.01s  <span class="token number">0</span>.01s <span class="token parameter variable">-bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果使用<code>!!</code>，则会执行上一个命令。</p>
<h1 id="清屏"><a class="markdownIt-Anchor" href="#清屏"></a> 清屏</h1>
<p>直接输入 <code>clear</code> 命令能清屏：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@101c7 ~<span class="token punctuation">]</span>$ <span class="token function">clear</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Linux</category>
        <category>0.基础概论</category>
      </categories>
  </entry>
</search>
